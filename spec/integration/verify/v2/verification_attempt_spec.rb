##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'VerificationAttempt' do
  it "can read" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.verify.v2.verification_attempts.list()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://verify.twilio.com/v2/Attempts',
    ))).to eq(true)
  end

  it "receives list_verification_attempts_empty responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "attempts": [],
          "meta": {
              "key": "attempts",
              "page": 0,
              "page_size": 50,
              "first_page_url": "https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0",
              "previous_page_url": null,
              "url": "https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0",
              "next_page_url": null
          }
      }
      ]
    ))

    actual = @client.verify.v2.verification_attempts.list()

    expect(actual).to_not eq(nil)
  end

  it "receives list_verification_attempts responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "attempts": [
              {
                  "sid": "VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "service_sid": "VAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "verification_sid": "VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "date_created": "2020-08-11T18:36:59Z",
                  "date_updated": "2020-08-11T18:37:00Z",
                  "conversion_status": "unconverted",
                  "channel": "sms",
                  "price": {
                      "value": "0.005",
                      "currency": "usd"
                  },
                  "channel_data": {
                      "verification_sid": "VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                      "to": "+573003003030",
                      "status": "unconfirmed",
                      "message_status": "undelivered",
                      "error_code": "30008",
                      "country": "CO",
                      "code_length": 6,
                      "locale": "es",
                      "mcc": "732",
                      "mnc": "103",
                      "carrier": "Colombia Movil (Tigo)"
                  },
                  "url": "https://verify.twilio.com/v2/Attempts/VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
              }
          ],
          "meta": {
              "key": "attempts",
              "page": 0,
              "page_size": 50,
              "first_page_url": "https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0",
              "previous_page_url": null,
              "url": "https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0",
              "next_page_url": null
          }
      }
      ]
    ))

    actual = @client.verify.v2.verification_attempts.list()

    expect(actual).to_not eq(nil)
  end

  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.verify.v2.verification_attempts('VLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://verify.twilio.com/v2/Attempts/VLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    ))).to eq(true)
  end

  it "receives fetch_verification_attempt responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "sid": "VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "service_sid": "VAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "verification_sid": "VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "date_created": "2020-08-11T18:36:59Z",
          "date_updated": "2020-08-11T18:37:00Z",
          "conversion_status": "unconverted",
          "channel": "sms",
          "price": {
              "value": "0.005",
              "currency": "usd"
          },
          "channel_data": {
              "verification_sid": "VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
              "to": "+573003003030",
              "status": "unconfirmed",
              "message_status": "undelivered",
              "error_code": "30008",
              "country": "CO",
              "code_length": 6,
              "locale": "es",
              "mcc": "732",
              "mnc": "103",
              "carrier": "Colombia Movil (Tigo)"
          },
          "url": "https://verify.twilio.com/v2/Attempts/VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      }
      ]
    ))

    actual = @client.verify.v2.verification_attempts('VLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch()

    expect(actual).to_not eq(nil)
  end
end