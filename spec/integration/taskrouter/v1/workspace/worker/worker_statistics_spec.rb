##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /

require 'spec_helper.rb'

describe 'WorkerStatistics' do
  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.taskrouter.v1.workspaces("WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") \
                           .workers("WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") \
                           .statistics().fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    values = {}
    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Statistics',
    ))).to eq(true)
  end

  it "receives fetch responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "url": "https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Statistics",
          "cumulative": {
              "activity_durations": [
                  {
                      "avg": 0.0,
                      "friendly_name": "80fa2beb-3a05-11e5-8fc8-98e0d9a1eb73",
                      "max": 0,
                      "min": 0,
                      "sid": "WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                      "total": 0
                  },
                  {
                      "avg": 0.0,
                      "friendly_name": "817ca1c5-3a05-11e5-9292-98e0d9a1eb73",
                      "max": 0,
                      "min": 0,
                      "sid": "WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                      "total": 0
                  },
                  {
                      "avg": 0.0,
                      "friendly_name": "Busy",
                      "max": 0,
                      "min": 0,
                      "sid": "WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                      "total": 0
                  },
                  {
                      "avg": 0.0,
                      "friendly_name": "Idle",
                      "max": 0,
                      "min": 0,
                      "sid": "WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                      "total": 0
                  },
                  {
                      "avg": 0.0,
                      "friendly_name": "Offline",
                      "max": 0,
                      "min": 0,
                      "sid": "WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                      "total": 0
                  },
                  {
                      "avg": 0.0,
                      "friendly_name": "Reserved",
                      "max": 0,
                      "min": 0,
                      "sid": "WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                      "total": 0
                  }
              ],
              "end_time": "2015-08-18T16:36:19Z",
              "reservations_accepted": 0,
              "reservations_canceled": 0,
              "reservations_created": 0,
              "reservations_rejected": 0,
              "reservations_rescinded": 0,
              "reservations_timed_out": 0,
              "start_time": "2015-08-18T16:21:19Z",
              "tasks_assigned": 0
          },
          "worker_sid": "WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "workspace_sid": "WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      }
      ]
    ))

    actual = @client.taskrouter.v1.workspaces("WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") \
                                  .workers("WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") \
                                  .statistics().fetch()

    expect(actual).to_not eq(nil)
  end
end