##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'RatePlan' do
  it "can read" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.wireless.v1.rate_plans.list()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://wireless.twilio.com/v1/RatePlans',
    ))).to eq(true)
  end

  it "receives read_empty responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "meta": {
              "first_page_url": "https://wireless.twilio.com/v1/RatePlans?PageSize=50&Page=0",
              "key": "rate_plans",
              "next_page_url": null,
              "page": 0,
              "page_size": 50,
              "previous_page_url": null,
              "url": "https://wireless.twilio.com/v1/RatePlans?PageSize=50&Page=0"
          },
          "rate_plans": []
      }
      ]
    ))

    actual = @client.wireless.v1.rate_plans.list()

    expect(actual).to_not eq(nil)
  end

  it "receives read_full responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "meta": {
              "first_page_url": "https://wireless.twilio.com/v1/RatePlans?PageSize=50&Page=0",
              "key": "rate_plans",
              "next_page_url": null,
              "page": 0,
              "page_size": 50,
              "previous_page_url": null,
              "url": "https://wireless.twilio.com/v1/RatePlans?PageSize=50&Page=0"
          },
          "rate_plans": [
              {
                  "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "unique_name": "unique_name",
                  "data_enabled": true,
                  "data_limit": 1000,
                  "data_metering": "payg",
                  "date_created": "2019-07-30T20:00:00Z",
                  "date_updated": "2019-07-30T20:00:00Z",
                  "friendly_name": "friendly_name",
                  "messaging_enabled": true,
                  "voice_enabled": true,
                  "national_roaming_enabled": true,
                  "national_roaming_data_limit": 1000,
                  "international_roaming": [
                      "data",
                      "messaging",
                      "voice"
                  ],
                  "international_roaming_data_limit": 1000,
                  "sid": "WPaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  "usage_notification_method": "POST",
                  "usage_notification_url": "https://callback.com",
                  "data_limit_strategy": "block",
                  "url": "https://wireless.twilio.com/v1/RatePlans/WPaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
              }
          ]
      }
      ]
    ))

    actual = @client.wireless.v1.rate_plans.list()

    expect(actual).to_not eq(nil)
  end

  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.wireless.v1.rate_plans('WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://wireless.twilio.com/v1/RatePlans/WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    ))).to eq(true)
  end

  it "receives fetch responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "unique_name": "unique_name",
          "data_enabled": true,
          "data_limit": 1000,
          "data_metering": "payg",
          "date_created": "2019-07-30T20:00:00Z",
          "date_updated": "2019-07-30T20:00:00Z",
          "friendly_name": "friendly_name",
          "messaging_enabled": true,
          "voice_enabled": true,
          "national_roaming_enabled": true,
          "national_roaming_data_limit": 1000,
          "international_roaming": [
              "data",
              "messaging",
              "voice"
          ],
          "international_roaming_data_limit": 1000,
          "sid": "WPaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "usage_notification_method": "POST",
          "usage_notification_url": "https://callback.com",
          "data_limit_strategy": "block",
          "url": "https://wireless.twilio.com/v1/RatePlans/WPaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      }
      ]
    ))

    actual = @client.wireless.v1.rate_plans('WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch()

    expect(actual).to_not eq(nil)
  end

  it "can create" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.wireless.v1.rate_plans.create()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://wireless.twilio.com/v1/RatePlans',
    ))).to eq(true)
  end

  it "receives create responses" do
    @holodeck.mock(Twilio::Response.new(
        201,
      %q[
      {
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "unique_name": "unique_name",
          "data_enabled": true,
          "data_limit": 1000,
          "data_limit_strategy": "block",
          "data_metering": "payg",
          "date_created": "2019-07-30T20:00:00Z",
          "date_updated": "2019-07-30T20:00:00Z",
          "friendly_name": "friendly_name",
          "messaging_enabled": true,
          "voice_enabled": true,
          "national_roaming_enabled": true,
          "national_roaming_data_limit": 1000,
          "international_roaming": [
              "data",
              "messaging",
              "voice"
          ],
          "international_roaming_data_limit": 1000,
          "sid": "WPaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "usage_notification_method": "POST",
          "usage_notification_url": "https://callback.com",
          "url": "https://wireless.twilio.com/v1/RatePlans/WPaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      }
      ]
    ))

    actual = @client.wireless.v1.rate_plans.create()

    expect(actual).to_not eq(nil)
  end

  it "can update" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.wireless.v1.rate_plans('WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').update()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://wireless.twilio.com/v1/RatePlans/WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    ))).to eq(true)
  end

  it "receives update responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "unique_name": "unique_name",
          "data_enabled": true,
          "data_limit": 1000,
          "data_metering": "payg",
          "date_created": "2019-07-30T20:00:00Z",
          "date_updated": "2019-07-30T20:00:00Z",
          "friendly_name": "friendly_name",
          "messaging_enabled": true,
          "voice_enabled": true,
          "national_roaming_enabled": true,
          "national_roaming_data_limit": 1000,
          "international_roaming": [
              "data",
              "messaging",
              "voice"
          ],
          "international_roaming_data_limit": 1000,
          "sid": "WPaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "usage_notification_method": "POST",
          "usage_notification_url": "https://callback.com",
          "data_limit_strategy": "block",
          "url": "https://wireless.twilio.com/v1/RatePlans/WPaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      }
      ]
    ))

    actual = @client.wireless.v1.rate_plans('WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').update()

    expect(actual).to_not eq(nil)
  end

  it "can delete" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.wireless.v1.rate_plans('WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').delete()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'delete',
        url: 'https://wireless.twilio.com/v1/RatePlans/WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    ))).to eq(true)
  end

  it "receives delete responses" do
    @holodeck.mock(Twilio::Response.new(
        204,
      nil,
    ))

    actual = @client.wireless.v1.rate_plans('WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').delete()

    expect(actual).to eq(true)
  end
end