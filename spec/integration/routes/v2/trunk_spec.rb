##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'Trunk' do
  it "can create" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.routes.v2.trunks('sip_trunk_domain').create()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://routes.twilio.com/v2/Trunks/sip_trunk_domain',
    ))).to eq(true)
  end

  it "receives create responses" do
    @holodeck.mock(Twilio::Response.new(
        201,
      %q[
      {
          "sip_trunk_domain": "test.pstn.twilio.com",
          "url": "https://routes.twilio.com/v2/Trunks/test.pstn.twilio.com",
          "sid": "QQaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "friendly_name": "friendly_name",
          "voice_region": "au1",
          "date_created": "2020-08-07T22:29:24Z",
          "date_updated": "2020-08-07T22:29:24Z"
      }
      ]
    ))

    actual = @client.routes.v2.trunks('sip_trunk_domain').create()

    expect(actual).to_not eq(nil)
  end

  it "can update" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.routes.v2.trunks('sip_trunk_domain').update()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://routes.twilio.com/v2/Trunks/sip_trunk_domain',
    ))).to eq(true)
  end

  it "receives update responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "sip_trunk_domain": "test.pstn.twilio.com",
          "url": "https://routes.twilio.com/v2/Trunks/test.pstn.twilio.com",
          "sid": "QQaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "friendly_name": "friendly_name",
          "voice_region": "au1",
          "date_created": "2020-08-07T22:29:24Z",
          "date_updated": "2020-08-07T22:29:24Z"
      }
      ]
    ))

    actual = @client.routes.v2.trunks('sip_trunk_domain').update()

    expect(actual).to_not eq(nil)
  end

  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.routes.v2.trunks('sip_trunk_domain').fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://routes.twilio.com/v2/Trunks/sip_trunk_domain',
    ))).to eq(true)
  end

  it "receives fetch responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "sip_trunk_domain": "test.pstn.twilio.com",
          "url": "https://routes.twilio.com/v2/Trunks/test.pstn.twilio.com",
          "account_sid": "AC00000000000000000000000000000000",
          "sid": "QQ00000000000000000000000000000000",
          "friendly_name": "string",
          "voice_region": "string",
          "date_created": "2022-06-02T22:33:47Z",
          "date_updated": "2022-06-02T22:33:47Z"
      }
      ]
    ))

    actual = @client.routes.v2.trunks('sip_trunk_domain').fetch()

    expect(actual).to_not eq(nil)
  end
end