##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'BrandRegistration' do
  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.messaging.v1.brand_registrations('BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://messaging.twilio.com/v1/a2p/BrandRegistrations/BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    ))).to eq(true)
  end

  it "receives fetch responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "sid": "BN0044409f7e067e279523808d267e2d85",
          "account_sid": "AC78e8e67fc0246521490fb9907fd0c165",
          "customer_profile_bundle_sid": "BU3344409f7e067e279523808d267e2d85",
          "a2p_profile_bundle_sid": "BU3344409f7e067e279523808d267e2d85",
          "date_created": "2021-01-27T14:18:35Z",
          "date_updated": "2021-01-27T14:18:36Z",
          "brand_type": "STANDARD",
          "status": "PENDING",
          "tcr_id": "BXXXXXX",
          "failure_reason": "Registration error",
          "url": "https://messaging.twilio.com/v1/a2p/BrandRegistrations/BN0044409f7e067e279523808d267e2d85",
          "brand_score": 42,
          "brand_feedback": [
              "TAX_ID",
              "NONPROFIT"
          ],
          "identity_status": "VERIFIED",
          "russell_3000": true,
          "government_entity": false,
          "tax_exempt_status": "501c3",
          "skip_automatic_sec_vet": false,
          "mock": false,
          "links": {
              "brand_vettings": "https://messaging.twilio.com/v1/a2p/BrandRegistrations/BN0044409f7e067e279523808d267e2d85/Vettings"
          }
      }
      ]
    ))

    actual = @client.messaging.v1.brand_registrations('BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch()

    expect(actual).to_not eq(nil)
  end

  it "can read" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.messaging.v1.brand_registrations.list()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://messaging.twilio.com/v1/a2p/BrandRegistrations',
    ))).to eq(true)
  end

  it "receives read responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "meta": {
              "page": 0,
              "page_size": 50,
              "first_page_url": "https://messaging.twilio.com/v1/a2p/BrandRegistrations?PageSize=50&Page=0",
              "previous_page_url": null,
              "next_page_url": null,
              "key": "data",
              "url": "https://messaging.twilio.com/v1/a2p/BrandRegistrations?PageSize=50&Page=0"
          },
          "data": [
              {
                  "sid": "BN0044409f7e067e279523808d267e2d85",
                  "account_sid": "AC78e8e67fc0246521490fb9907fd0c165",
                  "customer_profile_bundle_sid": "BU3344409f7e067e279523808d267e2d85",
                  "a2p_profile_bundle_sid": "BU3344409f7e067e279523808d267e2d85",
                  "date_created": "2021-01-27T14:18:35Z",
                  "date_updated": "2021-01-27T14:18:36Z",
                  "brand_type": "STANDARD",
                  "status": "APPROVED",
                  "tcr_id": "BXXXXXX",
                  "failure_reason": "Registration error",
                  "url": "https://messaging.twilio.com/v1/a2p/BrandRegistrations/BN0044409f7e067e279523808d267e2d85",
                  "brand_score": 42,
                  "brand_feedback": [
                      "TAX_ID",
                      "NONPROFIT"
                  ],
                  "identity_status": "VERIFIED",
                  "russell_3000": true,
                  "tax_exempt_status": "501c3",
                  "government_entity": false,
                  "skip_automatic_sec_vet": false,
                  "mock": false,
                  "links": {
                      "brand_vettings": "https://messaging.twilio.com/v1/a2p/BrandRegistrations/BN0044409f7e067e279523808d267e2d85/Vettings"
                  }
              }
          ]
      }
      ]
    ))

    actual = @client.messaging.v1.brand_registrations.list()

    expect(actual).to_not eq(nil)
  end

  it "can create" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.messaging.v1.brand_registrations.create(customer_profile_bundle_sid: 'BUXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', a2p_profile_bundle_sid: 'BUXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')
    }.to raise_exception(Twilio::REST::TwilioError)

    values = {
        'CustomerProfileBundleSid' => 'BUXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        'A2PProfileBundleSid' => 'BUXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    }
    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://messaging.twilio.com/v1/a2p/BrandRegistrations',
        data: values,
    ))).to eq(true)
  end

  it "receives create responses" do
    @holodeck.mock(Twilio::Response.new(
        201,
      %q[
      {
          "sid": "BN0044409f7e067e279523808d267e2d85",
          "account_sid": "AC78e8e67fc0246521490fb9907fd0c165",
          "customer_profile_bundle_sid": "BU0000009f7e067e279523808d267e2d90",
          "a2p_profile_bundle_sid": "BU1111109f7e067e279523808d267e2d85",
          "date_created": "2021-01-28T10:45:51Z",
          "date_updated": "2021-01-28T10:45:51Z",
          "brand_type": "STANDARD",
          "status": "PENDING",
          "tcr_id": "BXXXXXX",
          "failure_reason": "Registration error",
          "url": "https://messaging.twilio.com/v1/a2p/BrandRegistrations/BN0044409f7e067e279523808d267e2d85",
          "brand_score": 42,
          "brand_feedback": [
              "TAX_ID",
              "NONPROFIT"
          ],
          "identity_status": "VERIFIED",
          "russell_3000": true,
          "government_entity": false,
          "tax_exempt_status": "501c3",
          "skip_automatic_sec_vet": false,
          "mock": false,
          "links": {
              "brand_vettings": "https://messaging.twilio.com/v1/a2p/BrandRegistrations/BN0044409f7e067e279523808d267e2d85/Vettings"
          }
      }
      ]
    ))

    actual = @client.messaging.v1.brand_registrations.create(customer_profile_bundle_sid: 'BUXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', a2p_profile_bundle_sid: 'BUXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')

    expect(actual).to_not eq(nil)
  end

  it "can update" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.messaging.v1.brand_registrations('BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').update()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://messaging.twilio.com/v1/a2p/BrandRegistrations/BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    ))).to eq(true)
  end

  it "receives update responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "sid": "BNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "customer_profile_bundle_sid": "BU3344409f7e067e279523808d267e2d85",
          "a2p_profile_bundle_sid": "BU3344409f7e067e279523808d267e2d85",
          "date_created": "2021-01-27T14:18:35Z",
          "date_updated": "2021-01-27T14:18:36Z",
          "brand_type": "STANDARD",
          "status": "PENDING",
          "tcr_id": "BXXXXXX",
          "failure_reason": "Registration error",
          "url": "https://messaging.twilio.com/v1/a2p/BrandRegistrations/BNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "brand_score": 42,
          "brand_feedback": [
              "TAX_ID",
              "NONPROFIT"
          ],
          "identity_status": "VERIFIED",
          "russell_3000": false,
          "government_entity": false,
          "tax_exempt_status": "501c3",
          "skip_automatic_sec_vet": false,
          "mock": false,
          "links": {
              "brand_vettings": "https://messaging.twilio.com/v1/a2p/BrandRegistrations/BNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Vettings"
          }
      }
      ]
    ))

    actual = @client.messaging.v1.brand_registrations('BNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').update()

    expect(actual).to_not eq(nil)
  end
end