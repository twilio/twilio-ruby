##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class FlexApi < Domain
      class V1 < Version
        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class InsightsSegmentsList < ListResource
          ##
          # Initialize the InsightsSegmentsList
          # @param [Version] version Version that contains the resource
          # @return [InsightsSegmentsList] InsightsSegmentsList
          def initialize(version)
            super(version)

            # Path Solution
            @solution = {}
            @uri = "/Insights/Segments"
          end

          ##
          # Lists InsightsSegmentsInstance records from the API as a list.
          # Unlike stream(), this operation is eager and will load `limit` records into
          # memory before returning.
          # @param [Array[String]] reservation_id The list of reservation Ids
          # @param [String] token The Token HTTP request header
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit.  Default is no limit
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records.  If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Array] Array of up to limit results
          def list(reservation_id: :unset, token: :unset, limit: nil, page_size: nil)
            self.stream(
                reservation_id: reservation_id,
                token: token,
                limit: limit,
                page_size: page_size
            ).entries
          end

          ##
          # Streams InsightsSegmentsInstance records from the API as an Enumerable.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          # @param [Array[String]] reservation_id The list of reservation Ids
          # @param [String] token The Token HTTP request header
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit. Default is no limit.
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records. If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Enumerable] Enumerable that will yield up to limit results
          def stream(reservation_id: :unset, token: :unset, limit: nil, page_size: nil)
            limits = @version.read_limits(limit, page_size)

            page = self.page(reservation_id: reservation_id, token: token, page_size: limits[:page_size], )

            @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
          end

          ##
          # When passed a block, yields InsightsSegmentsInstance records from the API.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          def each
            limits = @version.read_limits

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
          end

          ##
          # Retrieve a single page of InsightsSegmentsInstance records from the API.
          # Request is executed immediately.
          # @param [Array[String]] reservation_id The list of reservation Ids
          # @param [String] token The Token HTTP request header
          # @param [String] page_token PageToken provided by the API
          # @param [Integer] page_number Page Number, this value is simply for client state
          # @param [Integer] page_size Number of records to return, defaults to 50
          # @return [Page] Page of InsightsSegmentsInstance
          def page(reservation_id: :unset, token: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
            params = Twilio::Values.of({
                'ReservationId' => Twilio.serialize_list(reservation_id) { |e| e },
                'PageToken' => page_token,
                'Page' => page_number,
                'PageSize' => page_size,
            })
            headers = Twilio::Values.of({'Token' => token, })

            response = @version.page('GET', @uri, params: params, headers: headers)

            InsightsSegmentsPage.new(@version, response, @solution)
          end

          ##
          # Retrieve a single page of InsightsSegmentsInstance records from the API.
          # Request is executed immediately.
          # @param [String] target_url API-generated URL for the requested results page
          # @return [Page] Page of InsightsSegmentsInstance
          def get_page(target_url)
            response = @version.domain.request(
                'GET',
                target_url
            )
            InsightsSegmentsPage.new(@version, response, @solution)
          end

          ##
          # Provide a user friendly representation
          def to_s
            '#<Twilio.FlexApi.V1.InsightsSegmentsList>'
          end
        end

        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class InsightsSegmentsPage < Page
          ##
          # Initialize the InsightsSegmentsPage
          # @param [Version] version Version that contains the resource
          # @param [Response] response Response from the API
          # @param [Hash] solution Path solution for the resource
          # @return [InsightsSegmentsPage] InsightsSegmentsPage
          def initialize(version, response, solution)
            super(version, response)

            # Path Solution
            @solution = solution
          end

          ##
          # Build an instance of InsightsSegmentsInstance
          # @param [Hash] payload Payload response from the API
          # @return [InsightsSegmentsInstance] InsightsSegmentsInstance
          def get_instance(payload)
            InsightsSegmentsInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            '<Twilio.FlexApi.V1.InsightsSegmentsPage>'
          end
        end

        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class InsightsSegmentsContext < InstanceContext
          ##
          # Initialize the InsightsSegmentsContext
          # @param [Version] version Version that contains the resource
          # @param [String] segment_id To unique id of the segment
          # @return [InsightsSegmentsContext] InsightsSegmentsContext
          def initialize(version, segment_id)
            super(version)

            # Path Solution
            @solution = {segment_id: segment_id, }
            @uri = "/Insights/Segments/#{@solution[:segment_id]}"
          end

          ##
          # Fetch the InsightsSegmentsInstance
          # @param [String] token The Token HTTP request header
          # @return [InsightsSegmentsInstance] Fetched InsightsSegmentsInstance
          def fetch(token: :unset)
            headers = Twilio::Values.of({'Token' => token, })

            payload = @version.fetch('GET', @uri, headers: headers)

            InsightsSegmentsInstance.new(@version, payload, segment_id: @solution[:segment_id], )
          end

          ##
          # Provide a user friendly representation
          def to_s
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.FlexApi.V1.InsightsSegmentsContext #{context}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.FlexApi.V1.InsightsSegmentsContext #{context}>"
          end
        end

        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class InsightsSegmentsInstance < InstanceResource
          ##
          # Initialize the InsightsSegmentsInstance
          # @param [Version] version Version that contains the resource
          # @param [Hash] payload payload that contains response from Twilio
          # @param [String] segment_id To unique id of the segment
          # @return [InsightsSegmentsInstance] InsightsSegmentsInstance
          def initialize(version, payload, segment_id: nil)
            super(version)

            # Marshaled Properties
            @properties = {
                'segment_id' => payload['segment_id'],
                'external_id' => payload['external_id'],
                'queue' => payload['queue'],
                'external_contact' => payload['external_contact'],
                'external_segment_link_id' => payload['external_segment_link_id'],
                'date' => payload['date'],
                'account_id' => payload['account_id'],
                'external_segment_link' => payload['external_segment_link'],
                'agent_id' => payload['agent_id'],
                'agent_phone' => payload['agent_phone'],
                'agent_name' => payload['agent_name'],
                'agent_team_name' => payload['agent_team_name'],
                'agent_team_name_in_hierarchy' => payload['agent_team_name_in_hierarchy'],
                'agent_link' => payload['agent_link'],
                'customer_phone' => payload['customer_phone'],
                'customer_name' => payload['customer_name'],
                'customer_link' => payload['customer_link'],
                'segment_recording_offset' => payload['segment_recording_offset'],
                'media' => payload['media'],
                'assessment_type' => payload['assessment_type'],
                'assessment_percentage' => payload['assessment_percentage'],
                'url' => payload['url'],
            }

            # Context
            @instance_context = nil
            @params = {'segment_id' => segment_id || @properties['segment_id'], }
          end

          ##
          # Generate an instance context for the instance, the context is capable of
          # performing various actions.  All instance actions are proxied to the context
          # @return [InsightsSegmentsContext] InsightsSegmentsContext for this InsightsSegmentsInstance
          def context
            unless @instance_context
              @instance_context = InsightsSegmentsContext.new(@version, @params['segment_id'], )
            end
            @instance_context
          end

          ##
          # @return [String] Unique segment Id
          def segment_id
            @properties['segment_id']
          end

          ##
          # @return [String] The id for conversation.
          def external_id
            @properties['external_id']
          end

          ##
          # @return [String] The queue
          def queue
            @properties['queue']
          end

          ##
          # @return [String] The external_contact
          def external_contact
            @properties['external_contact']
          end

          ##
          # @return [String] The uuid for external_segment_link.
          def external_segment_link_id
            @properties['external_segment_link_id']
          end

          ##
          # @return [String] The conversation date.
          def date
            @properties['date']
          end

          ##
          # @return [String] The id for the account.
          def account_id
            @properties['account_id']
          end

          ##
          # @return [String] The hyperlink to recording.
          def external_segment_link
            @properties['external_segment_link']
          end

          ##
          # @return [String] The unique id for the agent.
          def agent_id
            @properties['agent_id']
          end

          ##
          # @return [String] The agent phone number.
          def agent_phone
            @properties['agent_phone']
          end

          ##
          # @return [String] The agent name.
          def agent_name
            @properties['agent_name']
          end

          ##
          # @return [String] The team name of agent.
          def agent_team_name
            @properties['agent_team_name']
          end

          ##
          # @return [String] he team name of agent.
          def agent_team_name_in_hierarchy
            @properties['agent_team_name_in_hierarchy']
          end

          ##
          # @return [String] The link to the agent conversation.
          def agent_link
            @properties['agent_link']
          end

          ##
          # @return [String] The sort value for comment.
          def customer_phone
            @properties['customer_phone']
          end

          ##
          # @return [String] The customer name.
          def customer_name
            @properties['customer_name']
          end

          ##
          # @return [String] The link to the customer conversation.
          def customer_link
            @properties['customer_link']
          end

          ##
          # @return [String] The offset value for the recording.
          def segment_recording_offset
            @properties['segment_recording_offset']
          end

          ##
          # @return [Hash] The media identifiers of the conversation.
          def media
            @properties['media']
          end

          ##
          # @return [Hash] The type of the assessment.
          def assessment_type
            @properties['assessment_type']
          end

          ##
          # @return [Hash] The percentage score on Assessment.
          def assessment_percentage
            @properties['assessment_percentage']
          end

          ##
          # @return [String] The url
          def url
            @properties['url']
          end

          ##
          # Fetch the InsightsSegmentsInstance
          # @param [String] token The Token HTTP request header
          # @return [InsightsSegmentsInstance] Fetched InsightsSegmentsInstance
          def fetch(token: :unset)
            context.fetch(token: token, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.FlexApi.V1.InsightsSegmentsInstance #{values}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.FlexApi.V1.InsightsSegmentsInstance #{values}>"
          end
        end
      end
    end
  end
end