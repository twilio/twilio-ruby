##
#    This code was generated by
#    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
#     |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
#     |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
#
#    Twilio - Flex
#    This is the public Twilio REST API.
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Twilio
    module REST
        class FlexApi < FlexApiBase
            class V1 < Version
                class InsightsAssessmentsCommentList < ListResource
                    ##
                    # Initialize the InsightsAssessmentsCommentList
                    # @param [Version] version Version that contains the resource
                    # @return [InsightsAssessmentsCommentList] InsightsAssessmentsCommentList
                    def initialize(version)
                        super(version)
                        # Path Solution
                        @solution = {  }
                        @uri = "/Insights/QM/Assessments/Comments"
                        
                    end
                    ##
                    # Create the InsightsAssessmentsCommentInstance
                    # @param [String] category_id The ID of the category
                    # @param [String] category_name The name of the category
                    # @param [String] comment The Assessment comment.
                    # @param [String] segment_id The id of the segment.
                    # @param [String] user_name The name of the user.
                    # @param [String] user_email The email id of the user.
                    # @param [String] agent_id The id of the agent.
                    # @param [Float] offset The offset
                    # @param [String] token The Token HTTP request header
                    # @return [InsightsAssessmentsCommentInstance] Created InsightsAssessmentsCommentInstance
                    def create(
                        category_id: nil, 
                        category_name: nil, 
                        comment: nil, 
                        segment_id: nil, 
                        user_name: nil, 
                        user_email: nil, 
                        agent_id: nil, 
                        offset: nil, 
                        token: :unset
                    )

                        data = Twilio::Values.of({
                            'CategoryId' => category_id,
                            'CategoryName' => category_name,
                            'Comment' => comment,
                            'SegmentId' => segment_id,
                            'UserName' => user_name,
                            'UserEmail' => user_email,
                            'AgentId' => agent_id,
                            'Offset' => offset,
                        })

                        headers = Twilio::Values.of({ 'Token' => token, })
                        payload = @version.create('POST', @uri, data: data, headers: headers)
                        InsightsAssessmentsCommentInstance.new(
                            @version,
                            payload,
                        )
                    end

                
                    ##
                    # Lists InsightsAssessmentsCommentInstance records from the API as a list.
                    # Unlike stream(), this operation is eager and will load `limit` records into
                    # memory before returning.
                    # @param [String] token The Token HTTP request header
                    # @param [String] segment_id The id of the segment.
                    # @param [String] agent_id The id of the agent.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Array] Array of up to limit results
                    def list(token: :unset, segment_id: :unset, agent_id: :unset, limit: nil, page_size: nil)
                        self.stream(
                            token: token,
                            segment_id: segment_id,
                            agent_id: agent_id,
                            limit: limit,
                            page_size: page_size
                        ).entries
                    end

                    ##
                    # Streams Instance records from the API as an Enumerable.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    # @param [String] token The Token HTTP request header
                    # @param [String] segment_id The id of the segment.
                    # @param [String] agent_id The id of the agent.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Enumerable] Enumerable that will yield up to limit results
                    def stream(token: :unset, segment_id: :unset, agent_id: :unset, limit: nil, page_size: nil)
                        limits = @version.read_limits(limit, page_size)

                        page = self.page(
                            token: token,
                            segment_id: segment_id,
                            agent_id: agent_id,
                            page_size: limits[:page_size], )

                        @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
                    end

                    ##
                    # When passed a block, yields InsightsAssessmentsCommentInstance records from the API.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    def each
                        limits = @version.read_limits

                        page = self.page(page_size: limits[:page_size], )

                        @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
                    end

                    ##
                    # Retrieve a single page of InsightsAssessmentsCommentInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] token The Token HTTP request header
                    # @param [String] segment_id The id of the segment.
                    # @param [String] agent_id The id of the agent.
                    # @param [String] page_token PageToken provided by the API
                    # @param [Integer] page_number Page Number, this value is simply for client state
                    # @param [Integer] page_size Number of records to return, defaults to 50
                    # @return [Page] Page of InsightsAssessmentsCommentInstance
                    def page(token: :unset, segment_id: :unset, agent_id: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
                        params = Twilio::Values.of({
                            
                            'Token' => token,
                            
                            'SegmentId' => segment_id,
                            
                            'AgentId' => agent_id,
                            
                            'PageToken' => page_token,
                            'Page' => page_number,
                            'PageSize' => page_size,
                        })

                        response = @version.page('GET', @uri, params: params)

                        InsightsAssessmentsCommentPage.new(@version, response, @solution)
                    end

                    ##
                    # Retrieve a single page of InsightsAssessmentsCommentInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] target_url API-generated URL for the requested results page
                    # @return [Page] Page of InsightsAssessmentsCommentInstance
                    def get_page(target_url)
                        response = @version.domain.request(
                            'GET',
                            target_url
                        )
                    InsightsAssessmentsCommentPage.new(@version, response, @solution)
                    end
                    


                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.FlexApi.V1.InsightsAssessmentsCommentList>'
                    end
                end
                class InsightsAssessmentsCommentPage < Page
                    ##
                    # Initialize the InsightsAssessmentsCommentPage
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [InsightsAssessmentsCommentPage] InsightsAssessmentsCommentPage
                    def initialize(version, response, solution)
                        super(version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of InsightsAssessmentsCommentInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [InsightsAssessmentsCommentInstance] InsightsAssessmentsCommentInstance
                    def get_instance(payload)
                        InsightsAssessmentsCommentInstance.new(@version, payload)
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Twilio.FlexApi.V1.InsightsAssessmentsCommentPage>'
                    end
                end
                class InsightsAssessmentsCommentInstance < InstanceResource
                    ##
                    # Initialize the InsightsAssessmentsCommentInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Twilio
                    # @param [String] account_sid The SID of the
                    #   {Account}[https://www.twilio.com/docs/iam/api/account] that created this InsightsAssessmentsComment
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [InsightsAssessmentsCommentInstance] InsightsAssessmentsCommentInstance
                    def initialize(version, payload )
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'account_sid' => payload['account_sid'],
                            'assessment_id' => payload['assessment_id'],
                            'comment' => payload['comment'],
                            'offset' => payload['offset'],
                            'report' => payload['report'],
                            'weight' => payload['weight'],
                            'agent_id' => payload['agent_id'],
                            'segment_id' => payload['segment_id'],
                            'user_name' => payload['user_name'],
                            'user_email' => payload['user_email'],
                            'timestamp' => payload['timestamp'],
                            'url' => payload['url'],
                        }
                    end

                    
                    ##
                    # @return [String] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.
                    def account_sid
                        @properties['account_sid']
                    end
                    
                    ##
                    # @return [String] The unique ID of the assessment.
                    def assessment_id
                        @properties['assessment_id']
                    end
                    
                    ##
                    # @return [Hash] The comment added for assessment.
                    def comment
                        @properties['comment']
                    end
                    
                    ##
                    # @return [Float] The offset
                    def offset
                        @properties['offset']
                    end
                    
                    ##
                    # @return [Boolean] The flag indicating if this assessment is part of report 
                    def report
                        @properties['report']
                    end
                    
                    ##
                    # @return [Float] The weightage given to this comment
                    def weight
                        @properties['weight']
                    end
                    
                    ##
                    # @return [String] The id of the agent.
                    def agent_id
                        @properties['agent_id']
                    end
                    
                    ##
                    # @return [String] The id of the segment.
                    def segment_id
                        @properties['segment_id']
                    end
                    
                    ##
                    # @return [String] The name of the user.
                    def user_name
                        @properties['user_name']
                    end
                    
                    ##
                    # @return [String] The email id of the user.
                    def user_email
                        @properties['user_email']
                    end
                    
                    ##
                    # @return [Float] The timestamp when the record is inserted
                    def timestamp
                        @properties['timestamp']
                    end
                    
                    ##
                    # @return [String] 
                    def url
                        @properties['url']
                    end
                    
                    ##
                    # Provide a user friendly representation
                    def to_s
                        "<Twilio.FlexApi.V1.InsightsAssessmentsCommentInstance>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        "<Twilio.FlexApi.V1.InsightsAssessmentsCommentInstance>"
                    end
                end
            end
        end
    end
end
