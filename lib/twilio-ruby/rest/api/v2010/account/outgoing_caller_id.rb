##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Api < Domain
      class V2010 < Version
        class AccountContext < InstanceContext
          class OutgoingCallerIdList < ListResource
            ##
            # Initialize the OutgoingCallerIdList
            # @param [Version] version Version that contains the resource
            # @param [String] account_sid The SID of the
            #   {Account}[https://www.twilio.com/docs/iam/api/account] that created the
            #   OutgoingCallerId resource.
            # @return [OutgoingCallerIdList] OutgoingCallerIdList
            def initialize(version, account_sid: nil)
              super(version)

              # Path Solution
              @solution = {account_sid: account_sid}
              @uri = "/Accounts/#{@solution[:account_sid]}/OutgoingCallerIds.json"
            end

            ##
            # Lists OutgoingCallerIdInstance records from the API as a list.
            # Unlike stream(), this operation is eager and will load `limit` records into
            # memory before returning.
            # @param [String] phone_number The phone number of the OutgoingCallerId resources
            #   to read.
            # @param [String] friendly_name The string that identifies the OutgoingCallerId
            #   resources to read.
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #    guarantees to never return more than limit.  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when
            #    not set will use the default value of 50 records.  If no page_size is defined
            #    but a limit is defined, stream() will attempt to read the limit with the most
            #    efficient page size, i.e. min(limit, 1000)
            # @return [Array] Array of up to limit results
            def list(phone_number: :unset, friendly_name: :unset, limit: nil, page_size: nil)
              self.stream(
                  phone_number: phone_number,
                  friendly_name: friendly_name,
                  limit: limit,
                  page_size: page_size
              ).entries
            end

            ##
            # Streams OutgoingCallerIdInstance records from the API as an Enumerable.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [String] phone_number The phone number of the OutgoingCallerId resources
            #   to read.
            # @param [String] friendly_name The string that identifies the OutgoingCallerId
            #   resources to read.
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #    guarantees to never return more than limit. Default is no limit.
            # @param [Integer] page_size Number of records to fetch per request, when
            #    not set will use the default value of 50 records. If no page_size is defined
            #    but a limit is defined, stream() will attempt to read the limit with the most
            #    efficient page size, i.e. min(limit, 1000)
            # @return [Enumerable] Enumerable that will yield up to limit results
            def stream(phone_number: :unset, friendly_name: :unset, limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)

              page = self.page(
                  phone_number: phone_number,
                  friendly_name: friendly_name,
                  page_size: limits[:page_size],
              )

              @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
            end

            ##
            # When passed a block, yields OutgoingCallerIdInstance records from the API.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            def each
              limits = @version.read_limits

              page = self.page(page_size: limits[:page_size], )

              @version.stream(page,
                              limit: limits[:limit],
                              page_limit: limits[:page_limit]).each {|x| yield x}
            end

            ##
            # Retrieve a single page of OutgoingCallerIdInstance records from the API.
            # Request is executed immediately.
            # @param [String] phone_number The phone number of the OutgoingCallerId resources
            #   to read.
            # @param [String] friendly_name The string that identifies the OutgoingCallerId
            #   resources to read.
            # @param [String] page_token PageToken provided by the API
            # @param [Integer] page_number Page Number, this value is simply for client state
            # @param [Integer] page_size Number of records to return, defaults to 50
            # @return [Page] Page of OutgoingCallerIdInstance
            def page(phone_number: :unset, friendly_name: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
              params = Twilio::Values.of({
                  'PhoneNumber' => phone_number,
                  'FriendlyName' => friendly_name,
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              })

              response = @version.page('GET', @uri, params: params)

              OutgoingCallerIdPage.new(@version, response, @solution)
            end

            ##
            # Retrieve a single page of OutgoingCallerIdInstance records from the API.
            # Request is executed immediately.
            # @param [String] target_url API-generated URL for the requested results page
            # @return [Page] Page of OutgoingCallerIdInstance
            def get_page(target_url)
              response = @version.domain.request(
                  'GET',
                  target_url
              )
              OutgoingCallerIdPage.new(@version, response, @solution)
            end

            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Api.V2010.OutgoingCallerIdList>'
            end
          end

          class OutgoingCallerIdPage < Page
            ##
            # Initialize the OutgoingCallerIdPage
            # @param [Version] version Version that contains the resource
            # @param [Response] response Response from the API
            # @param [Hash] solution Path solution for the resource
            # @return [OutgoingCallerIdPage] OutgoingCallerIdPage
            def initialize(version, response, solution)
              super(version, response)

              # Path Solution
              @solution = solution
            end

            ##
            # Build an instance of OutgoingCallerIdInstance
            # @param [Hash] payload Payload response from the API
            # @return [OutgoingCallerIdInstance] OutgoingCallerIdInstance
            def get_instance(payload)
              OutgoingCallerIdInstance.new(@version, payload, account_sid: @solution[:account_sid], )
            end

            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Api.V2010.OutgoingCallerIdPage>'
            end
          end

          class OutgoingCallerIdContext < InstanceContext
            ##
            # Initialize the OutgoingCallerIdContext
            # @param [Version] version Version that contains the resource
            # @param [String] account_sid The SID of the
            #   {Account}[https://www.twilio.com/docs/iam/api/account] that created the
            #   OutgoingCallerId resource to fetch.
            # @param [String] sid The Twilio-provided string that uniquely identifies the
            #   OutgoingCallerId resource to fetch.
            # @return [OutgoingCallerIdContext] OutgoingCallerIdContext
            def initialize(version, account_sid, sid)
              super(version)

              # Path Solution
              @solution = {account_sid: account_sid, sid: sid, }
              @uri = "/Accounts/#{@solution[:account_sid]}/OutgoingCallerIds/#{@solution[:sid]}.json"
            end

            ##
            # Fetch the OutgoingCallerIdInstance
            # @return [OutgoingCallerIdInstance] Fetched OutgoingCallerIdInstance
            def fetch
              payload = @version.fetch('GET', @uri)

              OutgoingCallerIdInstance.new(
                  @version,
                  payload,
                  account_sid: @solution[:account_sid],
                  sid: @solution[:sid],
              )
            end

            ##
            # Update the OutgoingCallerIdInstance
            # @param [String] friendly_name A descriptive string that you create to describe
            #   the resource. It can be up to 64 characters long.
            # @return [OutgoingCallerIdInstance] Updated OutgoingCallerIdInstance
            def update(friendly_name: :unset)
              data = Twilio::Values.of({'FriendlyName' => friendly_name, })

              payload = @version.update('POST', @uri, data: data)

              OutgoingCallerIdInstance.new(
                  @version,
                  payload,
                  account_sid: @solution[:account_sid],
                  sid: @solution[:sid],
              )
            end

            ##
            # Delete the OutgoingCallerIdInstance
            # @return [Boolean] true if delete succeeds, false otherwise
            def delete
               @version.delete('DELETE', @uri)
            end

            ##
            # Provide a user friendly representation
            def to_s
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Api.V2010.OutgoingCallerIdContext #{context}>"
            end

            ##
            # Provide a detailed, user friendly representation
            def inspect
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Api.V2010.OutgoingCallerIdContext #{context}>"
            end
          end

          class OutgoingCallerIdInstance < InstanceResource
            ##
            # Initialize the OutgoingCallerIdInstance
            # @param [Version] version Version that contains the resource
            # @param [Hash] payload payload that contains response from Twilio
            # @param [String] account_sid The SID of the
            #   {Account}[https://www.twilio.com/docs/iam/api/account] that created the
            #   OutgoingCallerId resource.
            # @param [String] sid The Twilio-provided string that uniquely identifies the
            #   OutgoingCallerId resource to fetch.
            # @return [OutgoingCallerIdInstance] OutgoingCallerIdInstance
            def initialize(version, payload, account_sid: nil, sid: nil)
              super(version)

              # Marshaled Properties
              @properties = {
                  'sid' => payload['sid'],
                  'date_created' => Twilio.deserialize_rfc2822(payload['date_created']),
                  'date_updated' => Twilio.deserialize_rfc2822(payload['date_updated']),
                  'friendly_name' => payload['friendly_name'],
                  'account_sid' => payload['account_sid'],
                  'phone_number' => payload['phone_number'],
                  'uri' => payload['uri'],
              }

              # Context
              @instance_context = nil
              @params = {'account_sid' => account_sid, 'sid' => sid || @properties['sid'], }
            end

            ##
            # Generate an instance context for the instance, the context is capable of
            # performing various actions.  All instance actions are proxied to the context
            # @return [OutgoingCallerIdContext] OutgoingCallerIdContext for this OutgoingCallerIdInstance
            def context
              unless @instance_context
                @instance_context = OutgoingCallerIdContext.new(@version, @params['account_sid'], @params['sid'], )
              end
              @instance_context
            end

            ##
            # @return [String] The unique string that identifies the resource
            def sid
              @properties['sid']
            end

            ##
            # @return [Time] The RFC 2822 date and time in GMT that the resource was created
            def date_created
              @properties['date_created']
            end

            ##
            # @return [Time] The RFC 2822 date and time in GMT that the resource was last updated
            def date_updated
              @properties['date_updated']
            end

            ##
            # @return [String] The string that you assigned to describe the resource
            def friendly_name
              @properties['friendly_name']
            end

            ##
            # @return [String] The SID of the Account that created the resource
            def account_sid
              @properties['account_sid']
            end

            ##
            # @return [String] The phone number in E.164 format
            def phone_number
              @properties['phone_number']
            end

            ##
            # @return [String] The URI of the resource, relative to `https://api.twilio.com`
            def uri
              @properties['uri']
            end

            ##
            # Fetch the OutgoingCallerIdInstance
            # @return [OutgoingCallerIdInstance] Fetched OutgoingCallerIdInstance
            def fetch
              context.fetch
            end

            ##
            # Update the OutgoingCallerIdInstance
            # @param [String] friendly_name A descriptive string that you create to describe
            #   the resource. It can be up to 64 characters long.
            # @return [OutgoingCallerIdInstance] Updated OutgoingCallerIdInstance
            def update(friendly_name: :unset)
              context.update(friendly_name: friendly_name, )
            end

            ##
            # Delete the OutgoingCallerIdInstance
            # @return [Boolean] true if delete succeeds, false otherwise
            def delete
              context.delete
            end

            ##
            # Provide a user friendly representation
            def to_s
              values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Api.V2010.OutgoingCallerIdInstance #{values}>"
            end

            ##
            # Provide a detailed, user friendly representation
            def inspect
              values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Api.V2010.OutgoingCallerIdInstance #{values}>"
            end
          end
        end
      end
    end
  end
end