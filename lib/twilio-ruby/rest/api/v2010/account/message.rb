##
#    This code was generated by
#    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
#     |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
#     |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
#
#    Twilio - Api
#    This is the public Twilio REST API.
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Twilio
    module REST
        class Api < ApiBase
            class V2010 < Version
                class AccountContext < InstanceContext

                     class MessageList < ListResource
                    ##
                    # Initialize the MessageList
                    # @param [Version] version Version that contains the resource
                    # @return [MessageList] MessageList
                    def initialize(version, account_sid: nil)
                        super(version)
                        # Path Solution
                        @solution = { account_sid: account_sid, }
                        @uri = "/Accounts/#{@solution[:account_sid]}/Messages.json"
                        
                    end
                    ##
                    # Create the MessageInstance
                    # @param [String] to The destination phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format for SMS/MMS or [Channel user address](https://www.twilio.com/docs/sms/channels#channel-addresses) for other 3rd-party channels.
                    # @param [String] status_callback The URL we should call using the `status_callback_method` to send status information to your application. If specified, we POST these message status changes to the URL: `queued`, `failed`, `sent`, `delivered`, or `undelivered`. Twilio will POST its [standard request parameters](https://www.twilio.com/docs/sms/twiml#request-parameters) as well as some additional parameters including `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include this parameter with the `messaging_service_sid`, we use this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/sms/services/api). URLs must contain a valid hostname and underscores are not allowed.
                    # @param [String] application_sid The SID of the application that should receive message status. We POST a `message_sid` parameter and a `message_status` parameter with a value of `sent` or `failed` to the [application](https://www.twilio.com/docs/usage/api/applications)'s `message_status_callback`. If a `status_callback` parameter is also passed, it will be ignored and the application's `message_status_callback` parameter will be used.
                    # @param [Float] max_price The maximum total price in US dollars that you will pay for the message to be delivered. Can be a decimal value that has up to 4 decimal places. All messages are queued for delivery and the message cost is checked before the message is sent. If the cost exceeds `max_price`, the message will fail and a status of `Failed` is sent to the status callback. If `MaxPrice` is not set, the message cost is not checked.
                    # @param [Boolean] provide_feedback Whether to confirm delivery of the message. Set this value to `true` if you are sending messages that have a trackable user action and you intend to confirm delivery of the message using the [Message Feedback API](https://www.twilio.com/docs/sms/api/message-feedback-resource). This parameter is `false` by default.
                    # @param [String] attempt Total number of attempts made ( including this ) to send out the message regardless of the provider used
                    # @param [String] validity_period How long in seconds the message can remain in our outgoing message queue. After this period elapses, the message fails and we call your status callback. Can be between 1 and the default value of 14,400 seconds. After a message has been accepted by a carrier, however, we cannot guarantee that the message will not be queued after this period. We recommend that this value be at least 5 seconds.
                    # @param [Boolean] force_delivery Reserved
                    # @param [MessageContentRetention] content_retention 
                    # @param [MessageAddressRetention] address_retention 
                    # @param [Boolean] smart_encoded Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.
                    # @param [Array[String]] persistent_action Rich actions for Channels Messages.
                    # @param [Boolean] shorten_urls Determines the usage of Click Tracking. Setting it to `true` will instruct Twilio to replace all links in the Message with a shortened version based on the associated Domain Sid and track clicks on them. If this parameter is not set on an API call, we will use the value set on the Messaging Service. If this parameter is not set and the value is not configured on the Messaging Service used this will default to `false`.
                    # @param [MessageScheduleType] schedule_type 
                    # @param [Time] send_at The time that Twilio will send the message. Must be in ISO 8601 format.
                    # @param [Boolean] send_as_mms If set to True, Twilio will deliver the message as a single MMS message, regardless of the presence of media.
                    # @param [String] content_sid The SID of the Content object returned at Content API content create time (https://www.twilio.com/docs/content-api/create-and-send-your-first-content-api-template#create-a-template). If this parameter is not specified, then the Content API will not be utilized.
                    # @param [String] content_variables Key-value pairs of variable names to substitution values, used alongside a content_sid. If not specified, Content API will default to the default variables defined at create time.
                    # @param [String] from A Twilio phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, an [alphanumeric sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or a [Channel Endpoint address](https://www.twilio.com/docs/sms/channels#channel-addresses) that is enabled for the type of message you want to send. Phone numbers or [short codes](https://www.twilio.com/docs/sms/api/short-code) purchased from Twilio also work here. You cannot, for example, spoof messages from a private cell phone number. If you are using `messaging_service_sid`, this parameter must be empty.
                    # @param [String] messaging_service_sid The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services#send-a-message-with-copilot) you want to associate with the Message. Set this parameter to use the [Messaging Service Settings and Copilot Features](https://www.twilio.com/console/sms/services) you have configured and leave the `from` parameter empty. When only this parameter is set, Twilio will use your enabled Copilot Features to select the `from` phone number for delivery.
                    # @param [String] body The text of the message you want to send. Can be up to 1,600 characters in length.
                    # @param [Array[String]] media_url The URL of the media to send with the message. The media can be of type `gif`, `png`, and `jpeg` and will be formatted correctly on the recipient's device. The media size limit is 5MB for supported file types (JPEG, PNG, GIF) and 500KB for [other types](https://www.twilio.com/docs/sms/accepted-mime-types) of accepted media. To send more than one image in the message body, provide multiple `media_url` parameters in the POST request. You can include up to 10 `media_url` parameters per message. You can send images in an SMS message in only the US and Canada.
                    # @return [MessageInstance] Created MessageInstance
                    def create(
                        to: nil, 
                        status_callback: :unset, 
                        application_sid: :unset, 
                        max_price: :unset, 
                        provide_feedback: :unset, 
                        attempt: :unset, 
                        validity_period: :unset, 
                        force_delivery: :unset, 
                        content_retention: :unset, 
                        address_retention: :unset, 
                        smart_encoded: :unset, 
                        persistent_action: :unset, 
                        shorten_urls: :unset, 
                        schedule_type: :unset, 
                        send_at: :unset, 
                        send_as_mms: :unset, 
                        content_sid: :unset, 
                        content_variables: :unset, 
                        from: :unset, 
                        messaging_service_sid: :unset, 
                        body: :unset, 
                        media_url: :unset
                    )

                        data = Twilio::Values.of({
                            'To' => to,
                            'StatusCallback' => status_callback,
                            'ApplicationSid' => application_sid,
                            'MaxPrice' => max_price,
                            'ProvideFeedback' => provide_feedback,
                            'Attempt' => attempt,
                            'ValidityPeriod' => validity_period,
                            'ForceDelivery' => force_delivery,
                            'ContentRetention' => content_retention,
                            'AddressRetention' => address_retention,
                            'SmartEncoded' => smart_encoded,
                            'PersistentAction' => Twilio.serialize_list(persistent_action) { |e| e },
                            'ShortenUrls' => shorten_urls,
                            'ScheduleType' => schedule_type,
                            'SendAt' => Twilio.serialize_iso8601_datetime(send_at),
                            'SendAsMms' => send_as_mms,
                            'ContentSid' => content_sid,
                            'ContentVariables' => content_variables,
                            'From' => from,
                            'MessagingServiceSid' => messaging_service_sid,
                            'Body' => body,
                            'MediaUrl' => Twilio.serialize_list(media_url) { |e| e },
                        })

                        payload = @version.create('POST', @uri, data: data)
                        MessageInstance.new(
                            @version,
                            payload,
                            account_sid: @solution[:account_sid],
                        )
                    end

                
                    ##
                    # Lists MessageInstance records from the API as a list.
                    # Unlike stream(), this operation is eager and will load `limit` records into
                    # memory before returning.
                    # @param [String] to Read messages sent to only this phone number.
                    # @param [String] from Read messages sent from only this phone number or alphanumeric sender ID.
                    # @param [Time] date_sent The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
                    # @param [Time] date_sent_before The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
                    # @param [Time] date_sent_after The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Array] Array of up to limit results
                    def list(to: :unset, from: :unset, date_sent: :unset, date_sent_before: :unset, date_sent_after: :unset, limit: nil, page_size: nil)
                        self.stream(
                            to: to,
                            from: from,
                            date_sent: date_sent,
                            date_sent_before: date_sent_before,
                            date_sent_after: date_sent_after,
                            limit: limit,
                            page_size: page_size
                        ).entries
                    end

                    ##
                    # Streams Instance records from the API as an Enumerable.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    # @param [String] to Read messages sent to only this phone number.
                    # @param [String] from Read messages sent from only this phone number or alphanumeric sender ID.
                    # @param [Time] date_sent The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
                    # @param [Time] date_sent_before The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
                    # @param [Time] date_sent_after The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Enumerable] Enumerable that will yield up to limit results
                    def stream(to: :unset, from: :unset, date_sent: :unset, date_sent_before: :unset, date_sent_after: :unset, limit: nil, page_size: nil)
                        limits = @version.read_limits(limit, page_size)

                        page = self.page(
                            to: to,
                            from: from,
                            date_sent: date_sent,
                            date_sent_before: date_sent_before,
                            date_sent_after: date_sent_after,
                            page_size: limits[:page_size], )

                        @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
                    end

                    ##
                    # When passed a block, yields MessageInstance records from the API.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    def each
                        limits = @version.read_limits

                        page = self.page(page_size: limits[:page_size], )

                        @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
                    end

                    ##
                    # Retrieve a single page of MessageInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] to Read messages sent to only this phone number.
                    # @param [String] from Read messages sent from only this phone number or alphanumeric sender ID.
                    # @param [Time] date_sent The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
                    # @param [Time] date_sent_before The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
                    # @param [Time] date_sent_after The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
                    # @param [String] page_token PageToken provided by the API
                    # @param [Integer] page_number Page Number, this value is simply for client state
                    # @param [Integer] page_size Number of records to return, defaults to 50
                    # @return [Page] Page of MessageInstance
                    def page(to: :unset, from: :unset, date_sent: :unset, date_sent_before: :unset, date_sent_after: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
                        params = Twilio::Values.of({
                            
                            'To' => to,
                            
                            'From' => from,
                            
                            'DateSent' =>  Twilio.serialize_iso8601_datetime(date_sent),
                            
                            'DateSent<' =>  Twilio.serialize_iso8601_datetime(date_sent_before),
                            
                            'DateSent>' =>  Twilio.serialize_iso8601_datetime(date_sent_after),
                            
                            'PageToken' => page_token,
                            'Page' => page_number,
                            'PageSize' => page_size,
                        })

                        response = @version.page('GET', @uri, params: params)

                        MessagePage.new(@version, response, @solution)
                    end

                    ##
                    # Retrieve a single page of MessageInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] target_url API-generated URL for the requested results page
                    # @return [Page] Page of MessageInstance
                    def get_page(target_url)
                        response = @version.domain.request(
                            'GET',
                            target_url
                        )
                    MessagePage.new(@version, response, @solution)
                    end
                    


                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.Api.V2010.MessageList>'
                    end
                end

                class MessageContext < InstanceContext
                    ##
                    # Initialize the MessageContext
                    # @param [Version] version Version that contains the resource
                    # @param [String] account_sid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
                    # @param [String] sid The Twilio-provided string that uniquely identifies the Message resource to update.
                    # @return [MessageContext] MessageContext
                    def initialize(version, account_sid, sid)
                        super(version)

                        # Path Solution
                        @solution = { account_sid: account_sid, sid: sid,  }
                        @uri = "/Accounts/#{@solution[:account_sid]}/Messages/#{@solution[:sid]}.json"

                        # Dependents
                        @feedback = nil
                        @media = nil
                    end
                    ##
                    # Delete the MessageInstance
                    # @return [Boolean] True if delete succeeds, false otherwise
                    def delete

                        @version.delete('DELETE', @uri)
                    end

                    ##
                    # Fetch the MessageInstance
                    # @return [MessageInstance] Fetched MessageInstance
                    def fetch

                        payload = @version.fetch('GET', @uri)
                        MessageInstance.new(
                            @version,
                            payload,
                            account_sid: @solution[:account_sid],
                            sid: @solution[:sid],
                        )
                    end

                    ##
                    # Update the MessageInstance
                    # @param [String] body The text of the message you want to send. Can be up to 1,600 characters long.
                    # @param [MessageUpdateStatus] status 
                    # @return [MessageInstance] Updated MessageInstance
                    def update(
                        body: :unset, 
                        status: :unset
                    )

                        data = Twilio::Values.of({
                            'Body' => body,
                            'Status' => status,
                        })

                        payload = @version.update('POST', @uri, data: data)
                        MessageInstance.new(
                            @version,
                            payload,
                            account_sid: @solution[:account_sid],
                            sid: @solution[:sid],
                        )
                    end

                    ##
                    # Access the feedback
                    # @return [FeedbackList]
                    # @return [FeedbackContext]
                    def feedback
                      unless @feedback
                        @feedback = FeedbackList.new(
                                @version,
                                account_sid: @solution[:account_sid],
                                message_sid: @solution[:sid]
                                
                                )
                      end

                      @feedback
                    end
                    ##
                    # Access the media
                    # @return [MediaList]
                    # @return [MediaContext] if sid was passed.
                    def media(sid=:unset)

                        raise ArgumentError, 'sid cannot be nil' if sid.nil?

                        if sid != :unset
                            return MediaContext.new(@version, @solution[:account_sid], @solution[:sid],sid )
                        end

                        unless @media
                            @media = MediaList.new(
                                @version,
                                account_sid: @solution[:account_sid],
                                message_sid: @solution[:sid]
                                
                                )
                        end

                     @media
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.Api.V2010.MessageContext #{context}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.Api.V2010.MessageContext #{context}>"
                    end
                end

                class MessagePage < Page
                    ##
                    # Initialize the MessagePage
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [MessagePage] MessagePage
                    def initialize(version, response, solution)
                        super(version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of MessageInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [MessageInstance] MessageInstance
                    def get_instance(payload)
                        MessageInstance.new(@version, payload, account_sid: @solution[:account_sid])
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Twilio.Api.V2010.MessagePage>'
                    end
                end
                class MessageInstance < InstanceResource
                    ##
                    # Initialize the MessageInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Twilio
                    # @param [String] account_sid The SID of the
                    #   {Account}[https://www.twilio.com/docs/iam/api/account] that created this Message
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [MessageInstance] MessageInstance
                    def initialize(version, payload , account_sid: nil, sid: nil)
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'body' => payload['body'],
                            'num_segments' => payload['num_segments'],
                            'direction' => payload['direction'],
                            'from' => payload['from'],
                            'to' => payload['to'],
                            'date_updated' => Twilio.deserialize_rfc2822(payload['date_updated']),
                            'price' => payload['price'],
                            'error_message' => payload['error_message'],
                            'uri' => payload['uri'],
                            'account_sid' => payload['account_sid'],
                            'num_media' => payload['num_media'],
                            'status' => payload['status'],
                            'messaging_service_sid' => payload['messaging_service_sid'],
                            'sid' => payload['sid'],
                            'date_sent' => Twilio.deserialize_rfc2822(payload['date_sent']),
                            'date_created' => Twilio.deserialize_rfc2822(payload['date_created']),
                            'error_code' => payload['error_code'] == nil ? payload['error_code'] : payload['error_code'].to_i,
                            'price_unit' => payload['price_unit'],
                            'api_version' => payload['api_version'],
                            'subresource_uris' => payload['subresource_uris'],
                        }

                        # Context
                        @instance_context = nil
                        @params = { 'account_sid' => account_sid  ,'sid' => sid  || @properties['sid']  , }
                    end

                    ##
                    # Generate an instance context for the instance, the context is capable of
                    # performing various actions.  All instance actions are proxied to the context
                    # @return [MessageContext] CallContext for this CallInstance
                    def context
                        unless @instance_context
                            @instance_context = MessageContext.new(@version , @params['account_sid'], @params['sid'])
                        end
                        @instance_context
                    end
                    
                    ##
                    # @return [String] The message text. Can be up to 1,600 characters long.
                    def body
                        @properties['body']
                    end
                    
                    ##
                    # @return [String] The number of segments that make up the complete message. A message body that is too large to be sent in a single SMS message is segmented and charged as multiple messages. Inbound messages over 160 characters are reassembled when the message is received. Note: When using a Messaging Service to send messages, `num_segments` will always be 0 in Twilio's response to your API request.
                    def num_segments
                        @properties['num_segments']
                    end
                    
                    ##
                    # @return [MessageDirection] 
                    def direction
                        @properties['direction']
                    end
                    
                    ##
                    # @return [String] The phone number (in [E.164](https://en.wikipedia.org/wiki/E.164) format), [alphanumeric sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-id), or [Wireless SIM](https://www.twilio.com/docs/wireless/tutorials/communications-guides/how-to-send-and-receive-text-messages) that initiated the message. For incoming messages, this will be the number of the sending phone. For outgoing messages, this value will be one of your Twilio phone numbers or the alphanumeric sender ID used.
                    def from
                        @properties['from']
                    end
                    
                    ##
                    # @return [String] The phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format that received the message. For incoming messages, this will be one of your Twilio phone numbers. For outgoing messages, this will be the sending phone.
                    def to
                        @properties['to']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
                    def date_updated
                        @properties['date_updated']
                    end
                    
                    ##
                    # @return [String] The amount billed for the message, in the currency specified by `price_unit`.  Note that your account is charged for each segment we send to the handset. Populated after the message has been sent. May not be immediately available.
                    def price
                        @properties['price']
                    end
                    
                    ##
                    # @return [String] The description of the `error_code` if your message `status` is `failed` or `undelivered`. If the message was successful, this value is null.
                    def error_message
                        @properties['error_message']
                    end
                    
                    ##
                    # @return [String] The URI of the resource, relative to `https://api.twilio.com`.
                    def uri
                        @properties['uri']
                    end
                    
                    ##
                    # @return [String] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that sent the message that created the resource.
                    def account_sid
                        @properties['account_sid']
                    end
                    
                    ##
                    # @return [String] The number of media files associated with the message. A message can send up to 10 media files.
                    def num_media
                        @properties['num_media']
                    end
                    
                    ##
                    # @return [MessageStatus] 
                    def status
                        @properties['status']
                    end
                    
                    ##
                    # @return [String] The SID of the [Messaging Service](https://www.twilio.com/docs/sms/services/api) used with the message. The value is null if a Messaging Service was not used.
                    def messaging_service_sid
                        @properties['messaging_service_sid']
                    end
                    
                    ##
                    # @return [String] The unique string that that we created to identify the Message resource.
                    def sid
                        @properties['sid']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT that the resource was sent specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format. For outgoing messages, this is when we sent the message. For incoming messages, this is when we made the HTTP request to your application. 
                    def date_sent
                        @properties['date_sent']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
                    def date_created
                        @properties['date_created']
                    end
                    
                    ##
                    # @return [String] The error code returned if your message `status` is `failed` or `undelivered`. The error_code provides more information about the failure. If the message was successful, this value is null.
                    def error_code
                        @properties['error_code']
                    end
                    
                    ##
                    # @return [String] The currency in which `price` is measured, in [ISO 4127](https://www.iso.org/iso/home/standards/currency_codes.htm) format (e.g. `usd`, `eur`, `jpy`).
                    def price_unit
                        @properties['price_unit']
                    end
                    
                    ##
                    # @return [String] The API version used to process the message.
                    def api_version
                        @properties['api_version']
                    end
                    
                    ##
                    # @return [Hash] A list of related resources identified by their URIs relative to `https://api.twilio.com`
                    def subresource_uris
                        @properties['subresource_uris']
                    end
                    
                    ##
                    # Delete the MessageInstance
                    # @return [Boolean] True if delete succeeds, false otherwise
                    def delete

                        context.delete
                    end

                    ##
                    # Fetch the MessageInstance
                    # @return [MessageInstance] Fetched MessageInstance
                    def fetch

                        context.fetch
                    end

                    ##
                    # Update the MessageInstance
                    # @param [String] body The text of the message you want to send. Can be up to 1,600 characters long.
                    # @param [MessageUpdateStatus] status 
                    # @return [MessageInstance] Updated MessageInstance
                    def update(
                        body: :unset, 
                        status: :unset
                    )

                        context.update(
                            body: body, 
                            status: status, 
                        )
                    end

                    ##
                    # Access the feedback
                    # @return [feedback] feedback
                    def feedback
                        context.feedback
                    end

                    ##
                    # Access the media
                    # @return [media] media
                    def media
                        context.media
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Twilio.Api.V2010.MessageInstance #{values}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Twilio.Api.V2010.MessageInstance #{values}>"
                    end
                end
             end
            end
        end
    end
end


