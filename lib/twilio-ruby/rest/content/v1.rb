##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Content
      class V1 < Version
        ##
        # Initialize the V1 version of Content
        def initialize(domain)
          super
          @version = 'v1'
          @contents = nil
          @content_and_approvals = nil
          @legacy_contents = nil
        end

        ##
        # @param [String] sid The Twilio-provided string that uniquely identifies the
        #   Content resource to fetch.
        # @return [Twilio::REST::Content::V1::ContentContext] if sid was passed.
        # @return [Twilio::REST::Content::V1::ContentList]
        def contents(sid=:unset)
          if sid.nil?
              raise ArgumentError, 'sid cannot be nil'
          end
          if sid == :unset
              @contents ||= ContentList.new self
          else
              ContentContext.new(self, sid)
          end
        end

        ##
        # @return [Twilio::REST::Content::V1::ContentAndApprovalsContext]
        def content_and_approvals
          @content_and_approvals ||= ContentAndApprovalsList.new self
        end

        ##
        # @return [Twilio::REST::Content::V1::LegacyContentContext]
        def legacy_contents
          @legacy_contents ||= LegacyContentList.new self
        end

        ##
        # Provide a user friendly representation
        def to_s
          '<Twilio::REST::Content::V1>'
        end
      end
    end
  end
end