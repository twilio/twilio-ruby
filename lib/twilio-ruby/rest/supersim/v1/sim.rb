##
#    This code was generated by
#    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
#     |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
#     |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
#
#    Twilio - Supersim
#    This is the public Twilio REST API.
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Twilio
    module REST
        class Supersim < SupersimBase
            class V1 < Version
                class SimList < ListResource
                
                    ##
                    # Initialize the SimList
                    # @param [Version] version Version that contains the resource
                    # @return [SimList] SimList
                    def initialize(version)
                        super(version)
                        # Path Solution
                        @solution = {  }
                        @uri = "/Sims"
                        
                    end
                    ##
                    # Create the SimInstance
                    # @param [String] iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) of the Super SIM to be added to your Account.
                    # @param [String] registration_code The 10-digit code required to claim the Super SIM for your Account.
                    # @return [SimInstance] Created SimInstance
                    def create(
                        iccid: nil, 
                        registration_code: nil
                    )

                        data = Twilio::Values.of({
                            'Iccid' => iccid,
                            'RegistrationCode' => registration_code,
                        })

                        
                        payload = @version.create('POST', @uri, data: data)
                        SimInstance.new(
                            @version,
                            payload,
                        )
                    end

                
                    ##
                    # Lists SimInstance records from the API as a list.
                    # Unlike stream(), this operation is eager and will load `limit` records into
                    # memory before returning.
                    # @param [Status] status The status of the Sim resources to read. Can be `new`, `ready`, `active`, `inactive`, or `scheduled`.
                    # @param [String] fleet The SID or unique name of the Fleet to which a list of Sims are assigned.
                    # @param [String] iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with a Super SIM to filter the list by. Passing this parameter will always return a list containing zero or one SIMs.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Array] Array of up to limit results
                    def list(status: :unset, fleet: :unset, iccid: :unset, limit: nil, page_size: nil)
                        self.stream(
                            status: status,
                            fleet: fleet,
                            iccid: iccid,
                            limit: limit,
                            page_size: page_size
                        ).entries
                    end

                    ##
                    # Streams Instance records from the API as an Enumerable.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    # @param [Status] status The status of the Sim resources to read. Can be `new`, `ready`, `active`, `inactive`, or `scheduled`.
                    # @param [String] fleet The SID or unique name of the Fleet to which a list of Sims are assigned.
                    # @param [String] iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with a Super SIM to filter the list by. Passing this parameter will always return a list containing zero or one SIMs.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Enumerable] Enumerable that will yield up to limit results
                    def stream(status: :unset, fleet: :unset, iccid: :unset, limit: nil, page_size: nil)
                        limits = @version.read_limits(limit, page_size)

                        page = self.page(
                            status: status,
                            fleet: fleet,
                            iccid: iccid,
                            page_size: limits[:page_size], )

                        @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
                    end

                    ##
                    # When passed a block, yields SimInstance records from the API.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    def each
                        limits = @version.read_limits

                        page = self.page(page_size: limits[:page_size], )

                        @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
                    end

                    ##
                    # Retrieve a single page of SimInstance records from the API.
                    # Request is executed immediately.
                    # @param [Status] status The status of the Sim resources to read. Can be `new`, `ready`, `active`, `inactive`, or `scheduled`.
                    # @param [String] fleet The SID or unique name of the Fleet to which a list of Sims are assigned.
                    # @param [String] iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with a Super SIM to filter the list by. Passing this parameter will always return a list containing zero or one SIMs.
                    # @param [String] page_token PageToken provided by the API
                    # @param [Integer] page_number Page Number, this value is simply for client state
                    # @param [Integer] page_size Number of records to return, defaults to 50
                    # @return [Page] Page of SimInstance
                    def page(status: :unset, fleet: :unset, iccid: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
                        params = Twilio::Values.of({
                            'Status' => status,
                            'Fleet' => fleet,
                            'Iccid' => iccid,
                            'PageToken' => page_token,
                            'Page' => page_number,
                            'PageSize' => page_size,
                        })

                        response = @version.page('GET', @uri, params: params)

                        SimPage.new(@version, response, @solution)
                    end

                    ##
                    # Retrieve a single page of SimInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] target_url API-generated URL for the requested results page
                    # @return [Page] Page of SimInstance
                    def get_page(target_url)
                        response = @version.domain.request(
                            'GET',
                            target_url
                        )
                    SimPage.new(@version, response, @solution)
                    end
                    


                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.Supersim.V1.SimList>'
                    end
                end


                class SimContext < InstanceContext
                    ##
                    # Initialize the SimContext
                    # @param [Version] version Version that contains the resource
                    # @param [String] sid The SID of the Sim resource to update.
                    # @return [SimContext] SimContext
                    def initialize(version, sid)
                        super(version)

                        # Path Solution
                        @solution = { sid: sid,  }
                        @uri = "/Sims/#{@solution[:sid]}"

                        # Dependents
                        @billing_periods = nil
                        @sim_ip_addresses = nil
                    end
                    ##
                    # Fetch the SimInstance
                    # @return [SimInstance] Fetched SimInstance
                    def fetch

                        
                        payload = @version.fetch('GET', @uri)
                        SimInstance.new(
                            @version,
                            payload,
                            sid: @solution[:sid],
                        )
                    end

                    ##
                    # Update the SimInstance
                    # @param [String] unique_name An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.
                    # @param [StatusUpdate] status 
                    # @param [String] fleet The SID or unique name of the Fleet to which the SIM resource should be assigned.
                    # @param [String] callback_url The URL we should call using the `callback_method` after an asynchronous update has finished.
                    # @param [String] callback_method The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is POST.
                    # @param [String] account_sid The SID of the Account to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a Subaccount of the requesting Account. Only valid when the Sim resource's status is new.
                    # @return [SimInstance] Updated SimInstance
                    def update(
                        unique_name: :unset, 
                        status: :unset, 
                        fleet: :unset, 
                        callback_url: :unset, 
                        callback_method: :unset, 
                        account_sid: :unset
                    )

                        data = Twilio::Values.of({
                            'UniqueName' => unique_name,
                            'Status' => status,
                            'Fleet' => fleet,
                            'CallbackUrl' => callback_url,
                            'CallbackMethod' => callback_method,
                            'AccountSid' => account_sid,
                        })

                        
                        payload = @version.update('POST', @uri, data: data)
                        SimInstance.new(
                            @version,
                            payload,
                            sid: @solution[:sid],
                        )
                    end

                    ##
                    # Access the billing_periods
                    # @return [BillingPeriodList]
                    # @return [BillingPeriodContext]
                    def billing_periods
                      unless @billing_periods
                        @billing_periods = BillingPeriodList.new(
                                @version, sim_sid: @solution[:sid], )
                      end
                      @billing_periods
                    end
                    ##
                    # Access the sim_ip_addresses
                    # @return [SimIpAddressList]
                    # @return [SimIpAddressContext]
                    def sim_ip_addresses
                      unless @sim_ip_addresses
                        @sim_ip_addresses = SimIpAddressList.new(
                                @version, sim_sid: @solution[:sid], )
                      end
                      @sim_ip_addresses
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.Supersim.V1.SimContext #{context}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.Supersim.V1.SimContext #{context}>"
                    end
                end

                class SimPage < Page
                    ##
                    # Initialize the SimPage
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [SimPage] SimPage
                    def initialize(version, response, solution)
                        super(version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of SimInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [SimInstance] SimInstance
                    def get_instance(payload)
                        SimInstance.new(@version, payload)
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Twilio.Supersim.V1.SimPage>'
                    end
                end
                class SimInstance < InstanceResource
                    ##
                    # Initialize the SimInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Twilio
                    # @param [String] account_sid The SID of the
                    #   {Account}[https://www.twilio.com/docs/iam/api/account] that created this Sim
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [SimInstance] SimInstance
                    def initialize(version, payload , sid: nil)
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'sid' => payload['sid'],
                            'unique_name' => payload['unique_name'],
                            'account_sid' => payload['account_sid'],
                            'iccid' => payload['iccid'],
                            'status' => payload['status'],
                            'fleet_sid' => payload['fleet_sid'],
                            'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                            'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                            'url' => payload['url'],
                            'links' => payload['links'],
                        }

                        # Context
                        @instance_context = nil
                        @params = { 'sid' => sid  || @properties['sid']  , }
                    end

                    ##
                    # Generate an instance context for the instance, the context is capable of
                    # performing various actions.  All instance actions are proxied to the context
                    # @return [SimContext] CallContext for this CallInstance
                    def context
                        unless @instance_context
                            @instance_context = SimContext.new(@version , @params['sid'])
                        end
                        @instance_context
                    end
                    
                    ##
                    # @return [String] The unique string that identifies the Sim resource.
                    def sid
                        @properties['sid']
                    end
                    
                    ##
                    # @return [String] An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.
                    def unique_name
                        @properties['unique_name']
                    end
                    
                    ##
                    # @return [String] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that the Super SIM belongs to.
                    def account_sid
                        @properties['account_sid']
                    end
                    
                    ##
                    # @return [String] The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with the SIM.
                    def iccid
                        @properties['iccid']
                    end
                    
                    ##
                    # @return [Status] 
                    def status
                        @properties['status']
                    end
                    
                    ##
                    # @return [String] The unique ID of the Fleet configured for this SIM.
                    def fleet_sid
                        @properties['fleet_sid']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
                    def date_created
                        @properties['date_created']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
                    def date_updated
                        @properties['date_updated']
                    end
                    
                    ##
                    # @return [String] The absolute URL of the Sim Resource.
                    def url
                        @properties['url']
                    end
                    
                    ##
                    # @return [Hash] 
                    def links
                        @properties['links']
                    end
                    
                    ##
                    # Fetch the SimInstance
                    # @return [SimInstance] Fetched SimInstance
                    def fetch

                        context.fetch
                    end

                    ##
                    # Update the SimInstance
                    # @param [String] unique_name An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.
                    # @param [StatusUpdate] status 
                    # @param [String] fleet The SID or unique name of the Fleet to which the SIM resource should be assigned.
                    # @param [String] callback_url The URL we should call using the `callback_method` after an asynchronous update has finished.
                    # @param [String] callback_method The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is POST.
                    # @param [String] account_sid The SID of the Account to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a Subaccount of the requesting Account. Only valid when the Sim resource's status is new.
                    # @return [SimInstance] Updated SimInstance
                    def update(
                        unique_name: :unset, 
                        status: :unset, 
                        fleet: :unset, 
                        callback_url: :unset, 
                        callback_method: :unset, 
                        account_sid: :unset
                    )

                        context.update(
                            unique_name: unique_name, 
                            status: status, 
                            fleet: fleet, 
                            callback_url: callback_url, 
                            callback_method: callback_method, 
                            account_sid: account_sid, 
                        )
                    end

                    ##
                    # Access the billing_periods
                    # @return [billing_periods] billing_periods
                    def billing_periods
                        context.billing_periods
                    end

                    ##
                    # Access the sim_ip_addresses
                    # @return [sim_ip_addresses] sim_ip_addresses
                    def sim_ip_addresses
                        context.sim_ip_addresses
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Twilio.Supersim.V1.SimInstance #{values}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Twilio.Supersim.V1.SimInstance #{values}>"
                    end
                end

            end
        end
    end
end
