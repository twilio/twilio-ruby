##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Supersim < Domain
      class V1 < Version
        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class NetworkList < ListResource
          ##
          # Initialize the NetworkList
          # @param [Version] version Version that contains the resource
          # @return [NetworkList] NetworkList
          def initialize(version)
            super(version)

            # Path Solution
            @solution = {}
            @uri = "/Networks"
          end

          ##
          # Lists NetworkInstance records from the API as a list.
          # Unlike stream(), this operation is eager and will load `limit` records into
          # memory before returning.
          # @param [String] iso_country The {ISO country
          #   code}[https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2] of the Network resources
          #   to read.
          # @param [String] mcc The 'mobile country code' of a country. Network resources
          #   with this `mcc` in their `identifiers` will be read.
          # @param [String] mnc The 'mobile network code' of a mobile operator network.
          #   Network resources with this `mnc` in their `identifiers` will be read.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit.  Default is no limit
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records.  If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Array] Array of up to limit results
          def list(iso_country: :unset, mcc: :unset, mnc: :unset, limit: nil, page_size: nil)
            self.stream(
                iso_country: iso_country,
                mcc: mcc,
                mnc: mnc,
                limit: limit,
                page_size: page_size
            ).entries
          end

          ##
          # Streams NetworkInstance records from the API as an Enumerable.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          # @param [String] iso_country The {ISO country
          #   code}[https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2] of the Network resources
          #   to read.
          # @param [String] mcc The 'mobile country code' of a country. Network resources
          #   with this `mcc` in their `identifiers` will be read.
          # @param [String] mnc The 'mobile network code' of a mobile operator network.
          #   Network resources with this `mnc` in their `identifiers` will be read.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit. Default is no limit.
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records. If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Enumerable] Enumerable that will yield up to limit results
          def stream(iso_country: :unset, mcc: :unset, mnc: :unset, limit: nil, page_size: nil)
            limits = @version.read_limits(limit, page_size)

            page = self.page(iso_country: iso_country, mcc: mcc, mnc: mnc, page_size: limits[:page_size], )

            @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
          end

          ##
          # When passed a block, yields NetworkInstance records from the API.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          def each
            limits = @version.read_limits

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
          end

          ##
          # Retrieve a single page of NetworkInstance records from the API.
          # Request is executed immediately.
          # @param [String] iso_country The {ISO country
          #   code}[https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2] of the Network resources
          #   to read.
          # @param [String] mcc The 'mobile country code' of a country. Network resources
          #   with this `mcc` in their `identifiers` will be read.
          # @param [String] mnc The 'mobile network code' of a mobile operator network.
          #   Network resources with this `mnc` in their `identifiers` will be read.
          # @param [String] page_token PageToken provided by the API
          # @param [Integer] page_number Page Number, this value is simply for client state
          # @param [Integer] page_size Number of records to return, defaults to 50
          # @return [Page] Page of NetworkInstance
          def page(iso_country: :unset, mcc: :unset, mnc: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
            params = Twilio::Values.of({
                'IsoCountry' => iso_country,
                'Mcc' => mcc,
                'Mnc' => mnc,
                'PageToken' => page_token,
                'Page' => page_number,
                'PageSize' => page_size,
            })

            response = @version.page('GET', @uri, params: params)

            NetworkPage.new(@version, response, @solution)
          end

          ##
          # Retrieve a single page of NetworkInstance records from the API.
          # Request is executed immediately.
          # @param [String] target_url API-generated URL for the requested results page
          # @return [Page] Page of NetworkInstance
          def get_page(target_url)
            response = @version.domain.request(
                'GET',
                target_url
            )
            NetworkPage.new(@version, response, @solution)
          end

          ##
          # Provide a user friendly representation
          def to_s
            '#<Twilio.Supersim.V1.NetworkList>'
          end
        end

        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class NetworkPage < Page
          ##
          # Initialize the NetworkPage
          # @param [Version] version Version that contains the resource
          # @param [Response] response Response from the API
          # @param [Hash] solution Path solution for the resource
          # @return [NetworkPage] NetworkPage
          def initialize(version, response, solution)
            super(version, response)

            # Path Solution
            @solution = solution
          end

          ##
          # Build an instance of NetworkInstance
          # @param [Hash] payload Payload response from the API
          # @return [NetworkInstance] NetworkInstance
          def get_instance(payload)
            NetworkInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            '<Twilio.Supersim.V1.NetworkPage>'
          end
        end

        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class NetworkContext < InstanceContext
          ##
          # Initialize the NetworkContext
          # @param [Version] version Version that contains the resource
          # @param [String] sid The SID of the Network resource to fetch.
          # @return [NetworkContext] NetworkContext
          def initialize(version, sid)
            super(version)

            # Path Solution
            @solution = {sid: sid, }
            @uri = "/Networks/#{@solution[:sid]}"
          end

          ##
          # Fetch the NetworkInstance
          # @return [NetworkInstance] Fetched NetworkInstance
          def fetch
            payload = @version.fetch('GET', @uri)

            NetworkInstance.new(@version, payload, sid: @solution[:sid], )
          end

          ##
          # Provide a user friendly representation
          def to_s
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Supersim.V1.NetworkContext #{context}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Supersim.V1.NetworkContext #{context}>"
          end
        end

        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class NetworkInstance < InstanceResource
          ##
          # Initialize the NetworkInstance
          # @param [Version] version Version that contains the resource
          # @param [Hash] payload payload that contains response from Twilio
          # @param [String] sid The SID of the Network resource to fetch.
          # @return [NetworkInstance] NetworkInstance
          def initialize(version, payload, sid: nil)
            super(version)

            # Marshaled Properties
            @properties = {
                'sid' => payload['sid'],
                'friendly_name' => payload['friendly_name'],
                'url' => payload['url'],
                'iso_country' => payload['iso_country'],
                'identifiers' => payload['identifiers'],
            }

            # Context
            @instance_context = nil
            @params = {'sid' => sid || @properties['sid'], }
          end

          ##
          # Generate an instance context for the instance, the context is capable of
          # performing various actions.  All instance actions are proxied to the context
          # @return [NetworkContext] NetworkContext for this NetworkInstance
          def context
            unless @instance_context
              @instance_context = NetworkContext.new(@version, @params['sid'], )
            end
            @instance_context
          end

          ##
          # @return [String] The unique string that identifies the resource
          def sid
            @properties['sid']
          end

          ##
          # @return [String] A human readable identifier of this resource
          def friendly_name
            @properties['friendly_name']
          end

          ##
          # @return [String] The absolute URL of the Network resource
          def url
            @properties['url']
          end

          ##
          # @return [String] The ISO country code of the Network resource
          def iso_country
            @properties['iso_country']
          end

          ##
          # @return [Array[Hash]] The MCC/MNCs included in the Network resource
          def identifiers
            @properties['identifiers']
          end

          ##
          # Fetch the NetworkInstance
          # @return [NetworkInstance] Fetched NetworkInstance
          def fetch
            context.fetch
          end

          ##
          # Provide a user friendly representation
          def to_s
            values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Supersim.V1.NetworkInstance #{values}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Supersim.V1.NetworkInstance #{values}>"
          end
        end
      end
    end
  end
end