##
#    This code was generated by
#    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
#     |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
#     |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
#
#    Twilio - Bulkexports
#    This is the public Twilio REST API.
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#

module Twilio
    module REST
        class Bulkexports
            class V1 < Version
                ##
                # Initialize the V1 version of Bulkexports
                def initialize(domain)
                    super
                    @version = 'v1'
                    @exports = nil
                    @export_configuration = nil
                end

                ##
                # @param [String] resource_type The type of communication – Messages, Calls, Conferences, and Participants
                # @return [Twilio::REST::Bulkexports::V1::ExportContext] if resourceType was passed.
                # @return [Twilio::REST::Bulkexports::V1::ExportList]
                def exports(resource_type=:unset)
                    if resource_type.nil?
                        raise ArgumentError, 'resource_type cannot be nil'
                    end
                    if resource_type == :unset
                        @exports ||= ExportList.new self
                    else
                        ExportContext.new(self, resource_type)
                    end
                end
                ##
                # @param [String] resource_type The type of communication – Messages, Calls, Conferences, and Participants
                # @return [Twilio::REST::Bulkexports::V1::ExportConfigurationContext] if resourceType was passed.
                # @return [Twilio::REST::Bulkexports::V1::ExportConfigurationList]
                def export_configuration(resource_type=:unset)
                    if resource_type.nil?
                        raise ArgumentError, 'resource_type cannot be nil'
                    end
                    if resource_type == :unset
                        @export_configuration ||= ExportConfigurationList.new self
                    else
                        ExportConfigurationContext.new(self, resource_type)
                    end
                end
                ##
                # Provide a user friendly representation
                def to_s
                    '<Twilio::REST::Bulkexports::V1>';
                end
            end
        end
    end
end
