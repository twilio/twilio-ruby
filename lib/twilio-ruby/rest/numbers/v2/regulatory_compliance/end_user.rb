##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Numbers < Domain
      class V2 < Version
        class RegulatoryComplianceList < ListResource
          class EndUserList < ListResource
            ##
            # Initialize the EndUserList
            # @param [Version] version Version that contains the resource
            # @return [EndUserList] EndUserList
            def initialize(version)
              super(version)

              # Path Solution
              @solution = {}
              @uri = "/RegulatoryCompliance/EndUsers"
            end

            ##
            # Create the EndUserInstance
            # @param [String] friendly_name The string that you assigned to describe the
            #   resource.
            # @param [end_user.Type] type The type of end user of the Bundle resource - can be
            #   `individual` or `business`.
            # @param [Hash] attributes The set of parameters that are the attributes of the
            #   End User resource which are derived End User Types.
            # @return [EndUserInstance] Created EndUserInstance
            def create(friendly_name: nil, type: nil, attributes: :unset)
              data = Twilio::Values.of({
                  'FriendlyName' => friendly_name,
                  'Type' => type,
                  'Attributes' => Twilio.serialize_object(attributes),
              })

              payload = @version.create('POST', @uri, data: data)

              EndUserInstance.new(@version, payload, )
            end

            ##
            # Lists EndUserInstance records from the API as a list.
            # Unlike stream(), this operation is eager and will load `limit` records into
            # memory before returning.
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #    guarantees to never return more than limit.  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when
            #    not set will use the default value of 50 records.  If no page_size is defined
            #    but a limit is defined, stream() will attempt to read the limit with the most
            #    efficient page size, i.e. min(limit, 1000)
            # @return [Array] Array of up to limit results
            def list(limit: nil, page_size: nil)
              self.stream(limit: limit, page_size: page_size).entries
            end

            ##
            # Streams EndUserInstance records from the API as an Enumerable.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #    guarantees to never return more than limit. Default is no limit.
            # @param [Integer] page_size Number of records to fetch per request, when
            #    not set will use the default value of 50 records. If no page_size is defined
            #    but a limit is defined, stream() will attempt to read the limit with the most
            #    efficient page size, i.e. min(limit, 1000)
            # @return [Enumerable] Enumerable that will yield up to limit results
            def stream(limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)

              page = self.page(page_size: limits[:page_size], )

              @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
            end

            ##
            # When passed a block, yields EndUserInstance records from the API.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            def each
              limits = @version.read_limits

              page = self.page(page_size: limits[:page_size], )

              @version.stream(page,
                              limit: limits[:limit],
                              page_limit: limits[:page_limit]).each {|x| yield x}
            end

            ##
            # Retrieve a single page of EndUserInstance records from the API.
            # Request is executed immediately.
            # @param [String] page_token PageToken provided by the API
            # @param [Integer] page_number Page Number, this value is simply for client state
            # @param [Integer] page_size Number of records to return, defaults to 50
            # @return [Page] Page of EndUserInstance
            def page(page_token: :unset, page_number: :unset, page_size: :unset)
              params = Twilio::Values.of({
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              })

              response = @version.page('GET', @uri, params: params)

              EndUserPage.new(@version, response, @solution)
            end

            ##
            # Retrieve a single page of EndUserInstance records from the API.
            # Request is executed immediately.
            # @param [String] target_url API-generated URL for the requested results page
            # @return [Page] Page of EndUserInstance
            def get_page(target_url)
              response = @version.domain.request(
                  'GET',
                  target_url
              )
              EndUserPage.new(@version, response, @solution)
            end

            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Numbers.V2.EndUserList>'
            end
          end

          class EndUserPage < Page
            ##
            # Initialize the EndUserPage
            # @param [Version] version Version that contains the resource
            # @param [Response] response Response from the API
            # @param [Hash] solution Path solution for the resource
            # @return [EndUserPage] EndUserPage
            def initialize(version, response, solution)
              super(version, response)

              # Path Solution
              @solution = solution
            end

            ##
            # Build an instance of EndUserInstance
            # @param [Hash] payload Payload response from the API
            # @return [EndUserInstance] EndUserInstance
            def get_instance(payload)
              EndUserInstance.new(@version, payload, )
            end

            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Numbers.V2.EndUserPage>'
            end
          end

          class EndUserContext < InstanceContext
            ##
            # Initialize the EndUserContext
            # @param [Version] version Version that contains the resource
            # @param [String] sid The unique string that we created to identify the End User
            #   resource.
            # @return [EndUserContext] EndUserContext
            def initialize(version, sid)
              super(version)

              # Path Solution
              @solution = {sid: sid, }
              @uri = "/RegulatoryCompliance/EndUsers/#{@solution[:sid]}"
            end

            ##
            # Fetch the EndUserInstance
            # @return [EndUserInstance] Fetched EndUserInstance
            def fetch
              payload = @version.fetch('GET', @uri)

              EndUserInstance.new(@version, payload, sid: @solution[:sid], )
            end

            ##
            # Update the EndUserInstance
            # @param [String] friendly_name The string that you assigned to describe the
            #   resource.
            # @param [Hash] attributes The set of parameters that are the attributes of the
            #   End User resource which are derived End User Types.
            # @return [EndUserInstance] Updated EndUserInstance
            def update(friendly_name: :unset, attributes: :unset)
              data = Twilio::Values.of({
                  'FriendlyName' => friendly_name,
                  'Attributes' => Twilio.serialize_object(attributes),
              })

              payload = @version.update('POST', @uri, data: data)

              EndUserInstance.new(@version, payload, sid: @solution[:sid], )
            end

            ##
            # Provide a user friendly representation
            def to_s
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Numbers.V2.EndUserContext #{context}>"
            end

            ##
            # Provide a detailed, user friendly representation
            def inspect
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Numbers.V2.EndUserContext #{context}>"
            end
          end

          class EndUserInstance < InstanceResource
            ##
            # Initialize the EndUserInstance
            # @param [Version] version Version that contains the resource
            # @param [Hash] payload payload that contains response from Twilio
            # @param [String] sid The unique string that we created to identify the End User
            #   resource.
            # @return [EndUserInstance] EndUserInstance
            def initialize(version, payload, sid: nil)
              super(version)

              # Marshaled Properties
              @properties = {
                  'sid' => payload['sid'],
                  'account_sid' => payload['account_sid'],
                  'friendly_name' => payload['friendly_name'],
                  'type' => payload['type'],
                  'attributes' => payload['attributes'],
                  'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                  'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                  'url' => payload['url'],
              }

              # Context
              @instance_context = nil
              @params = {'sid' => sid || @properties['sid'], }
            end

            ##
            # Generate an instance context for the instance, the context is capable of
            # performing various actions.  All instance actions are proxied to the context
            # @return [EndUserContext] EndUserContext for this EndUserInstance
            def context
              unless @instance_context
                @instance_context = EndUserContext.new(@version, @params['sid'], )
              end
              @instance_context
            end

            ##
            # @return [String] The unique string that identifies the resource
            def sid
              @properties['sid']
            end

            ##
            # @return [String] The SID of the Account that created the resource
            def account_sid
              @properties['account_sid']
            end

            ##
            # @return [String] The string that you assigned to describe the resource
            def friendly_name
              @properties['friendly_name']
            end

            ##
            # @return [end_user.Type] The type of end user of the Bundle resource
            def type
              @properties['type']
            end

            ##
            # @return [Hash] The set of parameters that compose the End Users resource
            def attributes
              @properties['attributes']
            end

            ##
            # @return [Time] The ISO 8601 date and time in GMT when the resource was created
            def date_created
              @properties['date_created']
            end

            ##
            # @return [Time] The ISO 8601 date and time in GMT when the resource was last updated
            def date_updated
              @properties['date_updated']
            end

            ##
            # @return [String] The absolute URL of the End User resource
            def url
              @properties['url']
            end

            ##
            # Fetch the EndUserInstance
            # @return [EndUserInstance] Fetched EndUserInstance
            def fetch
              context.fetch
            end

            ##
            # Update the EndUserInstance
            # @param [String] friendly_name The string that you assigned to describe the
            #   resource.
            # @param [Hash] attributes The set of parameters that are the attributes of the
            #   End User resource which are derived End User Types.
            # @return [EndUserInstance] Updated EndUserInstance
            def update(friendly_name: :unset, attributes: :unset)
              context.update(friendly_name: friendly_name, attributes: attributes, )
            end

            ##
            # Provide a user friendly representation
            def to_s
              values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Numbers.V2.EndUserInstance #{values}>"
            end

            ##
            # Provide a detailed, user friendly representation
            def inspect
              values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Numbers.V2.EndUserInstance #{values}>"
            end
          end
        end
      end
    end
  end
end