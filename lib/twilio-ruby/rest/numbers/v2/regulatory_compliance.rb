##
#    This code was generated by
#    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
#     |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
#     |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
#
#    Twilio - Numbers
#    This is the public Twilio REST API.
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Twilio
    module REST
        class Numbers < NumbersBase
            class V2 < Version
                class RegulatoryComplianceList < ListResource
                    ##
                    # Initialize the RegulatoryComplianceList
                    # @param [Version] version Version that contains the resource
                    # @return [RegulatoryComplianceList] RegulatoryComplianceList
                    def initialize(version)
                        super(version)
                        # Path Solution
                        @solution = {  }
                        @uri = "/RegulatoryCompliance"
                        # Components
                        @end_users = nil
                        @bundles = nil
                        @supporting_document_types = nil
                        @regulations = nil
                        @end_user_types = nil
                        @supporting_documents = nil
                    end
                

                ##
                # Access the end_users
                # @return [EndUserList]
                # @return [EndUserContext] if sid was passed.
                def end_users(sid=:unset)
                    raise ArgumentError, 'sid cannot be nil' if sid.nil?

                    if sid != :unset
                        return EndUserContext.new(@version,sid )
                    end

                    @end_users ||= EndUserList.new(@version )
                end
                ##
                # Access the bundles
                # @return [BundleList]
                # @return [BundleContext] if sid was passed.
                def bundles(sid=:unset)
                    raise ArgumentError, 'sid cannot be nil' if sid.nil?

                    if sid != :unset
                        return BundleContext.new(@version,sid )
                    end

                    @bundles ||= BundleList.new(@version )
                end
                ##
                # Access the supporting_document_types
                # @return [SupportingDocumentTypeList]
                # @return [SupportingDocumentTypeContext] if sid was passed.
                def supporting_document_types(sid=:unset)
                    raise ArgumentError, 'sid cannot be nil' if sid.nil?

                    if sid != :unset
                        return SupportingDocumentTypeContext.new(@version,sid )
                    end

                    @supporting_document_types ||= SupportingDocumentTypeList.new(@version )
                end
                ##
                # Access the regulations
                # @return [RegulationList]
                # @return [RegulationContext] if sid was passed.
                def regulations(sid=:unset)
                    raise ArgumentError, 'sid cannot be nil' if sid.nil?

                    if sid != :unset
                        return RegulationContext.new(@version,sid )
                    end

                    @regulations ||= RegulationList.new(@version )
                end
                ##
                # Access the end_user_types
                # @return [EndUserTypeList]
                # @return [EndUserTypeContext] if sid was passed.
                def end_user_types(sid=:unset)
                    raise ArgumentError, 'sid cannot be nil' if sid.nil?

                    if sid != :unset
                        return EndUserTypeContext.new(@version,sid )
                    end

                    @end_user_types ||= EndUserTypeList.new(@version )
                end
                ##
                # Access the supporting_documents
                # @return [SupportingDocumentList]
                # @return [SupportingDocumentContext] if sid was passed.
                def supporting_documents(sid=:unset)
                    raise ArgumentError, 'sid cannot be nil' if sid.nil?

                    if sid != :unset
                        return SupportingDocumentContext.new(@version,sid )
                    end

                    @supporting_documents ||= SupportingDocumentList.new(@version )
                end

                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.Numbers.V2.RegulatoryComplianceList>'
                    end
                end
                class RegulatoryCompliancePage < Page
                    ##
                    # Initialize the RegulatoryCompliancePage
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [RegulatoryCompliancePage] RegulatoryCompliancePage
                    def initialize(version, response, solution)
                        super(version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of RegulatoryComplianceInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [RegulatoryComplianceInstance] RegulatoryComplianceInstance
                    def get_instance(payload)
                        RegulatoryComplianceInstance.new(@version, payload)
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Twilio.Numbers.V2.RegulatoryCompliancePage>'
                    end
                end
                class RegulatoryComplianceInstance < InstanceResource
                    ##
                    # Initialize the RegulatoryComplianceInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Twilio
                    # @param [String] account_sid The SID of the
                    #   {Account}[https://www.twilio.com/docs/iam/api/account] that created this RegulatoryCompliance
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [RegulatoryComplianceInstance] RegulatoryComplianceInstance
                    def initialize(version )
                        super(version)
                        
                    end

                    
                    ##
                    # Provide a user friendly representation
                    def to_s
                        "<Twilio.Numbers.V2.RegulatoryComplianceInstance>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        "<Twilio.Numbers.V2.RegulatoryComplianceInstance>"
                    end
                end
            end
        end
    end
end
