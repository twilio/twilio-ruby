##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Microvisor < Domain
      class V1 < Version
        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class DeviceList < ListResource
          ##
          # Initialize the DeviceList
          # @param [Version] version Version that contains the resource
          # @return [DeviceList] DeviceList
          def initialize(version)
            super(version)

            # Path Solution
            @solution = {}
            @uri = "/Devices"
          end

          ##
          # Lists DeviceInstance records from the API as a list.
          # Unlike stream(), this operation is eager and will load `limit` records into
          # memory before returning.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit.  Default is no limit
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records.  If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Array] Array of up to limit results
          def list(limit: nil, page_size: nil)
            self.stream(limit: limit, page_size: page_size).entries
          end

          ##
          # Streams DeviceInstance records from the API as an Enumerable.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit. Default is no limit.
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records. If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Enumerable] Enumerable that will yield up to limit results
          def stream(limit: nil, page_size: nil)
            limits = @version.read_limits(limit, page_size)

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
          end

          ##
          # When passed a block, yields DeviceInstance records from the API.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          def each
            limits = @version.read_limits

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
          end

          ##
          # Retrieve a single page of DeviceInstance records from the API.
          # Request is executed immediately.
          # @param [String] page_token PageToken provided by the API
          # @param [Integer] page_number Page Number, this value is simply for client state
          # @param [Integer] page_size Number of records to return, defaults to 50
          # @return [Page] Page of DeviceInstance
          def page(page_token: :unset, page_number: :unset, page_size: :unset)
            params = Twilio::Values.of({
                'PageToken' => page_token,
                'Page' => page_number,
                'PageSize' => page_size,
            })

            response = @version.page('GET', @uri, params: params)

            DevicePage.new(@version, response, @solution)
          end

          ##
          # Retrieve a single page of DeviceInstance records from the API.
          # Request is executed immediately.
          # @param [String] target_url API-generated URL for the requested results page
          # @return [Page] Page of DeviceInstance
          def get_page(target_url)
            response = @version.domain.request(
                'GET',
                target_url
            )
            DevicePage.new(@version, response, @solution)
          end

          ##
          # Provide a user friendly representation
          def to_s
            '#<Twilio.Microvisor.V1.DeviceList>'
          end
        end

        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class DevicePage < Page
          ##
          # Initialize the DevicePage
          # @param [Version] version Version that contains the resource
          # @param [Response] response Response from the API
          # @param [Hash] solution Path solution for the resource
          # @return [DevicePage] DevicePage
          def initialize(version, response, solution)
            super(version, response)

            # Path Solution
            @solution = solution
          end

          ##
          # Build an instance of DeviceInstance
          # @param [Hash] payload Payload response from the API
          # @return [DeviceInstance] DeviceInstance
          def get_instance(payload)
            DeviceInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            '<Twilio.Microvisor.V1.DevicePage>'
          end
        end

        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class DeviceContext < InstanceContext
          ##
          # Initialize the DeviceContext
          # @param [Version] version Version that contains the resource
          # @param [String] sid A 34-character string that uniquely identifies this Device.
          # @return [DeviceContext] DeviceContext
          def initialize(version, sid)
            super(version)

            # Path Solution
            @solution = {sid: sid, }
            @uri = "/Devices/#{@solution[:sid]}"

            # Dependents
            @device_configs = nil
            @device_secrets = nil
          end

          ##
          # Fetch the DeviceInstance
          # @return [DeviceInstance] Fetched DeviceInstance
          def fetch
            payload = @version.fetch('GET', @uri)

            DeviceInstance.new(@version, payload, sid: @solution[:sid], )
          end

          ##
          # Update the DeviceInstance
          # @param [String] unique_name A unique and addressable name to be assigned to this
          #   Device by the developer. It may be used in place of the Device SID.
          # @param [String] target_app The SID or unique name of the App to be targeted to
          #   the Device.
          # @param [Boolean] logging_enabled A Boolean flag specifying whether to enable
          #   application logging. Logs will be enabled or extended for 24 hours.
          # @return [DeviceInstance] Updated DeviceInstance
          def update(unique_name: :unset, target_app: :unset, logging_enabled: :unset)
            data = Twilio::Values.of({
                'UniqueName' => unique_name,
                'TargetApp' => target_app,
                'LoggingEnabled' => logging_enabled,
            })

            payload = @version.update('POST', @uri, data: data)

            DeviceInstance.new(@version, payload, sid: @solution[:sid], )
          end

          ##
          # Access the device_configs
          # @return [DeviceConfigList]
          # @return [DeviceConfigContext] if key was passed.
          def device_configs(key=:unset)
            raise ArgumentError, 'key cannot be nil' if key.nil?

            if key != :unset
              return DeviceConfigContext.new(@version, @solution[:sid], key, )
            end

            unless @device_configs
              @device_configs = DeviceConfigList.new(@version, device_sid: @solution[:sid], )
            end

            @device_configs
          end

          ##
          # Access the device_secrets
          # @return [DeviceSecretList]
          # @return [DeviceSecretContext] if key was passed.
          def device_secrets(key=:unset)
            raise ArgumentError, 'key cannot be nil' if key.nil?

            if key != :unset
              return DeviceSecretContext.new(@version, @solution[:sid], key, )
            end

            unless @device_secrets
              @device_secrets = DeviceSecretList.new(@version, device_sid: @solution[:sid], )
            end

            @device_secrets
          end

          ##
          # Provide a user friendly representation
          def to_s
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Microvisor.V1.DeviceContext #{context}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Microvisor.V1.DeviceContext #{context}>"
          end
        end

        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class DeviceInstance < InstanceResource
          ##
          # Initialize the DeviceInstance
          # @param [Version] version Version that contains the resource
          # @param [Hash] payload payload that contains response from Twilio
          # @param [String] sid A 34-character string that uniquely identifies this Device.
          # @return [DeviceInstance] DeviceInstance
          def initialize(version, payload, sid: nil)
            super(version)

            # Marshaled Properties
            @properties = {
                'sid' => payload['sid'],
                'unique_name' => payload['unique_name'],
                'account_sid' => payload['account_sid'],
                'app' => payload['app'],
                'logging' => payload['logging'],
                'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                'url' => payload['url'],
                'links' => payload['links'],
            }

            # Context
            @instance_context = nil
            @params = {'sid' => sid || @properties['sid'], }
          end

          ##
          # Generate an instance context for the instance, the context is capable of
          # performing various actions.  All instance actions are proxied to the context
          # @return [DeviceContext] DeviceContext for this DeviceInstance
          def context
            unless @instance_context
              @instance_context = DeviceContext.new(@version, @params['sid'], )
            end
            @instance_context
          end

          ##
          # @return [String] A string that uniquely identifies this Device.
          def sid
            @properties['sid']
          end

          ##
          # @return [String] A developer-defined string that uniquely identifies the Device.
          def unique_name
            @properties['unique_name']
          end

          ##
          # @return [String] Account SID.
          def account_sid
            @properties['account_sid']
          end

          ##
          # @return [Hash] Information about the target App and the App reported by this Device.
          def app
            @properties['app']
          end

          ##
          # @return [Hash] Object specifying whether application logging is enabled for this Device.
          def logging
            @properties['logging']
          end

          ##
          # @return [Time] The date that this Device was created.
          def date_created
            @properties['date_created']
          end

          ##
          # @return [Time] The date that this Device was last updated.
          def date_updated
            @properties['date_updated']
          end

          ##
          # @return [String] The URL of this resource.
          def url
            @properties['url']
          end

          ##
          # @return [String] The absolute URLs of related resources
          def links
            @properties['links']
          end

          ##
          # Fetch the DeviceInstance
          # @return [DeviceInstance] Fetched DeviceInstance
          def fetch
            context.fetch
          end

          ##
          # Update the DeviceInstance
          # @param [String] unique_name A unique and addressable name to be assigned to this
          #   Device by the developer. It may be used in place of the Device SID.
          # @param [String] target_app The SID or unique name of the App to be targeted to
          #   the Device.
          # @param [Boolean] logging_enabled A Boolean flag specifying whether to enable
          #   application logging. Logs will be enabled or extended for 24 hours.
          # @return [DeviceInstance] Updated DeviceInstance
          def update(unique_name: :unset, target_app: :unset, logging_enabled: :unset)
            context.update(unique_name: unique_name, target_app: target_app, logging_enabled: logging_enabled, )
          end

          ##
          # Access the device_configs
          # @return [device_configs] device_configs
          def device_configs
            context.device_configs
          end

          ##
          # Access the device_secrets
          # @return [device_secrets] device_secrets
          def device_secrets
            context.device_secrets
          end

          ##
          # Provide a user friendly representation
          def to_s
            values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Microvisor.V1.DeviceInstance #{values}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Microvisor.V1.DeviceInstance #{values}>"
          end
        end
      end
    end
  end
end