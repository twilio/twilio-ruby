##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Preview < Domain
      class Understand < Version
        class AssistantContext < InstanceContext
          ##
          # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
          class TaskList < ListResource
            ##
            # Initialize the TaskList
            # @param [Version] version Version that contains the resource
            # @param [String] assistant_sid The unique ID of the Assistant.
            # @return [TaskList] TaskList
            def initialize(version, assistant_sid: nil)
              super(version)

              # Path Solution
              @solution = {assistant_sid: assistant_sid}
              @uri = "/Assistants/#{@solution[:assistant_sid]}/Tasks"
            end

            ##
            # Lists TaskInstance records from the API as a list.
            # Unlike stream(), this operation is eager and will load `limit` records into
            # memory before returning.
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #    guarantees to never return more than limit.  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when
            #    not set will use the default value of 50 records.  If no page_size is defined
            #    but a limit is defined, stream() will attempt to read the limit with the most
            #    efficient page size, i.e. min(limit, 1000)
            # @return [Array] Array of up to limit results
            def list(limit: nil, page_size: nil)
              self.stream(limit: limit, page_size: page_size).entries
            end

            ##
            # Streams TaskInstance records from the API as an Enumerable.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #    guarantees to never return more than limit. Default is no limit.
            # @param [Integer] page_size Number of records to fetch per request, when
            #    not set will use the default value of 50 records. If no page_size is defined
            #    but a limit is defined, stream() will attempt to read the limit with the most
            #    efficient page size, i.e. min(limit, 1000)
            # @return [Enumerable] Enumerable that will yield up to limit results
            def stream(limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)

              page = self.page(page_size: limits[:page_size], )

              @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
            end

            ##
            # When passed a block, yields TaskInstance records from the API.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            def each
              limits = @version.read_limits

              page = self.page(page_size: limits[:page_size], )

              @version.stream(page,
                              limit: limits[:limit],
                              page_limit: limits[:page_limit]).each {|x| yield x}
            end

            ##
            # Retrieve a single page of TaskInstance records from the API.
            # Request is executed immediately.
            # @param [String] page_token PageToken provided by the API
            # @param [Integer] page_number Page Number, this value is simply for client state
            # @param [Integer] page_size Number of records to return, defaults to 50
            # @return [Page] Page of TaskInstance
            def page(page_token: :unset, page_number: :unset, page_size: :unset)
              params = Twilio::Values.of({
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              })
              response = @version.page(
                  'GET',
                  @uri,
                  params
              )
              TaskPage.new(@version, response, @solution)
            end

            ##
            # Retrieve a single page of TaskInstance records from the API.
            # Request is executed immediately.
            # @param [String] target_url API-generated URL for the requested results page
            # @return [Page] Page of TaskInstance
            def get_page(target_url)
              response = @version.domain.request(
                  'GET',
                  target_url
              )
              TaskPage.new(@version, response, @solution)
            end

            ##
            # Retrieve a single page of TaskInstance records from the API.
            # Request is executed immediately.
            # @param [String] unique_name A user-provided string that uniquely identifies this
            #   resource as an alternative to the sid. Unique up to 64 characters long.
            # @param [String] friendly_name A user-provided string that identifies this
            #   resource. It is non-unique and can up to 255 characters long.
            # @param [Hash] actions A user-provided JSON object encoded as a string to specify
            #   the actions for this task. It is optional and non-unique.
            # @param [String] actions_url User-provided HTTP endpoint where from the assistant
            #   fetches actions
            # @return [TaskInstance] Newly created TaskInstance
            def create(unique_name: nil, friendly_name: :unset, actions: :unset, actions_url: :unset)
              data = Twilio::Values.of({
                  'UniqueName' => unique_name,
                  'FriendlyName' => friendly_name,
                  'Actions' => Twilio.serialize_object(actions),
                  'ActionsUrl' => actions_url,
              })

              payload = @version.create(
                  'POST',
                  @uri,
                  data: data
              )

              TaskInstance.new(@version, payload, assistant_sid: @solution[:assistant_sid], )
            end

            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Preview.Understand.TaskList>'
            end
          end

          ##
          # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
          class TaskPage < Page
            ##
            # Initialize the TaskPage
            # @param [Version] version Version that contains the resource
            # @param [Response] response Response from the API
            # @param [Hash] solution Path solution for the resource
            # @return [TaskPage] TaskPage
            def initialize(version, response, solution)
              super(version, response)

              # Path Solution
              @solution = solution
            end

            ##
            # Build an instance of TaskInstance
            # @param [Hash] payload Payload response from the API
            # @return [TaskInstance] TaskInstance
            def get_instance(payload)
              TaskInstance.new(@version, payload, assistant_sid: @solution[:assistant_sid], )
            end

            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Preview.Understand.TaskPage>'
            end
          end

          ##
          # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
          class TaskContext < InstanceContext
            ##
            # Initialize the TaskContext
            # @param [Version] version Version that contains the resource
            # @param [String] assistant_sid The unique ID of the Assistant.
            # @param [String] sid A 34 character string that uniquely identifies this
            #   resource.
            # @return [TaskContext] TaskContext
            def initialize(version, assistant_sid, sid)
              super(version)

              # Path Solution
              @solution = {assistant_sid: assistant_sid, sid: sid, }
              @uri = "/Assistants/#{@solution[:assistant_sid]}/Tasks/#{@solution[:sid]}"

              # Dependents
              @fields = nil
              @samples = nil
              @task_actions = nil
              @statistics = nil
            end

            ##
            # Fetch a TaskInstance
            # @return [TaskInstance] Fetched TaskInstance
            def fetch
              params = Twilio::Values.of({})

              payload = @version.fetch(
                  'GET',
                  @uri,
                  params,
              )

              TaskInstance.new(@version, payload, assistant_sid: @solution[:assistant_sid], sid: @solution[:sid], )
            end

            ##
            # Update the TaskInstance
            # @param [String] friendly_name A user-provided string that identifies this
            #   resource. It is non-unique and can up to 255 characters long.
            # @param [String] unique_name A user-provided string that uniquely identifies this
            #   resource as an alternative to the sid. Unique up to 64 characters long.
            # @param [Hash] actions A user-provided JSON object encoded as a string to specify
            #   the actions for this task. It is optional and non-unique.
            # @param [String] actions_url User-provided HTTP endpoint where from the assistant
            #   fetches actions
            # @return [TaskInstance] Updated TaskInstance
            def update(friendly_name: :unset, unique_name: :unset, actions: :unset, actions_url: :unset)
              data = Twilio::Values.of({
                  'FriendlyName' => friendly_name,
                  'UniqueName' => unique_name,
                  'Actions' => Twilio.serialize_object(actions),
                  'ActionsUrl' => actions_url,
              })

              payload = @version.update(
                  'POST',
                  @uri,
                  data: data,
              )

              TaskInstance.new(@version, payload, assistant_sid: @solution[:assistant_sid], sid: @solution[:sid], )
            end

            ##
            # Deletes the TaskInstance
            # @return [Boolean] true if delete succeeds, false otherwise
            def delete
              @version.delete('delete', @uri)
            end

            ##
            # Access the fields
            # @return [FieldList]
            # @return [FieldContext] if sid was passed.
            def fields(sid=:unset)
              raise ArgumentError, 'sid cannot be nil' if sid.nil?

              if sid != :unset
                return FieldContext.new(@version, @solution[:assistant_sid], @solution[:sid], sid, )
              end

              unless @fields
                @fields = FieldList.new(
                    @version,
                    assistant_sid: @solution[:assistant_sid],
                    task_sid: @solution[:sid],
                )
              end

              @fields
            end

            ##
            # Access the samples
            # @return [SampleList]
            # @return [SampleContext] if sid was passed.
            def samples(sid=:unset)
              raise ArgumentError, 'sid cannot be nil' if sid.nil?

              if sid != :unset
                return SampleContext.new(@version, @solution[:assistant_sid], @solution[:sid], sid, )
              end

              unless @samples
                @samples = SampleList.new(
                    @version,
                    assistant_sid: @solution[:assistant_sid],
                    task_sid: @solution[:sid],
                )
              end

              @samples
            end

            ##
            # Access the task_actions
            # @return [TaskActionsList]
            # @return [TaskActionsContext]
            def task_actions
              TaskActionsContext.new(@version, @solution[:assistant_sid], @solution[:sid], )
            end

            ##
            # Access the statistics
            # @return [TaskStatisticsList]
            # @return [TaskStatisticsContext]
            def statistics
              TaskStatisticsContext.new(@version, @solution[:assistant_sid], @solution[:sid], )
            end

            ##
            # Provide a user friendly representation
            def to_s
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Preview.Understand.TaskContext #{context}>"
            end

            ##
            # Provide a detailed, user friendly representation
            def inspect
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Preview.Understand.TaskContext #{context}>"
            end
          end

          ##
          # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
          class TaskInstance < InstanceResource
            ##
            # Initialize the TaskInstance
            # @param [Version] version Version that contains the resource
            # @param [Hash] payload payload that contains response from Twilio
            # @param [String] assistant_sid The unique ID of the Assistant.
            # @param [String] sid A 34 character string that uniquely identifies this
            #   resource.
            # @return [TaskInstance] TaskInstance
            def initialize(version, payload, assistant_sid: nil, sid: nil)
              super(version)

              # Marshaled Properties
              @properties = {
                  'account_sid' => payload['account_sid'],
                  'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                  'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                  'friendly_name' => payload['friendly_name'],
                  'links' => payload['links'],
                  'assistant_sid' => payload['assistant_sid'],
                  'sid' => payload['sid'],
                  'unique_name' => payload['unique_name'],
                  'actions_url' => payload['actions_url'],
                  'url' => payload['url'],
              }

              # Context
              @instance_context = nil
              @params = {'assistant_sid' => assistant_sid, 'sid' => sid || @properties['sid'], }
            end

            ##
            # Generate an instance context for the instance, the context is capable of
            # performing various actions.  All instance actions are proxied to the context
            # @return [TaskContext] TaskContext for this TaskInstance
            def context
              unless @instance_context
                @instance_context = TaskContext.new(@version, @params['assistant_sid'], @params['sid'], )
              end
              @instance_context
            end

            ##
            # @return [String] The unique ID of the Account that created this Task.
            def account_sid
              @properties['account_sid']
            end

            ##
            # @return [Time] The date that this resource was created
            def date_created
              @properties['date_created']
            end

            ##
            # @return [Time] The date that this resource was last updated
            def date_updated
              @properties['date_updated']
            end

            ##
            # @return [String] A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
            def friendly_name
              @properties['friendly_name']
            end

            ##
            # @return [String] The links
            def links
              @properties['links']
            end

            ##
            # @return [String] The unique ID of the Assistant.
            def assistant_sid
              @properties['assistant_sid']
            end

            ##
            # @return [String] A 34 character string that uniquely identifies this resource.
            def sid
              @properties['sid']
            end

            ##
            # @return [String] A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
            def unique_name
              @properties['unique_name']
            end

            ##
            # @return [String] User-provided HTTP endpoint where from the assistant fetches actions
            def actions_url
              @properties['actions_url']
            end

            ##
            # @return [String] The url
            def url
              @properties['url']
            end

            ##
            # Fetch a TaskInstance
            # @return [TaskInstance] Fetched TaskInstance
            def fetch
              context.fetch
            end

            ##
            # Update the TaskInstance
            # @param [String] friendly_name A user-provided string that identifies this
            #   resource. It is non-unique and can up to 255 characters long.
            # @param [String] unique_name A user-provided string that uniquely identifies this
            #   resource as an alternative to the sid. Unique up to 64 characters long.
            # @param [Hash] actions A user-provided JSON object encoded as a string to specify
            #   the actions for this task. It is optional and non-unique.
            # @param [String] actions_url User-provided HTTP endpoint where from the assistant
            #   fetches actions
            # @return [TaskInstance] Updated TaskInstance
            def update(friendly_name: :unset, unique_name: :unset, actions: :unset, actions_url: :unset)
              context.update(
                  friendly_name: friendly_name,
                  unique_name: unique_name,
                  actions: actions,
                  actions_url: actions_url,
              )
            end

            ##
            # Deletes the TaskInstance
            # @return [Boolean] true if delete succeeds, false otherwise
            def delete
              context.delete
            end

            ##
            # Access the fields
            # @return [fields] fields
            def fields
              context.fields
            end

            ##
            # Access the samples
            # @return [samples] samples
            def samples
              context.samples
            end

            ##
            # Access the task_actions
            # @return [task_actions] task_actions
            def task_actions
              context.task_actions
            end

            ##
            # Access the statistics
            # @return [statistics] statistics
            def statistics
              context.statistics
            end

            ##
            # Provide a user friendly representation
            def to_s
              values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Preview.Understand.TaskInstance #{values}>"
            end

            ##
            # Provide a detailed, user friendly representation
            def inspect
              values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Preview.Understand.TaskInstance #{values}>"
            end
          end
        end
      end
    end
  end
end