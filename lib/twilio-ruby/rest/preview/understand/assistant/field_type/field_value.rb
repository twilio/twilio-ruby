##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Preview < Domain
      class Understand < Version
        class AssistantContext < InstanceContext
          class FieldTypeContext < InstanceContext
            ##
            # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
            class FieldValueList < ListResource
              ##
              # Initialize the FieldValueList
              # @param [Version] version Version that contains the resource
              # @param [String] assistant_sid The unique ID of the Assistant.
              # @param [String] field_type_sid The unique ID of the Field Type associated with
              #   this Field Value.
              # @return [FieldValueList] FieldValueList
              def initialize(version, assistant_sid: nil, field_type_sid: nil)
                super(version)

                # Path Solution
                @solution = {assistant_sid: assistant_sid, field_type_sid: field_type_sid}
                @uri = "/Assistants/#{@solution[:assistant_sid]}/FieldTypes/#{@solution[:field_type_sid]}/FieldValues"
              end

              ##
              # Lists FieldValueInstance records from the API as a list.
              # Unlike stream(), this operation is eager and will load `limit` records into
              # memory before returning.
              # @param [String] language An ISO language-country string of the value. For
              #   example: *en-US*
              # @param [Integer] limit Upper limit for the number of records to return. stream()
              #    guarantees to never return more than limit.  Default is no limit
              # @param [Integer] page_size Number of records to fetch per request, when
              #    not set will use the default value of 50 records.  If no page_size is defined
              #    but a limit is defined, stream() will attempt to read the limit with the most
              #    efficient page size, i.e. min(limit, 1000)
              # @return [Array] Array of up to limit results
              def list(language: :unset, limit: nil, page_size: nil)
                self.stream(language: language, limit: limit, page_size: page_size).entries
              end

              ##
              # Streams FieldValueInstance records from the API as an Enumerable.
              # This operation lazily loads records as efficiently as possible until the limit
              # is reached.
              # @param [String] language An ISO language-country string of the value. For
              #   example: *en-US*
              # @param [Integer] limit Upper limit for the number of records to return. stream()
              #    guarantees to never return more than limit. Default is no limit.
              # @param [Integer] page_size Number of records to fetch per request, when
              #    not set will use the default value of 50 records. If no page_size is defined
              #    but a limit is defined, stream() will attempt to read the limit with the most
              #    efficient page size, i.e. min(limit, 1000)
              # @return [Enumerable] Enumerable that will yield up to limit results
              def stream(language: :unset, limit: nil, page_size: nil)
                limits = @version.read_limits(limit, page_size)

                page = self.page(language: language, page_size: limits[:page_size], )

                @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
              end

              ##
              # When passed a block, yields FieldValueInstance records from the API.
              # This operation lazily loads records as efficiently as possible until the limit
              # is reached.
              def each
                limits = @version.read_limits

                page = self.page(page_size: limits[:page_size], )

                @version.stream(page,
                                limit: limits[:limit],
                                page_limit: limits[:page_limit]).each {|x| yield x}
              end

              ##
              # Retrieve a single page of FieldValueInstance records from the API.
              # Request is executed immediately.
              # @param [String] language An ISO language-country string of the value. For
              #   example: *en-US*
              # @param [String] page_token PageToken provided by the API
              # @param [Integer] page_number Page Number, this value is simply for client state
              # @param [Integer] page_size Number of records to return, defaults to 50
              # @return [Page] Page of FieldValueInstance
              def page(language: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
                params = Twilio::Values.of({
                    'Language' => language,
                    'PageToken' => page_token,
                    'Page' => page_number,
                    'PageSize' => page_size,
                })
                response = @version.page(
                    'GET',
                    @uri,
                    params
                )
                FieldValuePage.new(@version, response, @solution)
              end

              ##
              # Retrieve a single page of FieldValueInstance records from the API.
              # Request is executed immediately.
              # @param [String] target_url API-generated URL for the requested results page
              # @return [Page] Page of FieldValueInstance
              def get_page(target_url)
                response = @version.domain.request(
                    'GET',
                    target_url
                )
                FieldValuePage.new(@version, response, @solution)
              end

              ##
              # Retrieve a single page of FieldValueInstance records from the API.
              # Request is executed immediately.
              # @param [String] language An ISO language-country string of the value.
              # @param [String] value A user-provided string that uniquely identifies this
              #   resource as an alternative to the sid. Unique up to 64 characters long.
              # @param [String] synonym_of A value that indicates this field value is a synonym
              #   of. Empty if the value is not a synonym.
              # @return [FieldValueInstance] Newly created FieldValueInstance
              def create(language: nil, value: nil, synonym_of: :unset)
                data = Twilio::Values.of({'Language' => language, 'Value' => value, 'SynonymOf' => synonym_of, })

                payload = @version.create(
                    'POST',
                    @uri,
                    data: data
                )

                FieldValueInstance.new(
                    @version,
                    payload,
                    assistant_sid: @solution[:assistant_sid],
                    field_type_sid: @solution[:field_type_sid],
                )
              end

              ##
              # Provide a user friendly representation
              def to_s
                '#<Twilio.Preview.Understand.FieldValueList>'
              end
            end

            ##
            # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
            class FieldValuePage < Page
              ##
              # Initialize the FieldValuePage
              # @param [Version] version Version that contains the resource
              # @param [Response] response Response from the API
              # @param [Hash] solution Path solution for the resource
              # @return [FieldValuePage] FieldValuePage
              def initialize(version, response, solution)
                super(version, response)

                # Path Solution
                @solution = solution
              end

              ##
              # Build an instance of FieldValueInstance
              # @param [Hash] payload Payload response from the API
              # @return [FieldValueInstance] FieldValueInstance
              def get_instance(payload)
                FieldValueInstance.new(
                    @version,
                    payload,
                    assistant_sid: @solution[:assistant_sid],
                    field_type_sid: @solution[:field_type_sid],
                )
              end

              ##
              # Provide a user friendly representation
              def to_s
                '<Twilio.Preview.Understand.FieldValuePage>'
              end
            end

            ##
            # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
            class FieldValueContext < InstanceContext
              ##
              # Initialize the FieldValueContext
              # @param [Version] version Version that contains the resource
              # @param [String] assistant_sid The assistant_sid
              # @param [String] field_type_sid The field_type_sid
              # @param [String] sid The sid
              # @return [FieldValueContext] FieldValueContext
              def initialize(version, assistant_sid, field_type_sid, sid)
                super(version)

                # Path Solution
                @solution = {assistant_sid: assistant_sid, field_type_sid: field_type_sid, sid: sid, }
                @uri = "/Assistants/#{@solution[:assistant_sid]}/FieldTypes/#{@solution[:field_type_sid]}/FieldValues/#{@solution[:sid]}"
              end

              ##
              # Fetch a FieldValueInstance
              # @return [FieldValueInstance] Fetched FieldValueInstance
              def fetch
                params = Twilio::Values.of({})

                payload = @version.fetch(
                    'GET',
                    @uri,
                    params,
                )

                FieldValueInstance.new(
                    @version,
                    payload,
                    assistant_sid: @solution[:assistant_sid],
                    field_type_sid: @solution[:field_type_sid],
                    sid: @solution[:sid],
                )
              end

              ##
              # Deletes the FieldValueInstance
              # @return [Boolean] true if delete succeeds, false otherwise
              def delete
                @version.delete('delete', @uri)
              end

              ##
              # Provide a user friendly representation
              def to_s
                context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
                "#<Twilio.Preview.Understand.FieldValueContext #{context}>"
              end

              ##
              # Provide a detailed, user friendly representation
              def inspect
                context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
                "#<Twilio.Preview.Understand.FieldValueContext #{context}>"
              end
            end

            ##
            # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
            class FieldValueInstance < InstanceResource
              ##
              # Initialize the FieldValueInstance
              # @param [Version] version Version that contains the resource
              # @param [Hash] payload payload that contains response from Twilio
              # @param [String] assistant_sid The unique ID of the Assistant.
              # @param [String] field_type_sid The unique ID of the Field Type associated with
              #   this Field Value.
              # @param [String] sid The sid
              # @return [FieldValueInstance] FieldValueInstance
              def initialize(version, payload, assistant_sid: nil, field_type_sid: nil, sid: nil)
                super(version)

                # Marshaled Properties
                @properties = {
                    'account_sid' => payload['account_sid'],
                    'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                    'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                    'field_type_sid' => payload['field_type_sid'],
                    'language' => payload['language'],
                    'assistant_sid' => payload['assistant_sid'],
                    'sid' => payload['sid'],
                    'value' => payload['value'],
                    'url' => payload['url'],
                    'synonym_of' => payload['synonym_of'],
                }

                # Context
                @instance_context = nil
                @params = {
                    'assistant_sid' => assistant_sid,
                    'field_type_sid' => field_type_sid,
                    'sid' => sid || @properties['sid'],
                }
              end

              ##
              # Generate an instance context for the instance, the context is capable of
              # performing various actions.  All instance actions are proxied to the context
              # @return [FieldValueContext] FieldValueContext for this FieldValueInstance
              def context
                unless @instance_context
                  @instance_context = FieldValueContext.new(
                      @version,
                      @params['assistant_sid'],
                      @params['field_type_sid'],
                      @params['sid'],
                  )
                end
                @instance_context
              end

              ##
              # @return [String] The unique ID of the Account that created this Field Value.
              def account_sid
                @properties['account_sid']
              end

              ##
              # @return [Time] The date that this resource was created
              def date_created
                @properties['date_created']
              end

              ##
              # @return [Time] The date that this resource was last updated
              def date_updated
                @properties['date_updated']
              end

              ##
              # @return [String] The unique ID of the Field Type associated with this Field Value.
              def field_type_sid
                @properties['field_type_sid']
              end

              ##
              # @return [String] An ISO language-country string of the value.
              def language
                @properties['language']
              end

              ##
              # @return [String] The unique ID of the Assistant.
              def assistant_sid
                @properties['assistant_sid']
              end

              ##
              # @return [String] A 34 character string that uniquely identifies this resource.
              def sid
                @properties['sid']
              end

              ##
              # @return [String] The Field Value itself.
              def value
                @properties['value']
              end

              ##
              # @return [String] The url
              def url
                @properties['url']
              end

              ##
              # @return [String] A value that indicates this field value is a synonym of. Empty if the value is not a synonym.
              def synonym_of
                @properties['synonym_of']
              end

              ##
              # Fetch a FieldValueInstance
              # @return [FieldValueInstance] Fetched FieldValueInstance
              def fetch
                context.fetch
              end

              ##
              # Deletes the FieldValueInstance
              # @return [Boolean] true if delete succeeds, false otherwise
              def delete
                context.delete
              end

              ##
              # Provide a user friendly representation
              def to_s
                values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                "<Twilio.Preview.Understand.FieldValueInstance #{values}>"
              end

              ##
              # Provide a detailed, user friendly representation
              def inspect
                values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                "<Twilio.Preview.Understand.FieldValueInstance #{values}>"
              end
            end
          end
        end
      end
    end
  end
end