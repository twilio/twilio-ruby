##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Preview
      class BulkExports < Version
        ##
        # Initialize the BulkExports version of Preview
        def initialize(domain)
          super
          @version = 'BulkExports'
          @exports = nil
          @export_configuration = nil
        end

        ##
        # @param [String] resource_type The type of communication – Messages, Calls,
        #   Conferences, and Participants
        # @return [Twilio::REST::Preview::BulkExports::ExportContext] if resource_type was passed.
        # @return [Twilio::REST::Preview::BulkExports::ExportList]
        def exports(resource_type=:unset)
          if resource_type.nil?
              raise ArgumentError, 'resource_type cannot be nil'
          end
          if resource_type == :unset
              @exports ||= ExportList.new self
          else
              ExportContext.new(self, resource_type)
          end
        end

        ##
        # @param [String] resource_type The type of communication – Messages, Calls,
        #   Conferences, and Participants
        # @return [Twilio::REST::Preview::BulkExports::ExportConfigurationContext] if resource_type was passed.
        # @return [Twilio::REST::Preview::BulkExports::ExportConfigurationList]
        def export_configuration(resource_type=:unset)
          if resource_type.nil?
              raise ArgumentError, 'resource_type cannot be nil'
          end
          if resource_type == :unset
              @export_configuration ||= ExportConfigurationList.new self
          else
              ExportConfigurationContext.new(self, resource_type)
          end
        end

        ##
        # Provide a user friendly representation
        def to_s
          '<Twilio::REST::Preview::BulkExports>'
        end
      end
    end
  end
end