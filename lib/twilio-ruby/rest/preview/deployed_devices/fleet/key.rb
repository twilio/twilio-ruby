##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Preview < Domain
      class DeployedDevices < Version
        class FleetContext < InstanceContext
          ##
          # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
          class KeyList < ListResource
            ##
            # Initialize the KeyList
            # @param [Version] version Version that contains the resource
            # @param [String] fleet_sid Specifies the unique string identifier of the Fleet
            #   that the given Key credential belongs to.
            # @return [KeyList] KeyList
            def initialize(version, fleet_sid: nil)
              super(version)

              # Path Solution
              @solution = {fleet_sid: fleet_sid}
              @uri = "/Fleets/#{@solution[:fleet_sid]}/Keys"
            end

            ##
            # Retrieve a single page of KeyInstance records from the API.
            # Request is executed immediately.
            # @param [String] friendly_name Provides a human readable descriptive text for
            #   this Key credential, up to 256 characters long.
            # @param [String] device_sid Provides the unique string identifier of an existing
            #   Device to become authenticated with this Key credential.
            # @return [KeyInstance] Newly created KeyInstance
            def create(friendly_name: :unset, device_sid: :unset)
              data = Twilio::Values.of({'FriendlyName' => friendly_name, 'DeviceSid' => device_sid, })

              payload = @version.create(
                  'POST',
                  @uri,
                  data: data
              )

              KeyInstance.new(@version, payload, fleet_sid: @solution[:fleet_sid], )
            end

            ##
            # Lists KeyInstance records from the API as a list.
            # Unlike stream(), this operation is eager and will load `limit` records into
            # memory before returning.
            # @param [String] device_sid Filters the resulting list of Keys by a unique string
            #   identifier of an authenticated Device.
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #    guarantees to never return more than limit.  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when
            #    not set will use the default value of 50 records.  If no page_size is defined
            #    but a limit is defined, stream() will attempt to read the limit with the most
            #    efficient page size, i.e. min(limit, 1000)
            # @return [Array] Array of up to limit results
            def list(device_sid: :unset, limit: nil, page_size: nil)
              self.stream(device_sid: device_sid, limit: limit, page_size: page_size).entries
            end

            ##
            # Streams KeyInstance records from the API as an Enumerable.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [String] device_sid Filters the resulting list of Keys by a unique string
            #   identifier of an authenticated Device.
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #    guarantees to never return more than limit. Default is no limit.
            # @param [Integer] page_size Number of records to fetch per request, when
            #    not set will use the default value of 50 records. If no page_size is defined
            #    but a limit is defined, stream() will attempt to read the limit with the most
            #    efficient page size, i.e. min(limit, 1000)
            # @return [Enumerable] Enumerable that will yield up to limit results
            def stream(device_sid: :unset, limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)

              page = self.page(device_sid: device_sid, page_size: limits[:page_size], )

              @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
            end

            ##
            # When passed a block, yields KeyInstance records from the API.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            def each
              limits = @version.read_limits

              page = self.page(page_size: limits[:page_size], )

              @version.stream(page,
                              limit: limits[:limit],
                              page_limit: limits[:page_limit]).each {|x| yield x}
            end

            ##
            # Retrieve a single page of KeyInstance records from the API.
            # Request is executed immediately.
            # @param [String] device_sid Filters the resulting list of Keys by a unique string
            #   identifier of an authenticated Device.
            # @param [String] page_token PageToken provided by the API
            # @param [Integer] page_number Page Number, this value is simply for client state
            # @param [Integer] page_size Number of records to return, defaults to 50
            # @return [Page] Page of KeyInstance
            def page(device_sid: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
              params = Twilio::Values.of({
                  'DeviceSid' => device_sid,
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              })
              response = @version.page(
                  'GET',
                  @uri,
                  params
              )
              KeyPage.new(@version, response, @solution)
            end

            ##
            # Retrieve a single page of KeyInstance records from the API.
            # Request is executed immediately.
            # @param [String] target_url API-generated URL for the requested results page
            # @return [Page] Page of KeyInstance
            def get_page(target_url)
              response = @version.domain.request(
                  'GET',
                  target_url
              )
              KeyPage.new(@version, response, @solution)
            end

            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Preview.DeployedDevices.KeyList>'
            end
          end

          ##
          # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
          class KeyPage < Page
            ##
            # Initialize the KeyPage
            # @param [Version] version Version that contains the resource
            # @param [Response] response Response from the API
            # @param [Hash] solution Path solution for the resource
            # @return [KeyPage] KeyPage
            def initialize(version, response, solution)
              super(version, response)

              # Path Solution
              @solution = solution
            end

            ##
            # Build an instance of KeyInstance
            # @param [Hash] payload Payload response from the API
            # @return [KeyInstance] KeyInstance
            def get_instance(payload)
              KeyInstance.new(@version, payload, fleet_sid: @solution[:fleet_sid], )
            end

            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Preview.DeployedDevices.KeyPage>'
            end
          end

          ##
          # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
          class KeyContext < InstanceContext
            ##
            # Initialize the KeyContext
            # @param [Version] version Version that contains the resource
            # @param [String] fleet_sid The fleet_sid
            # @param [String] sid Provides a 34 character string that uniquely identifies the
            #   requested Key credential resource.
            # @return [KeyContext] KeyContext
            def initialize(version, fleet_sid, sid)
              super(version)

              # Path Solution
              @solution = {fleet_sid: fleet_sid, sid: sid, }
              @uri = "/Fleets/#{@solution[:fleet_sid]}/Keys/#{@solution[:sid]}"
            end

            ##
            # Fetch a KeyInstance
            # @return [KeyInstance] Fetched KeyInstance
            def fetch
              params = Twilio::Values.of({})

              payload = @version.fetch(
                  'GET',
                  @uri,
                  params,
              )

              KeyInstance.new(@version, payload, fleet_sid: @solution[:fleet_sid], sid: @solution[:sid], )
            end

            ##
            # Deletes the KeyInstance
            # @return [Boolean] true if delete succeeds, false otherwise
            def delete
              @version.delete('delete', @uri)
            end

            ##
            # Update the KeyInstance
            # @param [String] friendly_name Provides a human readable descriptive text for
            #   this Key credential, up to 256 characters long.
            # @param [String] device_sid Provides the unique string identifier of an existing
            #   Device to become authenticated with this Key credential.
            # @return [KeyInstance] Updated KeyInstance
            def update(friendly_name: :unset, device_sid: :unset)
              data = Twilio::Values.of({'FriendlyName' => friendly_name, 'DeviceSid' => device_sid, })

              payload = @version.update(
                  'POST',
                  @uri,
                  data: data,
              )

              KeyInstance.new(@version, payload, fleet_sid: @solution[:fleet_sid], sid: @solution[:sid], )
            end

            ##
            # Provide a user friendly representation
            def to_s
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Preview.DeployedDevices.KeyContext #{context}>"
            end

            ##
            # Provide a detailed, user friendly representation
            def inspect
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Preview.DeployedDevices.KeyContext #{context}>"
            end
          end

          ##
          # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
          class KeyInstance < InstanceResource
            ##
            # Initialize the KeyInstance
            # @param [Version] version Version that contains the resource
            # @param [Hash] payload payload that contains response from Twilio
            # @param [String] fleet_sid Specifies the unique string identifier of the Fleet
            #   that the given Key credential belongs to.
            # @param [String] sid Provides a 34 character string that uniquely identifies the
            #   requested Key credential resource.
            # @return [KeyInstance] KeyInstance
            def initialize(version, payload, fleet_sid: nil, sid: nil)
              super(version)

              # Marshaled Properties
              @properties = {
                  'sid' => payload['sid'],
                  'url' => payload['url'],
                  'friendly_name' => payload['friendly_name'],
                  'fleet_sid' => payload['fleet_sid'],
                  'account_sid' => payload['account_sid'],
                  'device_sid' => payload['device_sid'],
                  'secret' => payload['secret'],
                  'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                  'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
              }

              # Context
              @instance_context = nil
              @params = {'fleet_sid' => fleet_sid, 'sid' => sid || @properties['sid'], }
            end

            ##
            # Generate an instance context for the instance, the context is capable of
            # performing various actions.  All instance actions are proxied to the context
            # @return [KeyContext] KeyContext for this KeyInstance
            def context
              unless @instance_context
                @instance_context = KeyContext.new(@version, @params['fleet_sid'], @params['sid'], )
              end
              @instance_context
            end

            ##
            # @return [String] A string that uniquely identifies this Key.
            def sid
              @properties['sid']
            end

            ##
            # @return [String] URL of this Key.
            def url
              @properties['url']
            end

            ##
            # @return [String] A human readable description for this Key.
            def friendly_name
              @properties['friendly_name']
            end

            ##
            # @return [String] The unique identifier of the Fleet.
            def fleet_sid
              @properties['fleet_sid']
            end

            ##
            # @return [String] The unique SID that identifies this Account.
            def account_sid
              @properties['account_sid']
            end

            ##
            # @return [String] The unique identifier of a mapped Device.
            def device_sid
              @properties['device_sid']
            end

            ##
            # @return [String] The key secret.
            def secret
              @properties['secret']
            end

            ##
            # @return [Time] The date this Key credential was created.
            def date_created
              @properties['date_created']
            end

            ##
            # @return [Time] The date this Key credential was updated.
            def date_updated
              @properties['date_updated']
            end

            ##
            # Fetch a KeyInstance
            # @return [KeyInstance] Fetched KeyInstance
            def fetch
              context.fetch
            end

            ##
            # Deletes the KeyInstance
            # @return [Boolean] true if delete succeeds, false otherwise
            def delete
              context.delete
            end

            ##
            # Update the KeyInstance
            # @param [String] friendly_name Provides a human readable descriptive text for
            #   this Key credential, up to 256 characters long.
            # @param [String] device_sid Provides the unique string identifier of an existing
            #   Device to become authenticated with this Key credential.
            # @return [KeyInstance] Updated KeyInstance
            def update(friendly_name: :unset, device_sid: :unset)
              context.update(friendly_name: friendly_name, device_sid: device_sid, )
            end

            ##
            # Provide a user friendly representation
            def to_s
              values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Preview.DeployedDevices.KeyInstance #{values}>"
            end

            ##
            # Provide a detailed, user friendly representation
            def inspect
              values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Preview.DeployedDevices.KeyInstance #{values}>"
            end
          end
        end
      end
    end
  end
end