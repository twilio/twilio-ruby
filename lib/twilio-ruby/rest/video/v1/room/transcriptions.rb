##
#    This code was generated by
#    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
#     |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
#     |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
#
#    Twilio - Video
#    This is the public Twilio REST API.
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Twilio
    module REST
        class Video < VideoBase
            class V1 < Version
                class RoomContext < InstanceContext

                     class TranscriptionsList < ListResource
                
                    ##
                    # Initialize the TranscriptionsList
                    # @param [Version] version Version that contains the resource
                    # @return [TranscriptionsList] TranscriptionsList
                    def initialize(version, room_sid: nil)
                        super(version)
                        # Path Solution
                        @solution = { room_sid: room_sid }
                        @uri = "/Rooms/#{@solution[:room_sid]}/Transcriptions"
                        
                    end
                    ##
                    # Create the TranscriptionsInstance
                    # @param [Object] configuration A collection of properties that describe transcription behaviour.
                    # @return [TranscriptionsInstance] Created TranscriptionsInstance
                    def create(
                        configuration: :unset
                    )

                        data = Twilio::Values.of({
                            'Configuration' => Twilio.serialize_object(configuration),
                        })

                        headers = Twilio::Values.of({'Content-Type' => 'application/x-www-form-urlencoded', })
                        
                        
                        
                        
                        
                        payload = @version.create('POST', @uri, data: data, headers: headers)
                        TranscriptionsInstance.new(
                            @version,
                            payload,
                            room_sid: @solution[:room_sid],
                        )
                    end

                
                    ##
                    # Lists TranscriptionsInstance records from the API as a list.
                    # Unlike stream(), this operation is eager and will load `limit` records into
                    # memory before returning.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Array] Array of up to limit results
                    def list(limit: nil, page_size: nil)
                        self.stream(
                            limit: limit,
                            page_size: page_size
                        ).entries
                    end

                    ##
                    # Streams Instance records from the API as an Enumerable.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Enumerable] Enumerable that will yield up to limit results
                    def stream(limit: nil, page_size: nil)
                        limits = @version.read_limits(limit, page_size)

                        page = self.page(
                            page_size: limits[:page_size], )

                        @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
                    end

                    ##
                    # When passed a block, yields TranscriptionsInstance records from the API.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    def each
                        limits = @version.read_limits

                        page = self.page(page_size: limits[:page_size], )

                        @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
                    end

                    ##
                    # Retrieve a single page of TranscriptionsInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] page_token PageToken provided by the API
                    # @param [Integer] page_number Page Number, this value is simply for client state
                    # @param [Integer] page_size Number of records to return, defaults to 50
                    # @return [Page] Page of TranscriptionsInstance
                    def page(page_token: :unset, page_number: :unset, page_size: :unset)
                        params = Twilio::Values.of({
                            'PageToken' => page_token,
                            'Page' => page_number,
                            'PageSize' => page_size,
                        })
                        headers = Twilio::Values.of({})
                        
                        

                        response = @version.page('GET', @uri, params: params, headers: headers)

                        TranscriptionsPage.new(@version, response, @solution)
                    end

                    ##
                    # Retrieve a single page of TranscriptionsInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] target_url API-generated URL for the requested results page
                    # @return [Page] Page of TranscriptionsInstance
                    def get_page(target_url)
                        response = @version.domain.request(
                            'GET',
                            target_url
                        )
                    TranscriptionsPage.new(@version, response, @solution)
                    end
                    


                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.Video.V1.TranscriptionsList>'
                    end
                end


                class TranscriptionsContext < InstanceContext
                    ##
                    # Initialize the TranscriptionsContext
                    # @param [Version] version Version that contains the resource
                    # @param [String] room_sid The SID of the room with the transcriptions resource to update.
                    # @param [String] ttid The Twilio type id of the transcriptions resource to update.
                    # @return [TranscriptionsContext] TranscriptionsContext
                    def initialize(version, room_sid, ttid)
                        super(version)

                        # Path Solution
                        @solution = { room_sid: room_sid, ttid: ttid,  }
                        @uri = "/Rooms/#{@solution[:room_sid]}/Transcriptions/#{@solution[:ttid]}"

                        
                    end
                    ##
                    # Fetch the TranscriptionsInstance
                    # @return [TranscriptionsInstance] Fetched TranscriptionsInstance
                    def fetch

                        headers = Twilio::Values.of({'Content-Type' => 'application/x-www-form-urlencoded', })
                        
                        
                        
                        
                        
                        payload = @version.fetch('GET', @uri, headers: headers)
                        TranscriptionsInstance.new(
                            @version,
                            payload,
                            room_sid: @solution[:room_sid],
                            ttid: @solution[:ttid],
                        )
                    end

                    ##
                    # Update the TranscriptionsInstance
                    # @param [Status] status 
                    # @return [TranscriptionsInstance] Updated TranscriptionsInstance
                    def update(
                        status: :unset
                    )

                        data = Twilio::Values.of({
                            'Status' => status,
                        })

                        headers = Twilio::Values.of({'Content-Type' => 'application/x-www-form-urlencoded', })
                        
                        
                        
                        
                        
                        payload = @version.update('POST', @uri, data: data, headers: headers)
                        TranscriptionsInstance.new(
                            @version,
                            payload,
                            room_sid: @solution[:room_sid],
                            ttid: @solution[:ttid],
                        )
                    end


                    ##
                    # Provide a user friendly representation
                    def to_s
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.Video.V1.TranscriptionsContext #{context}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        context = @solution.map{|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.Video.V1.TranscriptionsContext #{context}>"
                    end
                end

                class TranscriptionsPage < Page
                    ##
                    # Initialize the TranscriptionsPage
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [TranscriptionsPage] TranscriptionsPage
                    def initialize(version, response, solution)
                        super(version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of TranscriptionsInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [TranscriptionsInstance] TranscriptionsInstance
                    def get_instance(payload)
                        TranscriptionsInstance.new(@version, payload, room_sid: @solution[:room_sid])
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Twilio.Video.V1.TranscriptionsPage>'
                    end
                end
                class TranscriptionsInstance < InstanceResource
                    ##
                    # Initialize the TranscriptionsInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Twilio
                    # @param [String] account_sid The SID of the
                    #   {Account}[https://www.twilio.com/docs/iam/api/account] that created this Transcriptions
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [TranscriptionsInstance] TranscriptionsInstance
                    def initialize(version, payload , room_sid: nil, ttid: nil)
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'ttid' => payload['ttid'],
                            'account_sid' => payload['account_sid'],
                            'room_sid' => payload['room_sid'],
                            'status' => payload['status'],
                            'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                            'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                            'start_time' => Twilio.deserialize_iso8601_datetime(payload['start_time']),
                            'end_time' => Twilio.deserialize_iso8601_datetime(payload['end_time']),
                            'duration' => payload['duration'] == nil ? payload['duration'] : payload['duration'].to_i,
                            'url' => payload['url'],
                            'configuration' => payload['configuration'],
                        }

                        # Context
                        @instance_context = nil
                        @params = { 'room_sid' => room_sid  || @properties['room_sid']  ,'ttid' => ttid  || @properties['ttid']  , }
                    end

                    ##
                    # Generate an instance context for the instance, the context is capable of
                    # performing various actions.  All instance actions are proxied to the context
                    # @return [TranscriptionsContext] CallContext for this CallInstance
                    def context
                        unless @instance_context
                            @instance_context = TranscriptionsContext.new(@version , @params['room_sid'], @params['ttid'])
                        end
                        @instance_context
                    end
                    
                    ##
                    # @return [String] The unique string that we created to identify the transcriptions resource.
                    def ttid
                        @properties['ttid']
                    end
                    
                    ##
                    # @return [String] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Room resource.
                    def account_sid
                        @properties['account_sid']
                    end
                    
                    ##
                    # @return [String] The SID of the transcriptions's room.
                    def room_sid
                        @properties['room_sid']
                    end
                    
                    ##
                    # @return [Status] 
                    def status
                        @properties['status']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
                    def date_created
                        @properties['date_created']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
                    def date_updated
                        @properties['date_updated']
                    end
                    
                    ##
                    # @return [Time] The time of transcriptions connected to the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
                    def start_time
                        @properties['start_time']
                    end
                    
                    ##
                    # @return [Time] The time when the transcriptions disconnected from the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
                    def end_time
                        @properties['end_time']
                    end
                    
                    ##
                    # @return [String] The duration in seconds that the transcriptions were `connected`. Populated only after the transcriptions is `stopped`.
                    def duration
                        @properties['duration']
                    end
                    
                    ##
                    # @return [String] The absolute URL of the resource.
                    def url
                        @properties['url']
                    end
                    
                    ##
                    # @return [Hash] An JSON object that describes the video layout of the composition in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
                    def configuration
                        @properties['configuration']
                    end
                    
                    ##
                    # Fetch the TranscriptionsInstance
                    # @return [TranscriptionsInstance] Fetched TranscriptionsInstance
                    def fetch

                        context.fetch
                    end

                    ##
                    # Update the TranscriptionsInstance
                    # @param [Status] status 
                    # @return [TranscriptionsInstance] Updated TranscriptionsInstance
                    def update(
                        status: :unset
                    )

                        context.update(
                            status: status, 
                        )
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Twilio.Video.V1.TranscriptionsInstance #{values}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Twilio.Video.V1.TranscriptionsInstance #{values}>"
                    end
                end

             end
            end
        end
    end
end


