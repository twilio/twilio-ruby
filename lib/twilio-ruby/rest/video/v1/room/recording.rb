##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /

module Twilio
  module REST
    class Video < Domain
      class V1 < Version
        class RoomContext < InstanceContext
          class RoomRecordingList < ListResource
            ##
            # Initialize the RoomRecordingList
            # @param [Version] version Version that contains the resource
            # @param [String] room_sid The room_sid
            # @return [RoomRecordingList] RoomRecordingList
            def initialize(version, room_sid: nil)
              super(version)

              # Path Solution
              @solution = {
                  room_sid: room_sid
              }
              @uri = "/Rooms/#{@solution[:room_sid]}/Recordings"
            end

            ##
            # Lists RoomRecordingInstance records from the API as a list.
            # Unlike stream(), this operation is eager and will load `limit` records into
            # memory before returning.
            # @param [room_recording.Status] status The status
            # @param [String] source_sid The source_sid
            # @param [Time] date_created_after The date_created_after
            # @param [Time] date_created_before The date_created_before
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #    guarantees to never return more than limit.  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when
            #    not set will use the default value of 50 records.  If no page_size is defined
            #    but a limit is defined, stream() will attempt to read the limit with the most
            #    efficient page size, i.e. min(limit, 1000)
            # @return [Array] Array of up to limit results
            def list(status: :unset, source_sid: :unset, date_created_after: :unset, date_created_before: :unset, limit: nil, page_size: nil)
              self.stream(
                  status: status,
                  source_sid: source_sid,
                  date_created_after: date_created_after,
                  date_created_before: date_created_before,
                  limit: limit,
                  page_size: page_size
              ).entries
            end

            ##
            # Streams RoomRecordingInstance records from the API as an Enumerable.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [room_recording.Status] status The status
            # @param [String] source_sid The source_sid
            # @param [Time] date_created_after The date_created_after
            # @param [Time] date_created_before The date_created_before
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #    guarantees to never return more than limit. Default is no limit.
            # @param [Integer] page_size Number of records to fetch per request, when
            #    not set will use the default value of 50 records. If no page_size is defined
            #    but a limit is defined, stream() will attempt to read the limit with the most
            #    efficient page size, i.e. min(limit, 1000)
            # @return [Enumerable] Enumerable that will yield up to limit results
            def stream(status: :unset, source_sid: :unset, date_created_after: :unset, date_created_before: :unset, limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)

              page = self.page(
                  status: status,
                  source_sid: source_sid,
                  date_created_after: date_created_after,
                  date_created_before: date_created_before,
                  page_size: limits[:page_size],
              )

              @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
            end

            ##
            # When passed a block, yields RoomRecordingInstance records from the API.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            def each
              limits = @version.read_limits

              page = self.page(
                  page_size: limits[:page_size],
              )

              @version.stream(page,
                              limit: limits[:limit],
                              page_limit: limits[:page_limit]).each {|x| yield x}
            end

            ##
            # Retrieve a single page of RoomRecordingInstance records from the API.
            # Request is executed immediately.
            # @param [room_recording.Status] status The status
            # @param [String] source_sid The source_sid
            # @param [Time] date_created_after The date_created_after
            # @param [Time] date_created_before The date_created_before
            # @param [String] page_token PageToken provided by the API
            # @param [Integer] page_number Page Number, this value is simply for client state
            # @param [Integer] page_size Number of records to return, defaults to 50
            # @return [Page] Page of RoomRecordingInstance
            def page(status: :unset, source_sid: :unset, date_created_after: :unset, date_created_before: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
              params = Twilio::Values.of({
                  'Status' => status,
                  'SourceSid' => source_sid,
                  'DateCreatedAfter' => Twilio.serialize_iso8601_datetime(date_created_after),
                  'DateCreatedBefore' => Twilio.serialize_iso8601_datetime(date_created_before),
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              })
              response = @version.page(
                  'GET',
                  @uri,
                  params
              )
              RoomRecordingPage.new(@version, response, @solution)
            end

            ##
            # Retrieve a single page of RoomRecordingInstance records from the API.
            # Request is executed immediately.
            # @param [String] target_url API-generated URL for the requested results page
            # @return [Page] Page of RoomRecordingInstance
            def get_page(target_url)
              response = @version.domain.request(
                  'GET',
                  target_url
              )
              RoomRecordingPage.new(@version, response, @solution)
            end

            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Video.V1.RoomRecordingList>'
            end
          end

          class RoomRecordingPage < Page
            ##
            # Initialize the RoomRecordingPage
            # @param [Version] version Version that contains the resource
            # @param [Response] response Response from the API
            # @param [Hash] solution Path solution for the resource
            # @return [RoomRecordingPage] RoomRecordingPage
            def initialize(version, response, solution)
              super(version, response)

              # Path Solution
              @solution = solution
            end

            ##
            # Build an instance of RoomRecordingInstance
            # @param [Hash] payload Payload response from the API
            # @return [RoomRecordingInstance] RoomRecordingInstance
            def get_instance(payload)
              RoomRecordingInstance.new(
                  @version,
                  payload,
                  room_sid: @solution[:room_sid],
              )
            end

            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Video.V1.RoomRecordingPage>'
            end
          end

          class RoomRecordingContext < InstanceContext
            ##
            # Initialize the RoomRecordingContext
            # @param [Version] version Version that contains the resource
            # @param [String] room_sid The room_sid
            # @param [String] sid The sid
            # @return [RoomRecordingContext] RoomRecordingContext
            def initialize(version, room_sid, sid)
              super(version)

              # Path Solution
              @solution = {
                  room_sid: room_sid,
                  sid: sid,
              }
              @uri = "/Rooms/#{@solution[:room_sid]}/Recordings/#{@solution[:sid]}"
            end

            ##
            # Fetch a RoomRecordingInstance
            # @return [RoomRecordingInstance] Fetched RoomRecordingInstance
            def fetch
              params = Twilio::Values.of({})

              payload = @version.fetch(
                  'GET',
                  @uri,
                  params,
              )

              RoomRecordingInstance.new(
                  @version,
                  payload,
                  room_sid: @solution[:room_sid],
                  sid: @solution[:sid],
              )
            end

            ##
            # Provide a user friendly representation
            def to_s
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Video.V1.RoomRecordingContext #{context}>"
            end
          end

          class RoomRecordingInstance < InstanceResource
            ##
            # Initialize the RoomRecordingInstance
            # @param [Version] version Version that contains the resource
            # @param [Hash] payload payload that contains response from Twilio
            # @param [String] room_sid The room_sid
            # @param [String] sid The sid
            # @return [RoomRecordingInstance] RoomRecordingInstance
            def initialize(version, payload, room_sid: nil, sid: nil)
              super(version)

              # Marshaled Properties
              @properties = {
                  'account_sid' => payload['account_sid'],
                  'status' => payload['status'],
                  'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                  'sid' => payload['sid'],
                  'source_sid' => payload['source_sid'],
                  'size' => payload['size'] == nil ? payload['size'] : payload['size'].to_i,
                  'type' => payload['type'],
                  'duration' => payload['duration'] == nil ? payload['duration'] : payload['duration'].to_i,
                  'container_format' => payload['container_format'],
                  'codec' => payload['codec'],
                  'grouping_sids' => payload['grouping_sids'],
                  'room_sid' => payload['room_sid'],
                  'url' => payload['url'],
                  'links' => payload['links'],
              }

              # Context
              @instance_context = nil
              @params = {
                  'room_sid' => room_sid,
                  'sid' => sid || @properties['sid'],
              }
            end

            ##
            # Generate an instance context for the instance, the context is capable of
            # performing various actions.  All instance actions are proxied to the context
            # @return [RoomRecordingContext] RoomRecordingContext for this RoomRecordingInstance
            def context
              unless @instance_context
                @instance_context = RoomRecordingContext.new(
                    @version,
                    @params['room_sid'],
                    @params['sid'],
                )
              end
              @instance_context
            end

            ##
            # @return [String] The account_sid
            def account_sid
              @properties['account_sid']
            end

            ##
            # @return [room_recording.Status] The status
            def status
              @properties['status']
            end

            ##
            # @return [Time] The date_created
            def date_created
              @properties['date_created']
            end

            ##
            # @return [String] The sid
            def sid
              @properties['sid']
            end

            ##
            # @return [String] The source_sid
            def source_sid
              @properties['source_sid']
            end

            ##
            # @return [String] The size
            def size
              @properties['size']
            end

            ##
            # @return [room_recording.Type] The type
            def type
              @properties['type']
            end

            ##
            # @return [String] The duration
            def duration
              @properties['duration']
            end

            ##
            # @return [room_recording.Format] The container_format
            def container_format
              @properties['container_format']
            end

            ##
            # @return [room_recording.Codec] The codec
            def codec
              @properties['codec']
            end

            ##
            # @return [Hash] The grouping_sids
            def grouping_sids
              @properties['grouping_sids']
            end

            ##
            # @return [String] The room_sid
            def room_sid
              @properties['room_sid']
            end

            ##
            # @return [String] The url
            def url
              @properties['url']
            end

            ##
            # @return [String] The links
            def links
              @properties['links']
            end

            ##
            # Fetch a RoomRecordingInstance
            # @return [RoomRecordingInstance] Fetched RoomRecordingInstance
            def fetch
              context.fetch
            end

            ##
            # Provide a user friendly representation
            def to_s
              values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Video.V1.RoomRecordingInstance #{values}>"
            end

            ##
            # Provide a detailed, user friendly representation
            def inspect
              values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Video.V1.RoomRecordingInstance #{values}>"
            end
          end
        end
      end
    end
  end
end