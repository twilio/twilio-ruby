##
#    This code was generated by
#    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
#     |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
#     |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
#
#    Twilio - Video
#    This is the public Twilio REST API.
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Twilio
    module REST
        class Video < VideoBase
            class V1 < Version
                class RoomContext < InstanceContext

                     class RoomRecordingList < ListResource
                    ##
                    # Initialize the RoomRecordingList
                    # @param [Version] version Version that contains the resource
                    # @return [RoomRecordingList] RoomRecordingList
                    def initialize(version, room_sid: nil)
                        super(version)
                        # Path Solution
                        @solution = { room_sid: room_sid, }
                        @uri = "/Rooms/#{@solution[:room_sid]}/Recordings"
                        
                    end
                
                    ##
                    # Lists RoomRecordingInstance records from the API as a list.
                    # Unlike stream(), this operation is eager and will load `limit` records into
                    # memory before returning.
                    # @param [RoomRecordingStatus] status Read only the recordings with this status. Can be: `processing`, `completed`, or `deleted`.
                    # @param [String] source_sid Read only the recordings that have this `source_sid`.
                    # @param [Time] date_created_after Read only recordings that started on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
                    # @param [Time] date_created_before Read only Recordings that started before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Array] Array of up to limit results
                    def list(status: :unset, source_sid: :unset, date_created_after: :unset, date_created_before: :unset, limit: nil, page_size: nil)
                        self.stream(
                            status: status,
                            source_sid: source_sid,
                            date_created_after: date_created_after,
                            date_created_before: date_created_before,
                            limit: limit,
                            page_size: page_size
                        ).entries
                    end

                    ##
                    # Streams Instance records from the API as an Enumerable.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    # @param [RoomRecordingStatus] status Read only the recordings with this status. Can be: `processing`, `completed`, or `deleted`.
                    # @param [String] source_sid Read only the recordings that have this `source_sid`.
                    # @param [Time] date_created_after Read only recordings that started on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
                    # @param [Time] date_created_before Read only Recordings that started before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
                    # @param [Integer] limit Upper limit for the number of records to return. stream()
                    #    guarantees to never return more than limit.  Default is no limit
                    # @param [Integer] page_size Number of records to fetch per request, when
                    #    not set will use the default value of 50 records.  If no page_size is defined
                    #    but a limit is defined, stream() will attempt to read the limit with the most
                    #    efficient page size, i.e. min(limit, 1000)
                    # @return [Enumerable] Enumerable that will yield up to limit results
                    def stream(status: :unset, source_sid: :unset, date_created_after: :unset, date_created_before: :unset, limit: nil, page_size: nil)
                        limits = @version.read_limits(limit, page_size)

                        page = self.page(
                            status: status,
                            source_sid: source_sid,
                            date_created_after: date_created_after,
                            date_created_before: date_created_before,
                            page_size: limits[:page_size], )

                        @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
                    end

                    ##
                    # When passed a block, yields RoomRecordingInstance records from the API.
                    # This operation lazily loads records as efficiently as possible until the limit
                    # is reached.
                    def each
                        limits = @version.read_limits

                        page = self.page(page_size: limits[:page_size], )

                        @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
                    end

                    ##
                    # Retrieve a single page of RoomRecordingInstance records from the API.
                    # Request is executed immediately.
                    # @param [RoomRecordingStatus] status Read only the recordings with this status. Can be: `processing`, `completed`, or `deleted`.
                    # @param [String] source_sid Read only the recordings that have this `source_sid`.
                    # @param [Time] date_created_after Read only recordings that started on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
                    # @param [Time] date_created_before Read only Recordings that started before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
                    # @param [String] page_token PageToken provided by the API
                    # @param [Integer] page_number Page Number, this value is simply for client state
                    # @param [Integer] page_size Number of records to return, defaults to 50
                    # @return [Page] Page of RoomRecordingInstance
                    def page(status: :unset, source_sid: :unset, date_created_after: :unset, date_created_before: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
                        params = Twilio::Values.of({
                            
                            'Status' => status,
                            
                            'SourceSid' => source_sid,
                            
                            'DateCreatedAfter' =>  Twilio.serialize_iso8601_datetime(date_created_after),
                            
                            'DateCreatedBefore' =>  Twilio.serialize_iso8601_datetime(date_created_before),
                            
                            'PageToken' => page_token,
                            'Page' => page_number,
                            'PageSize' => page_size,
                        })

                        response = @version.page('GET', @uri, params: params)

                        RoomRecordingPage.new(@version, response, @solution)
                    end

                    ##
                    # Retrieve a single page of RoomRecordingInstance records from the API.
                    # Request is executed immediately.
                    # @param [String] target_url API-generated URL for the requested results page
                    # @return [Page] Page of RoomRecordingInstance
                    def get_page(target_url)
                        response = @version.domain.request(
                            'GET',
                            target_url
                        )
                    RoomRecordingPage.new(@version, response, @solution)
                    end
                    


                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.Video.V1.RoomRecordingList>'
                    end
                end

                class RoomRecordingContext < InstanceContext
                    ##
                    # Initialize the RoomRecordingContext
                    # @param [Version] version Version that contains the resource
                    # @param [String] room_sid The SID of the Room resource with the recording to fetch.
                    # @param [String] sid The SID of the RoomRecording resource to fetch.
                    # @return [RoomRecordingContext] RoomRecordingContext
                    def initialize(version, room_sid, sid)
                        super(version)

                        # Path Solution
                        @solution = { room_sid: room_sid, sid: sid,  }
                        @uri = "/Rooms/#{@solution[:room_sid]}/Recordings/#{@solution[:sid]}"

                        
                    end
                    ##
                    # Delete the RoomRecordingInstance
                    # @return [Boolean] True if delete succeeds, false otherwise
                    def delete

                        @version.delete('DELETE', @uri)
                    end

                    ##
                    # Fetch the RoomRecordingInstance
                    # @return [RoomRecordingInstance] Fetched RoomRecordingInstance
                    def fetch

                        payload = @version.fetch('GET', @uri)
                        RoomRecordingInstance.new(
                            @version,
                            payload,
                            room_sid: @solution[:room_sid],
                            sid: @solution[:sid],
                        )
                    end


                    ##
                    # Provide a user friendly representation
                    def to_s
                        context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.Video.V1.RoomRecordingContext #{context}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
                        "#<Twilio.Video.V1.RoomRecordingContext #{context}>"
                    end
                end

                class RoomRecordingPage < Page
                    ##
                    # Initialize the RoomRecordingPage
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [RoomRecordingPage] RoomRecordingPage
                    def initialize(version, response, solution)
                        super(version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of RoomRecordingInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [RoomRecordingInstance] RoomRecordingInstance
                    def get_instance(payload)
                        RoomRecordingInstance.new(@version, payload, room_sid: @solution[:room_sid])
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Twilio.Video.V1.RoomRecordingPage>'
                    end
                end
                class RoomRecordingInstance < InstanceResource
                    ##
                    # Initialize the RoomRecordingInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Twilio
                    # @param [String] account_sid The SID of the
                    #   {Account}[https://www.twilio.com/docs/iam/api/account] that created this RoomRecording
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [RoomRecordingInstance] RoomRecordingInstance
                    def initialize(version, payload , room_sid: nil, sid: nil)
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'account_sid' => payload['account_sid'],
                            'status' => payload['status'],
                            'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                            'sid' => payload['sid'],
                            'source_sid' => payload['source_sid'],
                            'size' => payload['size'],
                            'url' => payload['url'],
                            'type' => payload['type'],
                            'duration' => payload['duration'] == nil ? payload['duration'] : payload['duration'].to_i,
                            'container_format' => payload['container_format'],
                            'codec' => payload['codec'],
                            'grouping_sids' => payload['grouping_sids'],
                            'track_name' => payload['track_name'],
                            'offset' => payload['offset'],
                            'media_external_location' => payload['media_external_location'],
                            'room_sid' => payload['room_sid'],
                            'links' => payload['links'],
                        }

                        # Context
                        @instance_context = nil
                        @params = { 'room_sid' => room_sid  || @properties['room_sid']  ,'sid' => sid  || @properties['sid']  , }
                    end

                    ##
                    # Generate an instance context for the instance, the context is capable of
                    # performing various actions.  All instance actions are proxied to the context
                    # @return [RoomRecordingContext] CallContext for this CallInstance
                    def context
                        unless @instance_context
                            @instance_context = RoomRecordingContext.new(@version , @params['room_sid'], @params['sid'])
                        end
                        @instance_context
                    end
                    
                    ##
                    # @return [String] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the RoomRecording resource.
                    def account_sid
                        @properties['account_sid']
                    end
                    
                    ##
                    # @return [RoomRecordingStatus] 
                    def status
                        @properties['status']
                    end
                    
                    ##
                    # @return [Time] The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
                    def date_created
                        @properties['date_created']
                    end
                    
                    ##
                    # @return [String] The unique string that we created to identify the RoomRecording resource.
                    def sid
                        @properties['sid']
                    end
                    
                    ##
                    # @return [String] The SID of the recording source. For a Room Recording, this value is a `track_sid`.
                    def source_sid
                        @properties['source_sid']
                    end
                    
                    ##
                    # @return [String] The size of the recorded track in bytes.
                    def size
                        @properties['size']
                    end
                    
                    ##
                    # @return [String] The absolute URL of the resource.
                    def url
                        @properties['url']
                    end
                    
                    ##
                    # @return [RoomRecordingType] 
                    def type
                        @properties['type']
                    end
                    
                    ##
                    # @return [String] The duration of the recording rounded to the nearest second. Sub-second duration tracks have a `duration` of 1 second
                    def duration
                        @properties['duration']
                    end
                    
                    ##
                    # @return [RoomRecordingFormat] 
                    def container_format
                        @properties['container_format']
                    end
                    
                    ##
                    # @return [RoomRecordingCodec] 
                    def codec
                        @properties['codec']
                    end
                    
                    ##
                    # @return [Hash] A list of SIDs related to the Recording. Includes the `room_sid` and `participant_sid`.
                    def grouping_sids
                        @properties['grouping_sids']
                    end
                    
                    ##
                    # @return [String] The name that was given to the source track of the recording. If no name is given, the `source_sid` is used.
                    def track_name
                        @properties['track_name']
                    end
                    
                    ##
                    # @return [String] The time in milliseconds elapsed between an arbitrary point in time, common to all group rooms, and the moment when the source room of this track started. This information provides a synchronization mechanism for recordings belonging to the same room.
                    def offset
                        @properties['offset']
                    end
                    
                    ##
                    # @return [String] The URL of the media file associated with the recording when stored externally. See [External S3 Recordings](/docs/video/api/external-s3-recordings) for more details.
                    def media_external_location
                        @properties['media_external_location']
                    end
                    
                    ##
                    # @return [String] The SID of the Room resource the recording is associated with.
                    def room_sid
                        @properties['room_sid']
                    end
                    
                    ##
                    # @return [Hash] The URLs of related resources.
                    def links
                        @properties['links']
                    end
                    
                    ##
                    # Delete the RoomRecordingInstance
                    # @return [Boolean] True if delete succeeds, false otherwise
                    def delete

                        context.delete
                    end

                    ##
                    # Fetch the RoomRecordingInstance
                    # @return [RoomRecordingInstance] Fetched RoomRecordingInstance
                    def fetch

                        context.fetch
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Twilio.Video.V1.RoomRecordingInstance #{values}>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                        "<Twilio.Video.V1.RoomRecordingInstance #{values}>"
                    end
                end
             end
            end
        end
    end
end


