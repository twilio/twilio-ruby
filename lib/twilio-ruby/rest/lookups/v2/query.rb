##
#    This code was generated by
#    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
#     |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
#     |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
#
#    Twilio - Lookups
#    This is the public Twilio REST API.
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Twilio
    module REST
        class Lookups < LookupsBase
            class V2 < Version
                class QueryList < ListResource
                
                    class CallForwarding
                            # @param [call_forwarding_enabled]: [Boolean] 
                            # @param [error_code]: [Integer] 
                        attr_accessor :call_forwarding_enabled, :error_code
                        def initialize(payload)
                                @call_forwarding_enabled = payload["call_forwarding_enabled"]
                                @error_code = payload["error_code"]
                        end
                        def to_json(options = {})
                        {
                                "call_forwarding_enabled": @call_forwarding_enabled,
                                "error_code": @error_code,
                        }.to_json(options)
                        end
                    end

                    class CallerName
                            # @param [caller_name]: [String] 
                            # @param [caller_type]: [String] 
                            # @param [error_code]: [Integer] 
                        attr_accessor :caller_name, :caller_type, :error_code
                        def initialize(payload)
                                @caller_name = payload["caller_name"]
                                @caller_type = payload["caller_type"]
                                @error_code = payload["error_code"]
                        end
                        def to_json(options = {})
                        {
                                "caller_name": @caller_name,
                                "caller_type": @caller_type,
                                "error_code": @error_code,
                        }.to_json(options)
                        end
                    end

                    class IdentityMatch
                            # @param [first_name_match]: [String] 
                            # @param [last_name_match]: [String] 
                            # @param [address_line_match]: [String] 
                            # @param [city_match]: [String] 
                            # @param [state_match]: [String] 
                            # @param [postal_code_match]: [String] 
                            # @param [country_code_match]: [String] 
                            # @param [national_id_match]: [String] 
                            # @param [date_of_birth_match]: [String] 
                            # @param [summary_score]: [Integer] 
                            # @param [error_code]: [Integer] 
                            # @param [error_message]: [String] 
                        attr_accessor :first_name_match, :last_name_match, :address_line_match, :city_match, :state_match, :postal_code_match, :country_code_match, :national_id_match, :date_of_birth_match, :summary_score, :error_code, :error_message
                        def initialize(payload)
                                @first_name_match = payload["first_name_match"]
                                @last_name_match = payload["last_name_match"]
                                @address_line_match = payload["address_line_match"]
                                @city_match = payload["city_match"]
                                @state_match = payload["state_match"]
                                @postal_code_match = payload["postal_code_match"]
                                @country_code_match = payload["country_code_match"]
                                @national_id_match = payload["national_id_match"]
                                @date_of_birth_match = payload["date_of_birth_match"]
                                @summary_score = payload["summary_score"]
                                @error_code = payload["error_code"]
                                @error_message = payload["error_message"]
                        end
                        def to_json(options = {})
                        {
                                "first_name_match": @first_name_match,
                                "last_name_match": @last_name_match,
                                "address_line_match": @address_line_match,
                                "city_match": @city_match,
                                "state_match": @state_match,
                                "postal_code_match": @postal_code_match,
                                "country_code_match": @country_code_match,
                                "national_id_match": @national_id_match,
                                "date_of_birth_match": @date_of_birth_match,
                                "summary_score": @summary_score,
                                "error_code": @error_code,
                                "error_message": @error_message,
                        }.to_json(options)
                        end
                    end

                    class IdentityMatchParameters
                            # @param [first_name]: [String] 
                            # @param [last_name]: [String] 
                            # @param [address_line1]: [String] 
                            # @param [address_line2]: [String] 
                            # @param [city]: [String] 
                            # @param [state]: [String] 
                            # @param [postal_code]: [String] 
                            # @param [address_country_code]: [String] 
                            # @param [national_id]: [String] 
                            # @param [date_of_birth]: [String] 
                        attr_accessor :first_name, :last_name, :address_line1, :address_line2, :city, :state, :postal_code, :address_country_code, :national_id, :date_of_birth
                        def initialize(payload)
                                @first_name = payload["first_name"]
                                @last_name = payload["last_name"]
                                @address_line1 = payload["address_line1"]
                                @address_line2 = payload["address_line2"]
                                @city = payload["city"]
                                @state = payload["state"]
                                @postal_code = payload["postal_code"]
                                @address_country_code = payload["address_country_code"]
                                @national_id = payload["national_id"]
                                @date_of_birth = payload["date_of_birth"]
                        end
                        def to_json(options = {})
                        {
                                "first_name": @first_name,
                                "last_name": @last_name,
                                "address_line1": @address_line1,
                                "address_line2": @address_line2,
                                "city": @city,
                                "state": @state,
                                "postal_code": @postal_code,
                                "address_country_code": @address_country_code,
                                "national_id": @national_id,
                                "date_of_birth": @date_of_birth,
                        }.to_json(options)
                        end
                    end

                    class LastSimSwap
                            # @param [last_sim_swap_date]: [Time] 
                            # @param [swapped_period]: [String] 
                            # @param [swapped_in_period]: [Boolean] 
                        attr_accessor :last_sim_swap_date, :swapped_period, :swapped_in_period
                        def initialize(payload)
                                @last_sim_swap_date = payload["last_sim_swap_date"]
                                @swapped_period = payload["swapped_period"]
                                @swapped_in_period = payload["swapped_in_period"]
                        end
                        def to_json(options = {})
                        {
                                "last_sim_swap_date": @last_sim_swap_date,
                                "swapped_period": @swapped_period,
                                "swapped_in_period": @swapped_in_period,
                        }.to_json(options)
                        end
                    end

                    class LineStatus
                            # @param [status]: [String] 
                            # @param [error_code]: [Integer] 
                        attr_accessor :status, :error_code
                        def initialize(payload)
                                @status = payload["status"]
                                @error_code = payload["error_code"]
                        end
                        def to_json(options = {})
                        {
                                "status": @status,
                                "error_code": @error_code,
                        }.to_json(options)
                        end
                    end

                    class LineTypeIntelligence
                            # @param [type]: [String] 
                            # @param [carrier_name]: [String] 
                            # @param [mobile_country_code]: [String] 
                            # @param [mobile_network_code]: [String] 
                            # @param [error_code]: [Integer] 
                        attr_accessor :type, :carrier_name, :mobile_country_code, :mobile_network_code, :error_code
                        def initialize(payload)
                                @type = payload["type"]
                                @carrier_name = payload["carrier_name"]
                                @mobile_country_code = payload["mobile_country_code"]
                                @mobile_network_code = payload["mobile_network_code"]
                                @error_code = payload["error_code"]
                        end
                        def to_json(options = {})
                        {
                                "type": @type,
                                "carrier_name": @carrier_name,
                                "mobile_country_code": @mobile_country_code,
                                "mobile_network_code": @mobile_network_code,
                                "error_code": @error_code,
                        }.to_json(options)
                        end
                    end

                    class LookupRequest1
                            # @param [phone_numbers]: [Array<QueryList.LookupRequestWithCorId>] 
                        attr_accessor :phone_numbers
                        def initialize(payload)
                                @phone_numbers = payload["phone_numbers"]
                        end
                        def to_json(options = {})
                        {
                                "phone_numbers": @phone_numbers,
                        }.to_json(options)
                        end
                    end

                    class LookupRequestWithCorId
                            # @param [correlation_id]: [String] Unique identifier used to match request with response
                            # @param [phone_number]: [String] 
                            # @param [fields]: [Array<String>] 
                            # @param [country_code]: [String] 
                            # @param [identity_match]: [QueryList.IdentityMatchParameters] 
                            # @param [reassigned_number]: [QueryList.ReassignedNumberRequest] 
                            # @param [sms_pumping_risk]: [QueryList.SmsPumpingRiskParameters] 
                        attr_accessor :correlation_id, :phone_number, :fields, :country_code, :identity_match, :reassigned_number, :sms_pumping_risk
                        def initialize(payload)
                                @correlation_id = payload["correlation_id"]
                                @phone_number = payload["phone_number"]
                                @fields = payload["fields"]
                                @country_code = payload["country_code"]
                                @identity_match = payload["identity_match"]
                                @reassigned_number = payload["reassigned_number"]
                                @sms_pumping_risk = payload["sms_pumping_risk"]
                        end
                        def to_json(options = {})
                        {
                                "correlation_id": @correlation_id,
                                "phone_number": @phone_number,
                                "fields": @fields,
                                "country_code": @country_code,
                                "identity_match": @identity_match,
                                "reassigned_number": @reassigned_number,
                                "sms_pumping_risk": @sms_pumping_risk,
                        }.to_json(options)
                        end
                    end

                    class ReassignedNumberRequest
                            # @param [last_verified_date]: [String] 
                        attr_accessor :last_verified_date
                        def initialize(payload)
                                @last_verified_date = payload["last_verified_date"]
                        end
                        def to_json(options = {})
                        {
                                "last_verified_date": @last_verified_date,
                        }.to_json(options)
                        end
                    end

                    class ReassignedNumberResponse
                            # @param [last_verified_date]: [String] 
                            # @param [is_number_reassigned]: [String] 
                            # @param [error_code]: [String] 
                        attr_accessor :last_verified_date, :is_number_reassigned, :error_code
                        def initialize(payload)
                                @last_verified_date = payload["last_verified_date"]
                                @is_number_reassigned = payload["is_number_reassigned"]
                                @error_code = payload["error_code"]
                        end
                        def to_json(options = {})
                        {
                                "last_verified_date": @last_verified_date,
                                "is_number_reassigned": @is_number_reassigned,
                                "error_code": @error_code,
                        }.to_json(options)
                        end
                    end

                    class SimSwap
                            # @param [last_sim_swap]: [LastSimSwap] 
                            # @param [carrier_name]: [String] 
                            # @param [mobile_country_code]: [String] 
                            # @param [mobile_network_code]: [String] 
                            # @param [error_code]: [Integer] 
                        attr_accessor :last_sim_swap, :carrier_name, :mobile_country_code, :mobile_network_code, :error_code
                        def initialize(payload)
                                @last_sim_swap = payload["last_sim_swap"]
                                @carrier_name = payload["carrier_name"]
                                @mobile_country_code = payload["mobile_country_code"]
                                @mobile_network_code = payload["mobile_network_code"]
                                @error_code = payload["error_code"]
                        end
                        def to_json(options = {})
                        {
                                "last_sim_swap": @last_sim_swap,
                                "carrier_name": @carrier_name,
                                "mobile_country_code": @mobile_country_code,
                                "mobile_network_code": @mobile_network_code,
                                "error_code": @error_code,
                        }.to_json(options)
                        end
                    end

                    class SmsPumpingRisk
                            # @param [carrier_risk_category]: [String] 
                            # @param [number_blocked]: [Boolean] 
                            # @param [number_blocked_date]: [Time] 
                            # @param [number_blocked_last_3_months]: [Boolean] 
                            # @param [sms_pumping_risk_score]: [Integer] 
                            # @param [error_code]: [Integer] 
                        attr_accessor :carrier_risk_category, :number_blocked, :number_blocked_date, :number_blocked_last_3_months, :sms_pumping_risk_score, :error_code
                        def initialize(payload)
                                @carrier_risk_category = payload["carrier_risk_category"]
                                @number_blocked = payload["number_blocked"]
                                @number_blocked_date = payload["number_blocked_date"]
                                @number_blocked_last_3_months = payload["number_blocked_last_3_months"]
                                @sms_pumping_risk_score = payload["sms_pumping_risk_score"]
                                @error_code = payload["error_code"]
                        end
                        def to_json(options = {})
                        {
                                "carrier_risk_category": @carrier_risk_category,
                                "number_blocked": @number_blocked,
                                "number_blocked_date": @number_blocked_date,
                                "number_blocked_last_3_months": @number_blocked_last_3_months,
                                "sms_pumping_risk_score": @sms_pumping_risk_score,
                                "error_code": @error_code,
                        }.to_json(options)
                        end
                    end

                    class SmsPumpingRiskParameters
                            # @param [partner_sub_id]: [String] 
                        attr_accessor :partner_sub_id
                        def initialize(payload)
                                @partner_sub_id = payload["partner_sub_id"]
                        end
                        def to_json(options = {})
                        {
                                "partner_sub_id": @partner_sub_id,
                        }.to_json(options)
                        end
                    end


                    ##
                    # Initialize the QueryList
                    # @param [Version] version Version that contains the resource
                    # @return [QueryList] QueryList
                    def initialize(version)
                        super(version)
                        # Path Solution
                        @solution = {  }
                        @uri = "/batch/query"
                        
                    end
                    ##
                    # Create the QueryInstance
                    # @param [LookupRequest1] lookup_request1 
                    # @return [QueryInstance] Created QueryInstance
                    def create(lookup_request1: :unset
                    )

                        headers = Twilio::Values.of({'Content-Type' => 'application/x-www-form-urlencoded', })
                        headers['Content-Type'] = 'application/json'
                        
                        
                        
                        
                        payload = @version.create('POST', @uri, headers: headers, data: lookup_request1.to_json)
                        QueryInstance.new(
                            @version,
                            payload,
                        )
                    end

                


                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.Lookups.V2.QueryList>'
                    end
                end

                class QueryPage < Page
                    ##
                    # Initialize the QueryPage
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [QueryPage] QueryPage
                    def initialize(version, response, solution)
                        super(version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of QueryInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [QueryInstance] QueryInstance
                    def get_instance(payload)
                        QueryInstance.new(@version, payload)
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Twilio.Lookups.V2.QueryPage>'
                    end
                end
                class QueryInstance < InstanceResource
                    ##
                    # Initialize the QueryInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Twilio
                    # @param [String] account_sid The SID of the
                    #   {Account}[https://www.twilio.com/docs/iam/api/account] that created this Query
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [QueryInstance] QueryInstance
                    def initialize(version, payload )
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'phone_numbers' => payload['phone_numbers'],
                        }
                    end

                    
                    ##
                    # @return [Array<LookupResponseWithCorId>] 
                    def phone_numbers
                        @properties['phone_numbers']
                    end
                    
                    ##
                    # Provide a user friendly representation
                    def to_s
                        "<Twilio.Lookups.V2.QueryInstance>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        "<Twilio.Lookups.V2.QueryInstance>"
                    end
                end

            end
        end
    end
end
