##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Chat < Domain
      class V2 < Version
        class ServiceList < ListResource
          ##
          # Initialize the ServiceList
          # @param [Version] version Version that contains the resource
          # @return [ServiceList] ServiceList
          def initialize(version)
            super(version)

            # Path Solution
            @solution = {}
            @uri = "/Services"
          end

          ##
          # Create the ServiceInstance
          # @param [String] friendly_name A descriptive string that you create to describe
          #   the new resource.
          # @return [ServiceInstance] Created ServiceInstance
          def create(friendly_name: nil)
            data = Twilio::Values.of({'FriendlyName' => friendly_name, })

            payload = @version.create('POST', @uri, data: data)

            ServiceInstance.new(@version, payload, )
          end

          ##
          # Lists ServiceInstance records from the API as a list.
          # Unlike stream(), this operation is eager and will load `limit` records into
          # memory before returning.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit.  Default is no limit
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records.  If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Array] Array of up to limit results
          def list(limit: nil, page_size: nil)
            self.stream(limit: limit, page_size: page_size).entries
          end

          ##
          # Streams ServiceInstance records from the API as an Enumerable.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit. Default is no limit.
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records. If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Enumerable] Enumerable that will yield up to limit results
          def stream(limit: nil, page_size: nil)
            limits = @version.read_limits(limit, page_size)

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
          end

          ##
          # When passed a block, yields ServiceInstance records from the API.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          def each
            limits = @version.read_limits

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
          end

          ##
          # Retrieve a single page of ServiceInstance records from the API.
          # Request is executed immediately.
          # @param [String] page_token PageToken provided by the API
          # @param [Integer] page_number Page Number, this value is simply for client state
          # @param [Integer] page_size Number of records to return, defaults to 50
          # @return [Page] Page of ServiceInstance
          def page(page_token: :unset, page_number: :unset, page_size: :unset)
            params = Twilio::Values.of({
                'PageToken' => page_token,
                'Page' => page_number,
                'PageSize' => page_size,
            })

            response = @version.page('GET', @uri, params: params)

            ServicePage.new(@version, response, @solution)
          end

          ##
          # Retrieve a single page of ServiceInstance records from the API.
          # Request is executed immediately.
          # @param [String] target_url API-generated URL for the requested results page
          # @return [Page] Page of ServiceInstance
          def get_page(target_url)
            response = @version.domain.request(
                'GET',
                target_url
            )
            ServicePage.new(@version, response, @solution)
          end

          ##
          # Provide a user friendly representation
          def to_s
            '#<Twilio.Chat.V2.ServiceList>'
          end
        end

        class ServicePage < Page
          ##
          # Initialize the ServicePage
          # @param [Version] version Version that contains the resource
          # @param [Response] response Response from the API
          # @param [Hash] solution Path solution for the resource
          # @return [ServicePage] ServicePage
          def initialize(version, response, solution)
            super(version, response)

            # Path Solution
            @solution = solution
          end

          ##
          # Build an instance of ServiceInstance
          # @param [Hash] payload Payload response from the API
          # @return [ServiceInstance] ServiceInstance
          def get_instance(payload)
            ServiceInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            '<Twilio.Chat.V2.ServicePage>'
          end
        end

        class ServiceContext < InstanceContext
          ##
          # Initialize the ServiceContext
          # @param [Version] version Version that contains the resource
          # @param [String] sid The SID of the Service resource to fetch.
          # @return [ServiceContext] ServiceContext
          def initialize(version, sid)
            super(version)

            # Path Solution
            @solution = {sid: sid, }
            @uri = "/Services/#{@solution[:sid]}"

            # Dependents
            @channels = nil
            @roles = nil
            @users = nil
            @bindings = nil
          end

          ##
          # Fetch the ServiceInstance
          # @return [ServiceInstance] Fetched ServiceInstance
          def fetch
            payload = @version.fetch('GET', @uri)

            ServiceInstance.new(@version, payload, sid: @solution[:sid], )
          end

          ##
          # Delete the ServiceInstance
          # @return [Boolean] true if delete succeeds, false otherwise
          def delete
             @version.delete('DELETE', @uri)
          end

          ##
          # Update the ServiceInstance
          # @param [String] friendly_name A descriptive string that you create to describe
          #   the resource.
          # @param [String] default_service_role_sid The service role assigned to users when
          #   they are added to the service. See the {Role
          #   resource}[https://www.twilio.com/docs/chat/rest/role-resource] for more info
          #   about roles.
          # @param [String] default_channel_role_sid The channel role assigned to users when
          #   they are added to a channel. See the {Role
          #   resource}[https://www.twilio.com/docs/chat/rest/role-resource] for more info
          #   about roles.
          # @param [String] default_channel_creator_role_sid The channel role assigned to a
          #   channel creator when they join a new channel. See the {Role
          #   resource}[https://www.twilio.com/docs/chat/rest/role-resource] for more info
          #   about roles.
          # @param [Boolean] read_status_enabled Whether to enable the {Message Consumption
          #   Horizon}[https://www.twilio.com/docs/chat/consumption-horizon] feature. The
          #   default is `true`.
          # @param [Boolean] reachability_enabled Whether to enable the {Reachability
          #   Indicator}[https://www.twilio.com/docs/chat/reachability-indicator] for this
          #   Service instance. The default is `false`.
          # @param [String] typing_indicator_timeout How long in seconds after a `started
          #   typing` event until clients should assume that user is no longer typing, even if
          #   no `ended typing` message was received.  The default is 5 seconds.
          # @param [String] consumption_report_interval DEPRECATED. The interval in seconds
          #   between consumption reports submission batches from client endpoints.
          # @param [Boolean] notifications_new_message_enabled Whether to send a
          #   notification when a new message is added to a channel. The default is `false`.
          # @param [String] notifications_new_message_template The template to use to create
          #   the notification text displayed when a new message is added to a channel and
          #   `notifications.new_message.enabled` is `true`.
          # @param [String] notifications_new_message_sound The name of the sound to play
          #   when a new message is added to a channel and `notifications.new_message.enabled`
          #   is `true`.
          # @param [Boolean] notifications_new_message_badge_count_enabled Whether the new
          #   message badge is enabled. The default is `false`.
          # @param [Boolean] notifications_added_to_channel_enabled Whether to send a
          #   notification when a member is added to a channel. The default is `false`.
          # @param [String] notifications_added_to_channel_template The template to use to
          #   create the notification text displayed when a member is added to a channel and
          #   `notifications.added_to_channel.enabled` is `true`.
          # @param [String] notifications_added_to_channel_sound The name of the sound to
          #   play when a member is added to a channel and
          #   `notifications.added_to_channel.enabled` is `true`.
          # @param [Boolean] notifications_removed_from_channel_enabled Whether to send a
          #   notification to a user when they are removed from a channel. The default is
          #   `false`.
          # @param [String] notifications_removed_from_channel_template The template to use
          #   to create the notification text displayed to a user when they are removed from a
          #   channel and `notifications.removed_from_channel.enabled` is `true`.
          # @param [String] notifications_removed_from_channel_sound The name of the sound
          #   to play to a user when they are removed from a channel and
          #   `notifications.removed_from_channel.enabled` is `true`.
          # @param [Boolean] notifications_invited_to_channel_enabled Whether to send a
          #   notification when a user is invited to a channel. The default is `false`.
          # @param [String] notifications_invited_to_channel_template The template to use to
          #   create the notification text displayed when a user is invited to a channel and
          #   `notifications.invited_to_channel.enabled` is `true`.
          # @param [String] notifications_invited_to_channel_sound The name of the sound to
          #   play when a user is invited to a channel and
          #   `notifications.invited_to_channel.enabled` is `true`.
          # @param [String] pre_webhook_url The URL for pre-event webhooks, which are called
          #   by using the `webhook_method`. See {Webhook
          #   Events}[https://www.twilio.com/docs/chat/webhook-events] for more details.
          # @param [String] post_webhook_url The URL for post-event webhooks, which are
          #   called by using the `webhook_method`. See {Webhook
          #   Events}[https://www.twilio.com/docs/chat/webhook-events] for more details.
          # @param [String] webhook_method The HTTP method to use for calls to the
          #   `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and
          #   the default is `POST`. See {Webhook
          #   Events}[https://www.twilio.com/docs/chat/webhook-events] for more details.
          # @param [Array[String]] webhook_filters The list of webhook events that are
          #   enabled for this Service instance. See {Webhook
          #   Events}[https://www.twilio.com/docs/chat/webhook-events] for more details.
          # @param [String] limits_channel_members The maximum number of Members that can be
          #   added to Channels within this Service. Can be up to 1,000.
          # @param [String] limits_user_channels The maximum number of Channels Users can be
          #   a Member of within this Service. Can be up to 1,000.
          # @param [String] media_compatibility_message The message to send when a media
          #   message has no text. Can be used as placeholder message.
          # @param [String] pre_webhook_retry_count The number of times to retry a call to
          #   the `pre_webhook_url` if the request times out (after 5 seconds) or it receives
          #   a 429, 503, or 504 HTTP response. Default retry count is 0 times, which means
          #   the call won't be retried.
          # @param [String] post_webhook_retry_count The number of times to retry a call to
          #   the `post_webhook_url` if the request times out (after 5 seconds) or it receives
          #   a 429, 503, or 504 HTTP response. The default is 0, which means the call won't
          #   be retried.
          # @param [Boolean] notifications_log_enabled Whether to log notifications. The
          #   default is `false`.
          # @return [ServiceInstance] Updated ServiceInstance
          def update(friendly_name: :unset, default_service_role_sid: :unset, default_channel_role_sid: :unset, default_channel_creator_role_sid: :unset, read_status_enabled: :unset, reachability_enabled: :unset, typing_indicator_timeout: :unset, consumption_report_interval: :unset, notifications_new_message_enabled: :unset, notifications_new_message_template: :unset, notifications_new_message_sound: :unset, notifications_new_message_badge_count_enabled: :unset, notifications_added_to_channel_enabled: :unset, notifications_added_to_channel_template: :unset, notifications_added_to_channel_sound: :unset, notifications_removed_from_channel_enabled: :unset, notifications_removed_from_channel_template: :unset, notifications_removed_from_channel_sound: :unset, notifications_invited_to_channel_enabled: :unset, notifications_invited_to_channel_template: :unset, notifications_invited_to_channel_sound: :unset, pre_webhook_url: :unset, post_webhook_url: :unset, webhook_method: :unset, webhook_filters: :unset, limits_channel_members: :unset, limits_user_channels: :unset, media_compatibility_message: :unset, pre_webhook_retry_count: :unset, post_webhook_retry_count: :unset, notifications_log_enabled: :unset)
            data = Twilio::Values.of({
                'FriendlyName' => friendly_name,
                'DefaultServiceRoleSid' => default_service_role_sid,
                'DefaultChannelRoleSid' => default_channel_role_sid,
                'DefaultChannelCreatorRoleSid' => default_channel_creator_role_sid,
                'ReadStatusEnabled' => read_status_enabled,
                'ReachabilityEnabled' => reachability_enabled,
                'TypingIndicatorTimeout' => typing_indicator_timeout,
                'ConsumptionReportInterval' => consumption_report_interval,
                'Notifications.NewMessage.Enabled' => notifications_new_message_enabled,
                'Notifications.NewMessage.Template' => notifications_new_message_template,
                'Notifications.NewMessage.Sound' => notifications_new_message_sound,
                'Notifications.NewMessage.BadgeCountEnabled' => notifications_new_message_badge_count_enabled,
                'Notifications.AddedToChannel.Enabled' => notifications_added_to_channel_enabled,
                'Notifications.AddedToChannel.Template' => notifications_added_to_channel_template,
                'Notifications.AddedToChannel.Sound' => notifications_added_to_channel_sound,
                'Notifications.RemovedFromChannel.Enabled' => notifications_removed_from_channel_enabled,
                'Notifications.RemovedFromChannel.Template' => notifications_removed_from_channel_template,
                'Notifications.RemovedFromChannel.Sound' => notifications_removed_from_channel_sound,
                'Notifications.InvitedToChannel.Enabled' => notifications_invited_to_channel_enabled,
                'Notifications.InvitedToChannel.Template' => notifications_invited_to_channel_template,
                'Notifications.InvitedToChannel.Sound' => notifications_invited_to_channel_sound,
                'PreWebhookUrl' => pre_webhook_url,
                'PostWebhookUrl' => post_webhook_url,
                'WebhookMethod' => webhook_method,
                'WebhookFilters' => Twilio.serialize_list(webhook_filters) { |e| e },
                'Limits.ChannelMembers' => limits_channel_members,
                'Limits.UserChannels' => limits_user_channels,
                'Media.CompatibilityMessage' => media_compatibility_message,
                'PreWebhookRetryCount' => pre_webhook_retry_count,
                'PostWebhookRetryCount' => post_webhook_retry_count,
                'Notifications.LogEnabled' => notifications_log_enabled,
            })

            payload = @version.update('POST', @uri, data: data)

            ServiceInstance.new(@version, payload, sid: @solution[:sid], )
          end

          ##
          # Access the channels
          # @return [ChannelList]
          # @return [ChannelContext] if sid was passed.
          def channels(sid=:unset)
            raise ArgumentError, 'sid cannot be nil' if sid.nil?

            if sid != :unset
              return ChannelContext.new(@version, @solution[:sid], sid, )
            end

            unless @channels
              @channels = ChannelList.new(@version, service_sid: @solution[:sid], )
            end

            @channels
          end

          ##
          # Access the roles
          # @return [RoleList]
          # @return [RoleContext] if sid was passed.
          def roles(sid=:unset)
            raise ArgumentError, 'sid cannot be nil' if sid.nil?

            if sid != :unset
              return RoleContext.new(@version, @solution[:sid], sid, )
            end

            unless @roles
              @roles = RoleList.new(@version, service_sid: @solution[:sid], )
            end

            @roles
          end

          ##
          # Access the users
          # @return [UserList]
          # @return [UserContext] if sid was passed.
          def users(sid=:unset)
            raise ArgumentError, 'sid cannot be nil' if sid.nil?

            if sid != :unset
              return UserContext.new(@version, @solution[:sid], sid, )
            end

            unless @users
              @users = UserList.new(@version, service_sid: @solution[:sid], )
            end

            @users
          end

          ##
          # Access the bindings
          # @return [BindingList]
          # @return [BindingContext] if sid was passed.
          def bindings(sid=:unset)
            raise ArgumentError, 'sid cannot be nil' if sid.nil?

            if sid != :unset
              return BindingContext.new(@version, @solution[:sid], sid, )
            end

            unless @bindings
              @bindings = BindingList.new(@version, service_sid: @solution[:sid], )
            end

            @bindings
          end

          ##
          # Provide a user friendly representation
          def to_s
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Chat.V2.ServiceContext #{context}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Chat.V2.ServiceContext #{context}>"
          end
        end

        class ServiceInstance < InstanceResource
          ##
          # Initialize the ServiceInstance
          # @param [Version] version Version that contains the resource
          # @param [Hash] payload payload that contains response from Twilio
          # @param [String] sid The SID of the Service resource to fetch.
          # @return [ServiceInstance] ServiceInstance
          def initialize(version, payload, sid: nil)
            super(version)

            # Marshaled Properties
            @properties = {
                'sid' => payload['sid'],
                'account_sid' => payload['account_sid'],
                'friendly_name' => payload['friendly_name'],
                'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                'default_service_role_sid' => payload['default_service_role_sid'],
                'default_channel_role_sid' => payload['default_channel_role_sid'],
                'default_channel_creator_role_sid' => payload['default_channel_creator_role_sid'],
                'read_status_enabled' => payload['read_status_enabled'],
                'reachability_enabled' => payload['reachability_enabled'],
                'typing_indicator_timeout' => payload['typing_indicator_timeout'].to_i,
                'consumption_report_interval' => payload['consumption_report_interval'].to_i,
                'limits' => payload['limits'],
                'pre_webhook_url' => payload['pre_webhook_url'],
                'post_webhook_url' => payload['post_webhook_url'],
                'webhook_method' => payload['webhook_method'],
                'webhook_filters' => payload['webhook_filters'],
                'pre_webhook_retry_count' => payload['pre_webhook_retry_count'].to_i,
                'post_webhook_retry_count' => payload['post_webhook_retry_count'].to_i,
                'notifications' => payload['notifications'],
                'media' => payload['media'],
                'url' => payload['url'],
                'links' => payload['links'],
            }

            # Context
            @instance_context = nil
            @params = {'sid' => sid || @properties['sid'], }
          end

          ##
          # Generate an instance context for the instance, the context is capable of
          # performing various actions.  All instance actions are proxied to the context
          # @return [ServiceContext] ServiceContext for this ServiceInstance
          def context
            unless @instance_context
              @instance_context = ServiceContext.new(@version, @params['sid'], )
            end
            @instance_context
          end

          ##
          # @return [String] The unique string that identifies the resource
          def sid
            @properties['sid']
          end

          ##
          # @return [String] The SID of the Account that created the resource
          def account_sid
            @properties['account_sid']
          end

          ##
          # @return [String] The string that you assigned to describe the resource
          def friendly_name
            @properties['friendly_name']
          end

          ##
          # @return [Time] The RFC 2822 date and time in GMT when the resource was created
          def date_created
            @properties['date_created']
          end

          ##
          # @return [Time] The RFC 2822 date and time in GMT when the resource was last updated
          def date_updated
            @properties['date_updated']
          end

          ##
          # @return [String] The service role assigned to users when they are added to the service
          def default_service_role_sid
            @properties['default_service_role_sid']
          end

          ##
          # @return [String] The channel role assigned to users when they are added to a channel
          def default_channel_role_sid
            @properties['default_channel_role_sid']
          end

          ##
          # @return [String] The channel role assigned to a channel creator when they join a new channel
          def default_channel_creator_role_sid
            @properties['default_channel_creator_role_sid']
          end

          ##
          # @return [Boolean] Whether the Message Consumption Horizon feature is enabled
          def read_status_enabled
            @properties['read_status_enabled']
          end

          ##
          # @return [Boolean] Whether the Reachability Indicator feature is enabled for this Service instance
          def reachability_enabled
            @properties['reachability_enabled']
          end

          ##
          # @return [String] How long in seconds to wait before assuming the user is no longer typing
          def typing_indicator_timeout
            @properties['typing_indicator_timeout']
          end

          ##
          # @return [String] DEPRECATED
          def consumption_report_interval
            @properties['consumption_report_interval']
          end

          ##
          # @return [Hash] An object that describes the limits of the service instance
          def limits
            @properties['limits']
          end

          ##
          # @return [String] The webhook URL for pre-event webhooks
          def pre_webhook_url
            @properties['pre_webhook_url']
          end

          ##
          # @return [String] The URL for post-event webhooks
          def post_webhook_url
            @properties['post_webhook_url']
          end

          ##
          # @return [String] The HTTP method  to use for both PRE and POST webhooks
          def webhook_method
            @properties['webhook_method']
          end

          ##
          # @return [Array[String]] The list of webhook events that are enabled for this Service instance
          def webhook_filters
            @properties['webhook_filters']
          end

          ##
          # @return [String] Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses
          def pre_webhook_retry_count
            @properties['pre_webhook_retry_count']
          end

          ##
          # @return [String] The number of times calls to the `post_webhook_url` will be retried
          def post_webhook_retry_count
            @properties['post_webhook_retry_count']
          end

          ##
          # @return [Hash] The notification configuration for the Service instance
          def notifications
            @properties['notifications']
          end

          ##
          # @return [Hash] The properties of the media that the service supports
          def media
            @properties['media']
          end

          ##
          # @return [String] The absolute URL of the Service resource
          def url
            @properties['url']
          end

          ##
          # @return [String] The absolute URLs of the Service's Channels, Roles, and Users
          def links
            @properties['links']
          end

          ##
          # Fetch the ServiceInstance
          # @return [ServiceInstance] Fetched ServiceInstance
          def fetch
            context.fetch
          end

          ##
          # Delete the ServiceInstance
          # @return [Boolean] true if delete succeeds, false otherwise
          def delete
            context.delete
          end

          ##
          # Update the ServiceInstance
          # @param [String] friendly_name A descriptive string that you create to describe
          #   the resource.
          # @param [String] default_service_role_sid The service role assigned to users when
          #   they are added to the service. See the {Role
          #   resource}[https://www.twilio.com/docs/chat/rest/role-resource] for more info
          #   about roles.
          # @param [String] default_channel_role_sid The channel role assigned to users when
          #   they are added to a channel. See the {Role
          #   resource}[https://www.twilio.com/docs/chat/rest/role-resource] for more info
          #   about roles.
          # @param [String] default_channel_creator_role_sid The channel role assigned to a
          #   channel creator when they join a new channel. See the {Role
          #   resource}[https://www.twilio.com/docs/chat/rest/role-resource] for more info
          #   about roles.
          # @param [Boolean] read_status_enabled Whether to enable the {Message Consumption
          #   Horizon}[https://www.twilio.com/docs/chat/consumption-horizon] feature. The
          #   default is `true`.
          # @param [Boolean] reachability_enabled Whether to enable the {Reachability
          #   Indicator}[https://www.twilio.com/docs/chat/reachability-indicator] for this
          #   Service instance. The default is `false`.
          # @param [String] typing_indicator_timeout How long in seconds after a `started
          #   typing` event until clients should assume that user is no longer typing, even if
          #   no `ended typing` message was received.  The default is 5 seconds.
          # @param [String] consumption_report_interval DEPRECATED. The interval in seconds
          #   between consumption reports submission batches from client endpoints.
          # @param [Boolean] notifications_new_message_enabled Whether to send a
          #   notification when a new message is added to a channel. The default is `false`.
          # @param [String] notifications_new_message_template The template to use to create
          #   the notification text displayed when a new message is added to a channel and
          #   `notifications.new_message.enabled` is `true`.
          # @param [String] notifications_new_message_sound The name of the sound to play
          #   when a new message is added to a channel and `notifications.new_message.enabled`
          #   is `true`.
          # @param [Boolean] notifications_new_message_badge_count_enabled Whether the new
          #   message badge is enabled. The default is `false`.
          # @param [Boolean] notifications_added_to_channel_enabled Whether to send a
          #   notification when a member is added to a channel. The default is `false`.
          # @param [String] notifications_added_to_channel_template The template to use to
          #   create the notification text displayed when a member is added to a channel and
          #   `notifications.added_to_channel.enabled` is `true`.
          # @param [String] notifications_added_to_channel_sound The name of the sound to
          #   play when a member is added to a channel and
          #   `notifications.added_to_channel.enabled` is `true`.
          # @param [Boolean] notifications_removed_from_channel_enabled Whether to send a
          #   notification to a user when they are removed from a channel. The default is
          #   `false`.
          # @param [String] notifications_removed_from_channel_template The template to use
          #   to create the notification text displayed to a user when they are removed from a
          #   channel and `notifications.removed_from_channel.enabled` is `true`.
          # @param [String] notifications_removed_from_channel_sound The name of the sound
          #   to play to a user when they are removed from a channel and
          #   `notifications.removed_from_channel.enabled` is `true`.
          # @param [Boolean] notifications_invited_to_channel_enabled Whether to send a
          #   notification when a user is invited to a channel. The default is `false`.
          # @param [String] notifications_invited_to_channel_template The template to use to
          #   create the notification text displayed when a user is invited to a channel and
          #   `notifications.invited_to_channel.enabled` is `true`.
          # @param [String] notifications_invited_to_channel_sound The name of the sound to
          #   play when a user is invited to a channel and
          #   `notifications.invited_to_channel.enabled` is `true`.
          # @param [String] pre_webhook_url The URL for pre-event webhooks, which are called
          #   by using the `webhook_method`. See {Webhook
          #   Events}[https://www.twilio.com/docs/chat/webhook-events] for more details.
          # @param [String] post_webhook_url The URL for post-event webhooks, which are
          #   called by using the `webhook_method`. See {Webhook
          #   Events}[https://www.twilio.com/docs/chat/webhook-events] for more details.
          # @param [String] webhook_method The HTTP method to use for calls to the
          #   `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and
          #   the default is `POST`. See {Webhook
          #   Events}[https://www.twilio.com/docs/chat/webhook-events] for more details.
          # @param [Array[String]] webhook_filters The list of webhook events that are
          #   enabled for this Service instance. See {Webhook
          #   Events}[https://www.twilio.com/docs/chat/webhook-events] for more details.
          # @param [String] limits_channel_members The maximum number of Members that can be
          #   added to Channels within this Service. Can be up to 1,000.
          # @param [String] limits_user_channels The maximum number of Channels Users can be
          #   a Member of within this Service. Can be up to 1,000.
          # @param [String] media_compatibility_message The message to send when a media
          #   message has no text. Can be used as placeholder message.
          # @param [String] pre_webhook_retry_count The number of times to retry a call to
          #   the `pre_webhook_url` if the request times out (after 5 seconds) or it receives
          #   a 429, 503, or 504 HTTP response. Default retry count is 0 times, which means
          #   the call won't be retried.
          # @param [String] post_webhook_retry_count The number of times to retry a call to
          #   the `post_webhook_url` if the request times out (after 5 seconds) or it receives
          #   a 429, 503, or 504 HTTP response. The default is 0, which means the call won't
          #   be retried.
          # @param [Boolean] notifications_log_enabled Whether to log notifications. The
          #   default is `false`.
          # @return [ServiceInstance] Updated ServiceInstance
          def update(friendly_name: :unset, default_service_role_sid: :unset, default_channel_role_sid: :unset, default_channel_creator_role_sid: :unset, read_status_enabled: :unset, reachability_enabled: :unset, typing_indicator_timeout: :unset, consumption_report_interval: :unset, notifications_new_message_enabled: :unset, notifications_new_message_template: :unset, notifications_new_message_sound: :unset, notifications_new_message_badge_count_enabled: :unset, notifications_added_to_channel_enabled: :unset, notifications_added_to_channel_template: :unset, notifications_added_to_channel_sound: :unset, notifications_removed_from_channel_enabled: :unset, notifications_removed_from_channel_template: :unset, notifications_removed_from_channel_sound: :unset, notifications_invited_to_channel_enabled: :unset, notifications_invited_to_channel_template: :unset, notifications_invited_to_channel_sound: :unset, pre_webhook_url: :unset, post_webhook_url: :unset, webhook_method: :unset, webhook_filters: :unset, limits_channel_members: :unset, limits_user_channels: :unset, media_compatibility_message: :unset, pre_webhook_retry_count: :unset, post_webhook_retry_count: :unset, notifications_log_enabled: :unset)
            context.update(
                friendly_name: friendly_name,
                default_service_role_sid: default_service_role_sid,
                default_channel_role_sid: default_channel_role_sid,
                default_channel_creator_role_sid: default_channel_creator_role_sid,
                read_status_enabled: read_status_enabled,
                reachability_enabled: reachability_enabled,
                typing_indicator_timeout: typing_indicator_timeout,
                consumption_report_interval: consumption_report_interval,
                notifications_new_message_enabled: notifications_new_message_enabled,
                notifications_new_message_template: notifications_new_message_template,
                notifications_new_message_sound: notifications_new_message_sound,
                notifications_new_message_badge_count_enabled: notifications_new_message_badge_count_enabled,
                notifications_added_to_channel_enabled: notifications_added_to_channel_enabled,
                notifications_added_to_channel_template: notifications_added_to_channel_template,
                notifications_added_to_channel_sound: notifications_added_to_channel_sound,
                notifications_removed_from_channel_enabled: notifications_removed_from_channel_enabled,
                notifications_removed_from_channel_template: notifications_removed_from_channel_template,
                notifications_removed_from_channel_sound: notifications_removed_from_channel_sound,
                notifications_invited_to_channel_enabled: notifications_invited_to_channel_enabled,
                notifications_invited_to_channel_template: notifications_invited_to_channel_template,
                notifications_invited_to_channel_sound: notifications_invited_to_channel_sound,
                pre_webhook_url: pre_webhook_url,
                post_webhook_url: post_webhook_url,
                webhook_method: webhook_method,
                webhook_filters: webhook_filters,
                limits_channel_members: limits_channel_members,
                limits_user_channels: limits_user_channels,
                media_compatibility_message: media_compatibility_message,
                pre_webhook_retry_count: pre_webhook_retry_count,
                post_webhook_retry_count: post_webhook_retry_count,
                notifications_log_enabled: notifications_log_enabled,
            )
          end

          ##
          # Access the channels
          # @return [channels] channels
          def channels
            context.channels
          end

          ##
          # Access the roles
          # @return [roles] roles
          def roles
            context.roles
          end

          ##
          # Access the users
          # @return [users] users
          def users
            context.users
          end

          ##
          # Access the bindings
          # @return [bindings] bindings
          def bindings
            context.bindings
          end

          ##
          # Provide a user friendly representation
          def to_s
            values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Chat.V2.ServiceInstance #{values}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Chat.V2.ServiceInstance #{values}>"
          end
        end
      end
    end
  end
end