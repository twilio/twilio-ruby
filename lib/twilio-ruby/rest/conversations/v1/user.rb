##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Conversations < Domain
      class V1 < Version
        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class UserList < ListResource
          ##
          # Initialize the UserList
          # @param [Version] version Version that contains the resource
          # @return [UserList] UserList
          def initialize(version)
            super(version)

            # Path Solution
            @solution = {}
            @uri = "/Users"
          end

          ##
          # Create the UserInstance
          # @param [String] identity The application-defined string that uniquely identifies
          #   the resource's User within the {Conversation
          #   Service}[https://www.twilio.com/docs/conversations/api/service-resource]. This
          #   value is often a username or an email address, and is case-sensitive.
          # @param [String] friendly_name The string that you assigned to describe the
          #   resource.
          # @param [String] attributes The JSON Object string that stores
          #   application-specific data. If attributes have not been set, `{}` is returned.
          # @param [String] role_sid The SID of a service-level
          #   {Role}[https://www.twilio.com/docs/conversations/api/role-resource] to assign to
          #   the user.
          # @return [UserInstance] Created UserInstance
          def create(identity: nil, friendly_name: :unset, attributes: :unset, role_sid: :unset)
            data = Twilio::Values.of({
                'Identity' => identity,
                'FriendlyName' => friendly_name,
                'Attributes' => attributes,
                'RoleSid' => role_sid,
            })

            payload = @version.create('POST', @uri, data: data)

            UserInstance.new(@version, payload, )
          end

          ##
          # Lists UserInstance records from the API as a list.
          # Unlike stream(), this operation is eager and will load `limit` records into
          # memory before returning.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit.  Default is no limit
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records.  If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Array] Array of up to limit results
          def list(limit: nil, page_size: nil)
            self.stream(limit: limit, page_size: page_size).entries
          end

          ##
          # Streams UserInstance records from the API as an Enumerable.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit. Default is no limit.
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records. If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Enumerable] Enumerable that will yield up to limit results
          def stream(limit: nil, page_size: nil)
            limits = @version.read_limits(limit, page_size)

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
          end

          ##
          # When passed a block, yields UserInstance records from the API.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          def each
            limits = @version.read_limits

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
          end

          ##
          # Retrieve a single page of UserInstance records from the API.
          # Request is executed immediately.
          # @param [String] page_token PageToken provided by the API
          # @param [Integer] page_number Page Number, this value is simply for client state
          # @param [Integer] page_size Number of records to return, defaults to 50
          # @return [Page] Page of UserInstance
          def page(page_token: :unset, page_number: :unset, page_size: :unset)
            params = Twilio::Values.of({
                'PageToken' => page_token,
                'Page' => page_number,
                'PageSize' => page_size,
            })

            response = @version.page('GET', @uri, params: params)

            UserPage.new(@version, response, @solution)
          end

          ##
          # Retrieve a single page of UserInstance records from the API.
          # Request is executed immediately.
          # @param [String] target_url API-generated URL for the requested results page
          # @return [Page] Page of UserInstance
          def get_page(target_url)
            response = @version.domain.request(
                'GET',
                target_url
            )
            UserPage.new(@version, response, @solution)
          end

          ##
          # Provide a user friendly representation
          def to_s
            '#<Twilio.Conversations.V1.UserList>'
          end
        end

        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class UserPage < Page
          ##
          # Initialize the UserPage
          # @param [Version] version Version that contains the resource
          # @param [Response] response Response from the API
          # @param [Hash] solution Path solution for the resource
          # @return [UserPage] UserPage
          def initialize(version, response, solution)
            super(version, response)

            # Path Solution
            @solution = solution
          end

          ##
          # Build an instance of UserInstance
          # @param [Hash] payload Payload response from the API
          # @return [UserInstance] UserInstance
          def get_instance(payload)
            UserInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            '<Twilio.Conversations.V1.UserPage>'
          end
        end

        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class UserContext < InstanceContext
          ##
          # Initialize the UserContext
          # @param [Version] version Version that contains the resource
          # @param [String] sid The SID of the User resource to fetch. This value can be
          #   either the `sid` or the `identity` of the User resource to fetch.
          # @return [UserContext] UserContext
          def initialize(version, sid)
            super(version)

            # Path Solution
            @solution = {sid: sid, }
            @uri = "/Users/#{@solution[:sid]}"
          end

          ##
          # Update the UserInstance
          # @param [String] friendly_name The string that you assigned to describe the
          #   resource.
          # @param [String] attributes The JSON Object string that stores
          #   application-specific data. If attributes have not been set, `{}` is returned.
          # @param [String] role_sid The SID of a service-level
          #   {Role}[https://www.twilio.com/docs/conversations/api/role-resource] to assign to
          #   the user.
          # @return [UserInstance] Updated UserInstance
          def update(friendly_name: :unset, attributes: :unset, role_sid: :unset)
            data = Twilio::Values.of({
                'FriendlyName' => friendly_name,
                'Attributes' => attributes,
                'RoleSid' => role_sid,
            })

            payload = @version.update('POST', @uri, data: data)

            UserInstance.new(@version, payload, sid: @solution[:sid], )
          end

          ##
          # Delete the UserInstance
          # @return [Boolean] true if delete succeeds, false otherwise
          def delete
             @version.delete('DELETE', @uri)
          end

          ##
          # Fetch the UserInstance
          # @return [UserInstance] Fetched UserInstance
          def fetch
            payload = @version.fetch('GET', @uri)

            UserInstance.new(@version, payload, sid: @solution[:sid], )
          end

          ##
          # Provide a user friendly representation
          def to_s
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Conversations.V1.UserContext #{context}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Conversations.V1.UserContext #{context}>"
          end
        end

        ##
        # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
        class UserInstance < InstanceResource
          ##
          # Initialize the UserInstance
          # @param [Version] version Version that contains the resource
          # @param [Hash] payload payload that contains response from Twilio
          # @param [String] sid The SID of the User resource to fetch. This value can be
          #   either the `sid` or the `identity` of the User resource to fetch.
          # @return [UserInstance] UserInstance
          def initialize(version, payload, sid: nil)
            super(version)

            # Marshaled Properties
            @properties = {
                'sid' => payload['sid'],
                'account_sid' => payload['account_sid'],
                'chat_service_sid' => payload['chat_service_sid'],
                'role_sid' => payload['role_sid'],
                'identity' => payload['identity'],
                'friendly_name' => payload['friendly_name'],
                'attributes' => payload['attributes'],
                'is_online' => payload['is_online'],
                'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                'url' => payload['url'],
            }

            # Context
            @instance_context = nil
            @params = {'sid' => sid || @properties['sid'], }
          end

          ##
          # Generate an instance context for the instance, the context is capable of
          # performing various actions.  All instance actions are proxied to the context
          # @return [UserContext] UserContext for this UserInstance
          def context
            unless @instance_context
              @instance_context = UserContext.new(@version, @params['sid'], )
            end
            @instance_context
          end

          ##
          # @return [String] The unique string that identifies the resource
          def sid
            @properties['sid']
          end

          ##
          # @return [String] The SID of the Account that created the resource
          def account_sid
            @properties['account_sid']
          end

          ##
          # @return [String] The SID of the Conversation Service that the resource is associated with
          def chat_service_sid
            @properties['chat_service_sid']
          end

          ##
          # @return [String] The SID of a service-level Role assigned to the user
          def role_sid
            @properties['role_sid']
          end

          ##
          # @return [String] The string that identifies the resource's User
          def identity
            @properties['identity']
          end

          ##
          # @return [String] The string that you assigned to describe the resource
          def friendly_name
            @properties['friendly_name']
          end

          ##
          # @return [String] The JSON Object string that stores application-specific data
          def attributes
            @properties['attributes']
          end

          ##
          # @return [Boolean] Whether the User is actively connected to the Service instance and online
          def is_online
            @properties['is_online']
          end

          ##
          # @return [Time] The ISO 8601 date and time in GMT when the resource was created
          def date_created
            @properties['date_created']
          end

          ##
          # @return [Time] The ISO 8601 date and time in GMT when the resource was last updated
          def date_updated
            @properties['date_updated']
          end

          ##
          # @return [String] The absolute URL of the User resource
          def url
            @properties['url']
          end

          ##
          # Update the UserInstance
          # @param [String] friendly_name The string that you assigned to describe the
          #   resource.
          # @param [String] attributes The JSON Object string that stores
          #   application-specific data. If attributes have not been set, `{}` is returned.
          # @param [String] role_sid The SID of a service-level
          #   {Role}[https://www.twilio.com/docs/conversations/api/role-resource] to assign to
          #   the user.
          # @return [UserInstance] Updated UserInstance
          def update(friendly_name: :unset, attributes: :unset, role_sid: :unset)
            context.update(friendly_name: friendly_name, attributes: attributes, role_sid: role_sid, )
          end

          ##
          # Delete the UserInstance
          # @return [Boolean] true if delete succeeds, false otherwise
          def delete
            context.delete
          end

          ##
          # Fetch the UserInstance
          # @return [UserInstance] Fetched UserInstance
          def fetch
            context.fetch
          end

          ##
          # Provide a user friendly representation
          def to_s
            values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Conversations.V1.UserInstance #{values}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Conversations.V1.UserInstance #{values}>"
          end
        end
      end
    end
  end
end