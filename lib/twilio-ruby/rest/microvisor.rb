##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Microvisor < Domain
      ##
      # Initialize the Microvisor Domain
      def initialize(twilio)
        super

        @base_url = 'https://microvisor.twilio.com'
        @host = 'microvisor.twilio.com'
        @port = 443

        # Versions
        @v1 = nil
      end

      ##
      # Version v1 of microvisor
      def v1
        @v1 ||= V1.new self
      end

      ##
      # @param [String] key The config key; up to 100 characters.
      # @return [Twilio::REST::Microvisor::V1::AccountConfigInstance] if key was passed.
      # @return [Twilio::REST::Microvisor::V1::AccountConfigList]
      def account_configs(key=:unset)
        self.v1.account_configs(key)
      end

      ##
      # @param [String] key The secret key; up to 100 characters.
      # @return [Twilio::REST::Microvisor::V1::AccountSecretInstance] if key was passed.
      # @return [Twilio::REST::Microvisor::V1::AccountSecretList]
      def account_secrets(key=:unset)
        self.v1.account_secrets(key)
      end

      ##
      # @param [String] sid A 34-character string that uniquely identifies this App.
      # @return [Twilio::REST::Microvisor::V1::AppInstance] if sid was passed.
      # @return [Twilio::REST::Microvisor::V1::AppList]
      def apps(sid=:unset)
        self.v1.apps(sid)
      end

      ##
      # @param [String] sid A 34-character string that uniquely identifies this Device.
      # @return [Twilio::REST::Microvisor::V1::DeviceInstance] if sid was passed.
      # @return [Twilio::REST::Microvisor::V1::DeviceList]
      def devices(sid=:unset)
        self.v1.devices(sid)
      end

      ##
      # Provide a user friendly representation
      def to_s
        '#<Twilio::REST::Microvisor>'
      end
    end
  end
end