##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Trusthub
      class V1 < Version
        ##
        # Initialize the V1 version of Trusthub
        def initialize(domain)
          super
          @version = 'v1'
          @customer_profiles = nil
          @end_users = nil
          @end_user_types = nil
          @policies = nil
          @supporting_documents = nil
          @supporting_document_types = nil
          @trust_products = nil
        end

        ##
        # @param [String] sid The unique string that we created to identify the
        #   Customer-Profile resource.
        # @return [Twilio::REST::Trusthub::V1::CustomerProfilesContext] if sid was passed.
        # @return [Twilio::REST::Trusthub::V1::CustomerProfilesList]
        def customer_profiles(sid=:unset)
          if sid.nil?
              raise ArgumentError, 'sid cannot be nil'
          end
          if sid == :unset
              @customer_profiles ||= CustomerProfilesList.new self
          else
              CustomerProfilesContext.new(self, sid)
          end
        end

        ##
        # @param [String] sid The unique string created by Twilio to identify the End User
        #   resource.
        # @return [Twilio::REST::Trusthub::V1::EndUserContext] if sid was passed.
        # @return [Twilio::REST::Trusthub::V1::EndUserList]
        def end_users(sid=:unset)
          if sid.nil?
              raise ArgumentError, 'sid cannot be nil'
          end
          if sid == :unset
              @end_users ||= EndUserList.new self
          else
              EndUserContext.new(self, sid)
          end
        end

        ##
        # @param [String] sid The unique string that identifies the End-User Type
        #   resource.
        # @return [Twilio::REST::Trusthub::V1::EndUserTypeContext] if sid was passed.
        # @return [Twilio::REST::Trusthub::V1::EndUserTypeList]
        def end_user_types(sid=:unset)
          if sid.nil?
              raise ArgumentError, 'sid cannot be nil'
          end
          if sid == :unset
              @end_user_types ||= EndUserTypeList.new self
          else
              EndUserTypeContext.new(self, sid)
          end
        end

        ##
        # @param [String] sid The unique string that identifies the Policy resource.
        # @return [Twilio::REST::Trusthub::V1::PoliciesContext] if sid was passed.
        # @return [Twilio::REST::Trusthub::V1::PoliciesList]
        def policies(sid=:unset)
          if sid.nil?
              raise ArgumentError, 'sid cannot be nil'
          end
          if sid == :unset
              @policies ||= PoliciesList.new self
          else
              PoliciesContext.new(self, sid)
          end
        end

        ##
        # @param [String] sid The unique string created by Twilio to identify the
        #   Supporting Document resource.
        # @return [Twilio::REST::Trusthub::V1::SupportingDocumentContext] if sid was passed.
        # @return [Twilio::REST::Trusthub::V1::SupportingDocumentList]
        def supporting_documents(sid=:unset)
          if sid.nil?
              raise ArgumentError, 'sid cannot be nil'
          end
          if sid == :unset
              @supporting_documents ||= SupportingDocumentList.new self
          else
              SupportingDocumentContext.new(self, sid)
          end
        end

        ##
        # @param [String] sid The unique string that identifies the Supporting Document
        #   Type resource.
        # @return [Twilio::REST::Trusthub::V1::SupportingDocumentTypeContext] if sid was passed.
        # @return [Twilio::REST::Trusthub::V1::SupportingDocumentTypeList]
        def supporting_document_types(sid=:unset)
          if sid.nil?
              raise ArgumentError, 'sid cannot be nil'
          end
          if sid == :unset
              @supporting_document_types ||= SupportingDocumentTypeList.new self
          else
              SupportingDocumentTypeContext.new(self, sid)
          end
        end

        ##
        # @param [String] sid The unique string that we created to identify the
        #   Customer-Profile resource.
        # @return [Twilio::REST::Trusthub::V1::TrustProductsContext] if sid was passed.
        # @return [Twilio::REST::Trusthub::V1::TrustProductsList]
        def trust_products(sid=:unset)
          if sid.nil?
              raise ArgumentError, 'sid cannot be nil'
          end
          if sid == :unset
              @trust_products ||= TrustProductsList.new self
          else
              TrustProductsContext.new(self, sid)
          end
        end

        ##
        # Provide a user friendly representation
        def to_s
          '<Twilio::REST::Trusthub::V1>'
        end
      end
    end
  end
end