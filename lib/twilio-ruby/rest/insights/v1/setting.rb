##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Insights < Domain
      class V1 < Version
        class SettingList < ListResource
          ##
          # Initialize the SettingList
          # @param [Version] version Version that contains the resource
          # @return [SettingList] SettingList
          def initialize(version)
            super(version)

            # Path Solution
            @solution = {}
          end

          ##
          # Provide a user friendly representation
          def to_s
            '#<Twilio.Insights.V1.SettingList>'
          end
        end

        class SettingPage < Page
          ##
          # Initialize the SettingPage
          # @param [Version] version Version that contains the resource
          # @param [Response] response Response from the API
          # @param [Hash] solution Path solution for the resource
          # @return [SettingPage] SettingPage
          def initialize(version, response, solution)
            super(version, response)

            # Path Solution
            @solution = solution
          end

          ##
          # Build an instance of SettingInstance
          # @param [Hash] payload Payload response from the API
          # @return [SettingInstance] SettingInstance
          def get_instance(payload)
            SettingInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            '<Twilio.Insights.V1.SettingPage>'
          end
        end

        class SettingContext < InstanceContext
          ##
          # Initialize the SettingContext
          # @param [Version] version Version that contains the resource
          # @return [SettingContext] SettingContext
          def initialize(version)
            super(version)

            # Path Solution
            @solution = {}
            @uri = "/Voice/Settings"
          end

          ##
          # Fetch the SettingInstance
          # @param [String] subaccount_sid The subaccount_sid
          # @return [SettingInstance] Fetched SettingInstance
          def fetch(subaccount_sid: :unset)
            params = Twilio::Values.of({'SubaccountSid' => subaccount_sid, })

            payload = @version.fetch('GET', @uri, params: params)

            SettingInstance.new(@version, payload, )
          end

          ##
          # Update the SettingInstance
          # @param [Boolean] advanced_features The advanced_features
          # @param [Boolean] voice_trace The voice_trace
          # @param [String] subaccount_sid The subaccount_sid
          # @return [SettingInstance] Updated SettingInstance
          def update(advanced_features: :unset, voice_trace: :unset, subaccount_sid: :unset)
            data = Twilio::Values.of({
                'AdvancedFeatures' => advanced_features,
                'VoiceTrace' => voice_trace,
                'SubaccountSid' => subaccount_sid,
            })

            payload = @version.update('POST', @uri, data: data)

            SettingInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Insights.V1.SettingContext #{context}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Insights.V1.SettingContext #{context}>"
          end
        end

        class SettingInstance < InstanceResource
          ##
          # Initialize the SettingInstance
          # @param [Version] version Version that contains the resource
          # @param [Hash] payload payload that contains response from Twilio
          # @return [SettingInstance] SettingInstance
          def initialize(version, payload)
            super(version)

            # Marshaled Properties
            @properties = {
                'account_sid' => payload['account_sid'],
                'advanced_features' => payload['advanced_features'],
                'voice_trace' => payload['voice_trace'],
                'url' => payload['url'],
            }

            # Context
            @instance_context = nil
            @params = {}
          end

          ##
          # Generate an instance context for the instance, the context is capable of
          # performing various actions.  All instance actions are proxied to the context
          # @return [SettingContext] SettingContext for this SettingInstance
          def context
            unless @instance_context
              @instance_context = SettingContext.new(@version, )
            end
            @instance_context
          end

          ##
          # @return [String] The account_sid
          def account_sid
            @properties['account_sid']
          end

          ##
          # @return [Boolean] The advanced_features
          def advanced_features
            @properties['advanced_features']
          end

          ##
          # @return [Boolean] The voice_trace
          def voice_trace
            @properties['voice_trace']
          end

          ##
          # @return [String] The url
          def url
            @properties['url']
          end

          ##
          # Fetch the SettingInstance
          # @param [String] subaccount_sid The subaccount_sid
          # @return [SettingInstance] Fetched SettingInstance
          def fetch(subaccount_sid: :unset)
            context.fetch(subaccount_sid: subaccount_sid, )
          end

          ##
          # Update the SettingInstance
          # @param [Boolean] advanced_features The advanced_features
          # @param [Boolean] voice_trace The voice_trace
          # @param [String] subaccount_sid The subaccount_sid
          # @return [SettingInstance] Updated SettingInstance
          def update(advanced_features: :unset, voice_trace: :unset, subaccount_sid: :unset)
            context.update(
                advanced_features: advanced_features,
                voice_trace: voice_trace,
                subaccount_sid: subaccount_sid,
            )
          end

          ##
          # Provide a user friendly representation
          def to_s
            values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Insights.V1.SettingInstance #{values}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Insights.V1.SettingInstance #{values}>"
          end
        end
      end
    end
  end
end