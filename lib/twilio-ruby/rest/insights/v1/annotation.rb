##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Insights < Domain
      class V1 < Version
        class AnnotationList < ListResource
          ##
          # Initialize the AnnotationList
          # @param [Version] version Version that contains the resource
          # @return [AnnotationList] AnnotationList
          def initialize(version)
            super(version)

            # Path Solution
            @solution = {}
          end

          ##
          # Provide a user friendly representation
          def to_s
            '#<Twilio.Insights.V1.AnnotationList>'
          end
        end

        class AnnotationPage < Page
          ##
          # Initialize the AnnotationPage
          # @param [Version] version Version that contains the resource
          # @param [Response] response Response from the API
          # @param [Hash] solution Path solution for the resource
          # @return [AnnotationPage] AnnotationPage
          def initialize(version, response, solution)
            super(version, response)

            # Path Solution
            @solution = solution
          end

          ##
          # Build an instance of AnnotationInstance
          # @param [Hash] payload Payload response from the API
          # @return [AnnotationInstance] AnnotationInstance
          def get_instance(payload)
            AnnotationInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            '<Twilio.Insights.V1.AnnotationPage>'
          end
        end

        class AnnotationContext < InstanceContext
          ##
          # Initialize the AnnotationContext
          # @param [Version] version Version that contains the resource
          # @param [String] call_sid The call_sid
          # @return [AnnotationContext] AnnotationContext
          def initialize(version, call_sid)
            super(version)

            # Path Solution
            @solution = {call_sid: call_sid, }
            @uri = "/Voice/#{@solution[:call_sid]}/Annotation"
          end

          ##
          # Update the AnnotationInstance
          # @param [annotation.AnsweredBy] answered_by The answered_by
          # @param [annotation.ConnectivityIssue] connectivity_issue The connectivity_issue
          # @param [String] quality_issues The quality_issues
          # @param [Boolean] spam The spam
          # @param [String] call_score The call_score
          # @param [String] comment The comment
          # @param [String] incident The incident
          # @return [AnnotationInstance] Updated AnnotationInstance
          def update(answered_by: :unset, connectivity_issue: :unset, quality_issues: :unset, spam: :unset, call_score: :unset, comment: :unset, incident: :unset)
            data = Twilio::Values.of({
                'AnsweredBy' => answered_by,
                'ConnectivityIssue' => connectivity_issue,
                'QualityIssues' => quality_issues,
                'Spam' => spam,
                'CallScore' => call_score,
                'Comment' => comment,
                'Incident' => incident,
            })

            payload = @version.update('POST', @uri, data: data)

            AnnotationInstance.new(@version, payload, call_sid: @solution[:call_sid], )
          end

          ##
          # Fetch the AnnotationInstance
          # @return [AnnotationInstance] Fetched AnnotationInstance
          def fetch
            payload = @version.fetch('GET', @uri)

            AnnotationInstance.new(@version, payload, call_sid: @solution[:call_sid], )
          end

          ##
          # Provide a user friendly representation
          def to_s
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Insights.V1.AnnotationContext #{context}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Insights.V1.AnnotationContext #{context}>"
          end
        end

        class AnnotationInstance < InstanceResource
          ##
          # Initialize the AnnotationInstance
          # @param [Version] version Version that contains the resource
          # @param [Hash] payload payload that contains response from Twilio
          # @param [String] call_sid The call_sid
          # @return [AnnotationInstance] AnnotationInstance
          def initialize(version, payload, call_sid: nil)
            super(version)

            # Marshaled Properties
            @properties = {
                'call_sid' => payload['call_sid'],
                'account_sid' => payload['account_sid'],
                'answered_by' => payload['answered_by'],
                'connectivity_issue' => payload['connectivity_issue'],
                'quality_issues' => payload['quality_issues'],
                'spam' => payload['spam'],
                'call_score' => payload['call_score'] == nil ? payload['call_score'] : payload['call_score'].to_i,
                'comment' => payload['comment'],
                'incident' => payload['incident'],
                'url' => payload['url'],
            }

            # Context
            @instance_context = nil
            @params = {'call_sid' => call_sid || @properties['call_sid'], }
          end

          ##
          # Generate an instance context for the instance, the context is capable of
          # performing various actions.  All instance actions are proxied to the context
          # @return [AnnotationContext] AnnotationContext for this AnnotationInstance
          def context
            unless @instance_context
              @instance_context = AnnotationContext.new(@version, @params['call_sid'], )
            end
            @instance_context
          end

          ##
          # @return [String] The call_sid
          def call_sid
            @properties['call_sid']
          end

          ##
          # @return [String] The account_sid
          def account_sid
            @properties['account_sid']
          end

          ##
          # @return [annotation.AnsweredBy] The answered_by
          def answered_by
            @properties['answered_by']
          end

          ##
          # @return [annotation.ConnectivityIssue] The connectivity_issue
          def connectivity_issue
            @properties['connectivity_issue']
          end

          ##
          # @return [Array[String]] The quality_issues
          def quality_issues
            @properties['quality_issues']
          end

          ##
          # @return [Boolean] The spam
          def spam
            @properties['spam']
          end

          ##
          # @return [String] The call_score
          def call_score
            @properties['call_score']
          end

          ##
          # @return [String] The comment
          def comment
            @properties['comment']
          end

          ##
          # @return [String] The incident
          def incident
            @properties['incident']
          end

          ##
          # @return [String] The url
          def url
            @properties['url']
          end

          ##
          # Update the AnnotationInstance
          # @param [annotation.AnsweredBy] answered_by The answered_by
          # @param [annotation.ConnectivityIssue] connectivity_issue The connectivity_issue
          # @param [String] quality_issues The quality_issues
          # @param [Boolean] spam The spam
          # @param [String] call_score The call_score
          # @param [String] comment The comment
          # @param [String] incident The incident
          # @return [AnnotationInstance] Updated AnnotationInstance
          def update(answered_by: :unset, connectivity_issue: :unset, quality_issues: :unset, spam: :unset, call_score: :unset, comment: :unset, incident: :unset)
            context.update(
                answered_by: answered_by,
                connectivity_issue: connectivity_issue,
                quality_issues: quality_issues,
                spam: spam,
                call_score: call_score,
                comment: comment,
                incident: incident,
            )
          end

          ##
          # Fetch the AnnotationInstance
          # @return [AnnotationInstance] Fetched AnnotationInstance
          def fetch
            context.fetch
          end

          ##
          # Provide a user friendly representation
          def to_s
            values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Insights.V1.AnnotationInstance #{values}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Insights.V1.AnnotationInstance #{values}>"
          end
        end
      end
    end
  end
end