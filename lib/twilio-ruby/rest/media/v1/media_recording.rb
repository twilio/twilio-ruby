##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Media < Domain
      class V1 < Version
        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class MediaRecordingList < ListResource
          ##
          # Initialize the MediaRecordingList
          # @param [Version] version Version that contains the resource
          # @return [MediaRecordingList] MediaRecordingList
          def initialize(version)
            super(version)

            # Path Solution
            @solution = {}
            @uri = "/MediaRecordings"
          end

          ##
          # Lists MediaRecordingInstance records from the API as a list.
          # Unlike stream(), this operation is eager and will load `limit` records into
          # memory before returning.
          # @param [media_recording.Order] order The sort order of the list by
          #   `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as
          #   the default.
          # @param [media_recording.Status] status Status to filter by, with possible values
          #   `processing`, `completed`, `deleted`, or `failed`.
          # @param [String] processor_sid SID of a MediaProcessor to filter by.
          # @param [String] source_sid SID of a MediaRecording source to filter by.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit.  Default is no limit
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records.  If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Array] Array of up to limit results
          def list(order: :unset, status: :unset, processor_sid: :unset, source_sid: :unset, limit: nil, page_size: nil)
            self.stream(
                order: order,
                status: status,
                processor_sid: processor_sid,
                source_sid: source_sid,
                limit: limit,
                page_size: page_size
            ).entries
          end

          ##
          # Streams MediaRecordingInstance records from the API as an Enumerable.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          # @param [media_recording.Order] order The sort order of the list by
          #   `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as
          #   the default.
          # @param [media_recording.Status] status Status to filter by, with possible values
          #   `processing`, `completed`, `deleted`, or `failed`.
          # @param [String] processor_sid SID of a MediaProcessor to filter by.
          # @param [String] source_sid SID of a MediaRecording source to filter by.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #    guarantees to never return more than limit. Default is no limit.
          # @param [Integer] page_size Number of records to fetch per request, when
          #    not set will use the default value of 50 records. If no page_size is defined
          #    but a limit is defined, stream() will attempt to read the limit with the most
          #    efficient page size, i.e. min(limit, 1000)
          # @return [Enumerable] Enumerable that will yield up to limit results
          def stream(order: :unset, status: :unset, processor_sid: :unset, source_sid: :unset, limit: nil, page_size: nil)
            limits = @version.read_limits(limit, page_size)

            page = self.page(
                order: order,
                status: status,
                processor_sid: processor_sid,
                source_sid: source_sid,
                page_size: limits[:page_size],
            )

            @version.stream(page, limit: limits[:limit], page_limit: limits[:page_limit])
          end

          ##
          # When passed a block, yields MediaRecordingInstance records from the API.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          def each
            limits = @version.read_limits

            page = self.page(page_size: limits[:page_size], )

            @version.stream(page,
                            limit: limits[:limit],
                            page_limit: limits[:page_limit]).each {|x| yield x}
          end

          ##
          # Retrieve a single page of MediaRecordingInstance records from the API.
          # Request is executed immediately.
          # @param [media_recording.Order] order The sort order of the list by
          #   `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as
          #   the default.
          # @param [media_recording.Status] status Status to filter by, with possible values
          #   `processing`, `completed`, `deleted`, or `failed`.
          # @param [String] processor_sid SID of a MediaProcessor to filter by.
          # @param [String] source_sid SID of a MediaRecording source to filter by.
          # @param [String] page_token PageToken provided by the API
          # @param [Integer] page_number Page Number, this value is simply for client state
          # @param [Integer] page_size Number of records to return, defaults to 50
          # @return [Page] Page of MediaRecordingInstance
          def page(order: :unset, status: :unset, processor_sid: :unset, source_sid: :unset, page_token: :unset, page_number: :unset, page_size: :unset)
            params = Twilio::Values.of({
                'Order' => order,
                'Status' => status,
                'ProcessorSid' => processor_sid,
                'SourceSid' => source_sid,
                'PageToken' => page_token,
                'Page' => page_number,
                'PageSize' => page_size,
            })

            response = @version.page('GET', @uri, params: params)

            MediaRecordingPage.new(@version, response, @solution)
          end

          ##
          # Retrieve a single page of MediaRecordingInstance records from the API.
          # Request is executed immediately.
          # @param [String] target_url API-generated URL for the requested results page
          # @return [Page] Page of MediaRecordingInstance
          def get_page(target_url)
            response = @version.domain.request(
                'GET',
                target_url
            )
            MediaRecordingPage.new(@version, response, @solution)
          end

          ##
          # Provide a user friendly representation
          def to_s
            '#<Twilio.Media.V1.MediaRecordingList>'
          end
        end

        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class MediaRecordingPage < Page
          ##
          # Initialize the MediaRecordingPage
          # @param [Version] version Version that contains the resource
          # @param [Response] response Response from the API
          # @param [Hash] solution Path solution for the resource
          # @return [MediaRecordingPage] MediaRecordingPage
          def initialize(version, response, solution)
            super(version, response)

            # Path Solution
            @solution = solution
          end

          ##
          # Build an instance of MediaRecordingInstance
          # @param [Hash] payload Payload response from the API
          # @return [MediaRecordingInstance] MediaRecordingInstance
          def get_instance(payload)
            MediaRecordingInstance.new(@version, payload, )
          end

          ##
          # Provide a user friendly representation
          def to_s
            '<Twilio.Media.V1.MediaRecordingPage>'
          end
        end

        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class MediaRecordingContext < InstanceContext
          ##
          # Initialize the MediaRecordingContext
          # @param [Version] version Version that contains the resource
          # @param [String] sid The SID of the MediaRecording resource to fetch.
          # @return [MediaRecordingContext] MediaRecordingContext
          def initialize(version, sid)
            super(version)

            # Path Solution
            @solution = {sid: sid, }
            @uri = "/MediaRecordings/#{@solution[:sid]}"
          end

          ##
          # Delete the MediaRecordingInstance
          # @return [Boolean] true if delete succeeds, false otherwise
          def delete
             @version.delete('DELETE', @uri)
          end

          ##
          # Fetch the MediaRecordingInstance
          # @return [MediaRecordingInstance] Fetched MediaRecordingInstance
          def fetch
            payload = @version.fetch('GET', @uri)

            MediaRecordingInstance.new(@version, payload, sid: @solution[:sid], )
          end

          ##
          # Provide a user friendly representation
          def to_s
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Media.V1.MediaRecordingContext #{context}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Media.V1.MediaRecordingContext #{context}>"
          end
        end

        ##
        # PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
        class MediaRecordingInstance < InstanceResource
          ##
          # Initialize the MediaRecordingInstance
          # @param [Version] version Version that contains the resource
          # @param [Hash] payload payload that contains response from Twilio
          # @param [String] sid The SID of the MediaRecording resource to fetch.
          # @return [MediaRecordingInstance] MediaRecordingInstance
          def initialize(version, payload, sid: nil)
            super(version)

            # Marshaled Properties
            @properties = {
                'account_sid' => payload['account_sid'],
                'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                'duration' => payload['duration'] == nil ? payload['duration'] : payload['duration'].to_i,
                'format' => payload['format'],
                'links' => payload['links'],
                'processor_sid' => payload['processor_sid'],
                'resolution' => payload['resolution'],
                'source_sid' => payload['source_sid'],
                'sid' => payload['sid'],
                'media_size' => payload['media_size'] == nil ? payload['media_size'] : payload['media_size'].to_i,
                'status' => payload['status'],
                'status_callback' => payload['status_callback'],
                'status_callback_method' => payload['status_callback_method'],
                'url' => payload['url'],
            }

            # Context
            @instance_context = nil
            @params = {'sid' => sid || @properties['sid'], }
          end

          ##
          # Generate an instance context for the instance, the context is capable of
          # performing various actions.  All instance actions are proxied to the context
          # @return [MediaRecordingContext] MediaRecordingContext for this MediaRecordingInstance
          def context
            unless @instance_context
              @instance_context = MediaRecordingContext.new(@version, @params['sid'], )
            end
            @instance_context
          end

          ##
          # @return [String] The SID of the Account that created the resource
          def account_sid
            @properties['account_sid']
          end

          ##
          # @return [Time] The ISO 8601 date and time in GMT when the resource was created
          def date_created
            @properties['date_created']
          end

          ##
          # @return [Time] The ISO 8601 date and time in GMT when the resource was last updated
          def date_updated
            @properties['date_updated']
          end

          ##
          # @return [String] The duration of the MediaRecording
          def duration
            @properties['duration']
          end

          ##
          # @return [media_recording.Format] The format of the MediaRecording
          def format
            @properties['format']
          end

          ##
          # @return [String] The URLs of related resources
          def links
            @properties['links']
          end

          ##
          # @return [String] The SID of the MediaProcessor
          def processor_sid
            @properties['processor_sid']
          end

          ##
          # @return [String] The dimensions of the video image in pixels
          def resolution
            @properties['resolution']
          end

          ##
          # @return [String] The SID of the resource that generated the original media
          def source_sid
            @properties['source_sid']
          end

          ##
          # @return [String] The unique string that identifies the resource
          def sid
            @properties['sid']
          end

          ##
          # @return [String] The size of the recording media
          def media_size
            @properties['media_size']
          end

          ##
          # @return [media_recording.Status] The status of the MediaRecording
          def status
            @properties['status']
          end

          ##
          # @return [String] The URL to which Twilio will send MediaRecording event updates
          def status_callback
            @properties['status_callback']
          end

          ##
          # @return [String] The HTTP method Twilio should use to call the `status_callback` URL
          def status_callback_method
            @properties['status_callback_method']
          end

          ##
          # @return [String] The absolute URL of the resource
          def url
            @properties['url']
          end

          ##
          # Delete the MediaRecordingInstance
          # @return [Boolean] true if delete succeeds, false otherwise
          def delete
            context.delete
          end

          ##
          # Fetch the MediaRecordingInstance
          # @return [MediaRecordingInstance] Fetched MediaRecordingInstance
          def fetch
            context.fetch
          end

          ##
          # Provide a user friendly representation
          def to_s
            values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Media.V1.MediaRecordingInstance #{values}>"
          end

          ##
          # Provide a detailed, user friendly representation
          def inspect
            values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Media.V1.MediaRecordingInstance #{values}>"
          end
        end
      end
    end
  end
end